

## Patient mets_myeloid cells
```{r human_reanalysis, include=FALSE}
# the idea is the following
human_macs_lung <- qs::qread("input/downloads/human_macs_lung.qs")

#dimplot_better(human_macs_lung, group_by = "macs_assignment") + NoLegend()

human_lung_ref <-
    qs::qread("input/downloads/ds_human_lung_atlas.qs")


dimplot_better(human_lung_ref, group_by = "free_annotation") + NoLegend()

Idents(human_lung_ref) <- human_lung_ref$free_annotation

human_lung_subset <-
    human_lung_ref %>%
    subset(ident = c("Alveolar_macrophages",
                         "DC1",
                         "Classical_monocytes",
                         "DC2",
                         "Interstitial_macrophages",
                         "Mast_cells",
                         "Migratory_DCs",
                         "Non_classical_monocytes")) %>%
    process_seurat()
# Idents(human_lung_ref) <- human_lung_ref$ann_level_1
# human_lung_subset <-
#     human_lung_ref %>%
#     subset(ident = "Immune") %>%
#     process_seurat()

human_lung_subset$CellType <-
    str_replace_all(human_lung_subset$free_annotation,
                    c("^Classical_monocytes" = "cMonocyte",
                     "^Non_classical_monocytes$" = "ncMonocyte",
                     "^Alveolar_macrophages$" = "Alveolar",
                     "^Interstitial_macrophages$" = "Interstitial"))
human_lung_subset$harm_vars <- "source2"

combined_lung <- 
    merge(human_macs_lung, human_lung_subset) %>%
    JoinLayers() %>%
    process_seurat() %>%
    RunHarmony(group.by.vars = "harm_vars") %>%
    process_seurat(reduction = "harmony")


dimplot_better(combined_lung, group_by = c("CellType", "seurat_clusters")) +
    NoLegend()
````



```{r}

#Markers
Immune_Myeloid <- 
    list(LA_TAMs = c("APOC1", "APOE", "APC5", "FABP5"),
        Inflam_TAMs = c("IL1B", "CCL3", "CXCL1", "CXCL2", "CXCL3", "CXCL5"),
        IFN_TAMs = c("IDO", "ISG15", "CXCL8", "CXCL9", "CXCL10"),
        Reg_TAMs = c("AGR1", "MRC1", "CD274", "CX3CR1"),
        Prolif_TAMs = c("MKI67", "CDK1"),
        RTM_TAMs = c("LYVE1", "HES1", "FOLR2"),
        Angio_TAMs = c("VEGFA", "ANGPT2", "ANGPTL4", "SSP1"),
        Osteoclast_TAMs = c("MMP9", "CTSK", "CKB", "CST3"),
        Scar_Macs = c("CD9", "SPP1", "TREM2", "GPNMB"),
        TAMs = c("MERTK", "FOLR2", "SELENOP"),
        IFN_TAMs = c("CXCL10", "IFIT2"),
        Inflammatory_TIMs = c("IL1B", "CXCL8"),
        cMonocyte = c("S100A12", "CCR2", "CD14", "LYZ"),
        Monocyte = c("S100A8", "S100A9"),
        ncMonocyte = c("FCGR3A", "NR4A1", "CX3CR1"),
        DC1 = c("CD1C", "CADM1", "CLEC1B", "DNASE1L3"),
        DC2 = c("FCER1A", "CD1C", "FCER1A", "HLA-DRA", "HLA-DPB1", "HLA-DPA1"),
        preDC = c("FLT3", "IDO1", "CLEC9A"),  #myeloid DC
        Alveolar_Mac = c("MARCO", "TNFAIP2", "OLR1", "MCEMP1"),
        Interstitial_Mac = c("SELENOP", "SPARC", "LYVE1", "FABP5", "CXCL10"),
        plasmocytoid_DC = c("CLEC4C", "IRF7", "PTPRS", "TLR7", "TLR9", 
                            "GZMB", "LILRA4", "IRF8", "IDO1"),
        Mast_cells = c("TPSAB1", "KIT", "CPA3", "MS4A2", "IL1RL1"),
        Mast_cells1 = c("ASIC4", "C1RL", "HGF", "CDK15", "GRAP2", "CADPS", "C2CD5"),
        Basophils = c("CD123", "CD203c", "FCER1A", "IL-4", "IL-13", "MPO",
                            "KIT", "CD34", "CD45", "CD49d"),
        Neutrophils = c("CD66b", "CD16", "CD11b", "CD18", "MPO", "NE",
                        "CXCR1", "CXCR2", "IL-8", "S100A8"))

Immune_Lymphoid <- 
    list(CD4_cells = c("CD4", "IL7R", "IL21"),
        CD8_cells = c("CD8A", "CD8B", "GZMK", "GZMB", "PRF1"),
        NaÃ¯ve = c("CCR7", "LEF1", "SELL", "TCF7", "CD3", "CD62L", "CD197"),
        Cytotoxic = c("CST7", "GZMA", "GZMB", "IFNG", "PRF1", "TNFSF10"),
        T_reg = c("FOXP3", "IL2RA", "CTLA4", "CD25", "IL4R", "IL7", "TGFB1",
                "TGFB3", "TGFBR1", "CD4", "STAT5", "CD127", "IL12", "IL10"),
        Exhausted = c("PD1", "TOX", "TIGIT", "BTLA", "CTLA4", "HAVCR2", "LAG3",
                        "PDCD1", "TIGIT"),
        Prolif_T = c("MKI67", "CDK1", "CDK4", "TK1", "DIAPH3"),
        IFN_signature = c("CXCL10", "IFI44", "OAS1", "ISG15", "IFI44L", "IFGGB2"),
        Memory_B_cells = c("PAX5", "CD86", "ADAM28", "AIM2", "BANK1", "BLK",
                        "CD19", "CD37", "CD22", "CD79A", "MS4A1"),
        Plasma_B_Cells = c("DENND5B", "IGKC", "IGHM", "EAF2", "CD38"),
        B_cells_naive = c("CD19", "BACH2", "CD79A", "CD79B", "CR2", "IL4R", "IRF8",
                        "MICAL3", "RALGPS2", "RASGRP2", "SELL",  "SPIB", "CD74"),
        NK_cells = c("ITGAX", "KLRD1", "GNLY", "GZMB", "KLRF1", "KLRC1", "KLRC2",
                    "KLRC3", "KLRC4", "KLRD1", "KLRK1", "KLRL1", "KLRB1", "KLRD1", "NCAM1"))

Mesenchymal <- 
    list(Subpleural_fibroblasts = c("MFAP5", "COL6A3", "COL1A1", "PDGFRA", "MMP2",
                                "SPARC", "THY1", "FAP", "LOX", "TNC"),
        Smooth_muscle = c("ACTA2", "MYH11", "TAGLN", "CNN1", "DES", "MYLK",
                            "CALD1", "CAV1", "LMOD1", "SMTN"),
        Alveolar_fibroblasts = c("COL1A1", "COL3A1", "FN1", "PDGFRA", "VIM",
                                "TGFBR2", "MMP2", "CTGF", "SPARC", "THY1",
                                "SFTPC", "AQP5", "PDPN", "KRT5", "MMP2", "VIM"),
        Peribronchial_fibroblasts = c("MGP", "ELN", "FBLN1", "PDGFRA", "COL14A1",
                                    "LUM", "VCAN", "COL5A1", "DPT", "DCN"),
        Myofibroblasts = c("ACTA2", "TAGLN", "POSTN", "PDGFRA", "CNN1", "COL1A1",
                            "TGFBR1", "THY1", "FAP", "SERPINE1",
                            "FBLN1", "TAGLN", "ASPN", "MYLK", "WIF1", "ACTA2"),
        SM_activated_stress_response = c("HSPA1A", "DNAJB1", "HSPB1", "ATF3",
                            "HSPA6", "HSPE1", "DDIT3", "HSP90AA1", "HSPA8", "XBP1"),
        Pericytes = c("PDGFRB", "RGS5", "MCAM", "ACTA2", "CD146", "NG2", "NOTCH3",
                        "ANGPT2", "VEGFA", "CXCL12"),
        Osteoblast = c("RUNX2", "OSX", "ALPL", "COL1A1", "SOST", "BGLAP",
                                "IBSP", "SPP1", "WNT1"))

Epithelial_Endothelial <-
    list(Capillary_EC = c("CD31", "VEGFA", "VEGFR2", "CD34", "PLVAP", "CLDN5",
                    "ESM1", "ICAM1", "ANGPT2", "ADGRL4"),
        Arterial_EC = c("KDR", "NOTCH1", "CD34", "VEGFA",
                        "ICAM1", "EGR1", "CAV1", "ANGPT1", "CD146"),
        Venous_EC = c("VWF", "NRP1", "EphB4", "CD31", "ICAM1",
                    "ADGRL4", "TIE2", "KDR", "VEGFR2"),
        Lymphatic_EC = c("LYVE1", "PROX1", "VEGFR3", "MRC1", "FLT4",
                        "LYVE1", "FSTL1", "CCL21"),
        AlvEpithelial_T1 = c("ICAM1", "SEMA3B", "SCNN1B", "SEMA3E", "CLIC5",
                    "GPRC5A", "CLDN18", "AGER", "EMP2", "VEGFA", "KRT7", "PDPN"),
         AlvEpithelial_T2 = c("NKX2-1", "MUC1", "SFTPB", "SLC34A2", "LAMP3",
                            "ADGRF5", "ABCD3", "LPCAT1", "NAPSA", "ABCA3", "CXCL2"),
         Bronchial_Epithelial = c("CK14", "CK5", "CK7", "MUC5AC", "MUC5B",
                                    "TP63", "FOXJ1", "KRT19", "SCGB1A1", "CCSP"),
         Club_Cells = c("SCGB1A1", "CCSP", "MUC5B", "TP63", "KRT19", "SFTPA1", "MMP7",
                            "ABCA3", "MUC1", "GSTA1"),
         Ciliated_Cells = c("FOXJ1", "DNAI1", "DNAI2", "TP63", "KRT5", "KRT13",
                            "MUC5AC", "RSPH1", "RSPH9", "TUBA1A", "CCDC17", "CCDC39", "CCDC181"),
        Tuft_Cells = c("TRPM5", "DCLK1", "CLCA1", "TFF3"))

clusterbased_annot <- function(s_obj) {
    Idents(s_obj) <- s_obj$seurat_clusters
    clust_info <- tibble()
    for (cluster in unique(s_obj$seurat_clusters)) {
        subset_object <- subset(s_obj, ident = cluster) %>%
            FindVariableFeatures() %>%
            ScaleData() %>%
            # don't ask for more PCs than there are cells
            RunPCA(npcs = min(50,
                            sum(s_obj$seurat_clusters == cluster) - 1))

        if (length(unique(subset_object$sample_name)) > 1 &&
            ncol(subset_object) > 50) {
            subset_object <- RunHarmony(subset_object,
                                        group.by.vars = "sample_name") %>%
                process_seurat(reduction = "harmony")
        } else {
            subset_object <- subset_object
        }

        subset_object$re_cluster <- str_c(cluster,
                                        ".",
                                        subset_object$seurat_clusters)

        clust_info <- subset_object@meta.data %>%
                as.data.frame() %>%
                select(re_cluster) %>%
                rbind(clust_info)
    }

    s_obj <- AddMetaData(s_obj, metadata = clust_info)
    s_obj$new_annot_clust <- s_obj$re_cluster

    cluster_celltypes <-
        table(s_obj$re_cluster, s_obj$annotations) %>%
        as.data.frame() %>%
        group_by(Var1) %>%
        arrange(desc(Freq), .by_group = TRUE) %>%
        slice_head(n = 1)

    for (i in seq_len(nrow(cluster_celltypes))) {
        seurat_clust <- str_c("^", cluster_celltypes$Var1[i], "$") %>%
            as.character()

        celltype <- cluster_celltypes$Var2[i] %>%
            as.character()

        s_obj$new_annot_clust <-
            str_replace_all(string = s_obj$new_annot_clust,
                            pattern = seurat_clust,
                            replacement = celltype)
    }
    return(s_obj)
}

object_list <-
    tribble(~group,                         ~res_value,
            "patient_prim_normal_cells",    0.1,
            "patient_mets_normal_cells",    0.1,
            "xeno_prim_mouse",              0.1,
            "xeno_mets_mouse",              0.1,
            "mm_prim_normal_cells",         0.25,
            "mm_mets_normal_cells",         0.2)


for (item in seq_len(nrow(object_list))) {
    group <- object_list$group[item]
    res_value <- object_list$res_value[item]

    object <- qs::qread(str_c("output/seurat_objects/tumor_vs_stroma/",
                              group,
                              ".qs"))
    species <- object$organism[1]

    object$Ann_level1 <-
        str_replace_all(object$Ann_level1,
                        c("Endothelial_cells" = "Epithelial_Endothelial",
                          "Epithelial_cells" = "Epithelial_Endothelial",
                          "Stroma" = "Mesenchymal"))

    for (cell_type in unique(object$Ann_level1)) {
        s_obj <-
            object %>%
            subset(Ann_level1 == cell_type) %>%
            process_seurat() %>%
            RunHarmony(group.by.vars = "model") %>%
            process_seurat(reduction = "harmony")

        sil_val <-
            optimize_silhouette(sobject = s_obj,
                                test_res = seq(0.05, 0.9, by = 0.05),
                                summary_plot = FALSE,
                                reduction = "harmony") %>%
            filter(!is.na(sil_vals)) %>%
            filter(sil_vals == max(sil_vals)) %>%
            slice_head(n=1) %>%
            dplyr::pull(res_vals)

        s_obj <- 
            FindClusters(s_obj,
                        resolution = sil_val)

        dimplot_seurat <-
            dimplot_better(s_obj,
                          group_by = "seurat_clusters") +
                ggtitle(str_c("Res=", sil_val)) +
                NoLegend()

        s_obj <- clusterbased_annot(s_obj)

        dimplot_celltype <-
            dimplot_better(s_obj,
                          group_by = "new_annot_clust") +
                ggtitle(str_c("new_annot_clust")) +
                NoLegend()

        if ("scATOMIC_pred" %in% colnames(s_obj@meta.data)) {
            scAtomic_call <-
                dimplot_better(s_obj,
                            group_by = "scATOMIC_pred") +
                    ggtitle(str_c("SCATOMIC_celltype")) +
                    NoLegend()
        } else {
            scAtomic_call <- 
                ggplot(data = NULL) +
                    aes(x = as.factor(1), y = as.factor(1)) +
                    geom_text(aes(label = str_c("scatomic_tumor_call not present for ", group)))
        }

        if ("CNV_status" %in% colnames(s_obj@meta.data)){
            dimplot_CNV <-
                dimplot_better(s_obj,
                            group_by = "CNV_status") +
                    NoLegend() +
                    theme(plot.title = element_text(size = 7))
        } else {
            dimplot_CNV <- 
                ggplot(data = NULL) +
                    aes(x = as.factor(1), y = as.factor(1)) +
                    geom_text(aes(label = str_c("scatomic_tumor_call not present for ", group)))
        }
        dimplot_sample <-
            dimplot_better(s_obj,
                          group_by = "sample_name") +
                ggtitle(str_c("sample_name")) +
                NoLegend()

        entire_matrix <- s_obj@assays$RNA$counts

        big_featureplot_list <- list()

        for (module in names(get(cell_type))) {
            genelist <- get(cell_type)[[module]]
            if(species == "mouse") {
                genelist <- 
                    nichenetr::convert_human_to_mouse_symbols(genelist) %>%
                    na.omit() %>%
                    unique()
            }
            cell_ranks <-
                AUCell::AUCell_run(exprMat = entire_matrix,
                                geneSets = genelist)

            s_obj[[module]] <- AUCell::getAUC(cell_ranks)[1,]

            feature_plot <-
                    FeaturePlot(s_obj,
                                module,
                                cols = c("#EEEEEE", "#ae0600"),
                                min.cutoff = 0.15,
                                pt.size = 1,
                                order = TRUE) +
                        coord_fixed() +
                        ggtitle(module)

            big_featureplot_list[[module]] <- feature_plot
        }
    }
    big_panel_plot <- 
        cowplot::plot_grid(dimplot_seurat,
                            dimplot_celltype,
                            scAtomic_call,
                            dimplot_CNV,
                            dimplot_sample,
                            plotlist = big_featureplot_list,
                            ncol = 2)

    #calculate height and length
    length_var <- 
        if (length(big_featureplot_list) %% 2 == 1) {
            length(big_featureplot_list) + 1
        } else {
            length(big_featureplot_list)
        }

    height <- (length_var/2 * 7) + 14

    ggsave(filename = str_c("output/figures/relustering_normals/",
                            group,
                            "/",
                            cell_type,
                            "_group_plots.png"),
            plot = big_panel_plot,
            width = 16,
            height = height,
            limitsize = FALSE,
            bg = "white")
}










for (module in names(my_new_list)) {
            genelist <- 
                nichenetr::convert_human_to_mouse_symbols(my_new_list[[module]]) %>%
                na.omit() %>%
                unique()
        cell_ranks <-
            AUCell::AUCell_run(exprMat = entire_matrix,
                            geneSets = genelist)
        object[[module]] <- AUCell::getAUC(cell_ranks)[1,]

        feature_plot <-
                FeaturePlot(object,
                            module,
                            cols = c("#EEEEEE", "#ae0600"),
                            min.cutoff = 0.15,
                            pt.size = 1,
                            order = TRUE) +
                    coord_fixed() +
                    ggtitle(paste0(module))

        big_featureplot_list[[module]] <- feature_plot
}






dimplot_better(xy, group_by = c("new_annot_clust")) + NoLegend()
FeaturePlot(s_obj, features= unique_capillary_markers, ncol=6)

entire_matrix <- s_obj@assays$RNA$counts
big_featureplot_list <- list()

for (module in names(Epi_Endo_cells)) {

    genelist <- Epi_Endo_cells[[module]]

    cell_ranks <-
        AUCell::AUCell_run(exprMat = entire_matrix,
                        geneSets = genelist)
    s_obj[[module]] <- AUCell::getAUC(cell_ranks)[1,]

    feature_plot <-
            FeaturePlot(s_obj,
                        module,
                        cols = c("#EEEEEE", "#ae0600"),
                        min.cutoff = 0.15,
                        pt.size = 1,
                        order = TRUE) +
                coord_fixed() +
                ggtitle(module)

    big_featureplot_list[[module]] <- feature_plot
}

#tested resolution 0.8 looked good
set.seed(123444)
s_obj <-
    FindClusters(s_obj,
                resolution = 0.8)

s_obj$Ann_level3 <-
    str_replace_all(s_obj$seurat_clusters,
        c('^0$' = "TAMs",
        '^1$' = "Interstitial_Mac",
        '^2$' = "LA_TAMs",
        '^3$' = "TAMs",
        '^4$' = "TAMs",
        '^5$' = "Prolif_TAMs",
        '^6$' = "TAMs",
        '^7$' = "Inflammatory",
        '^8$' = "Osteoclast_TAMs",
        '^9$' = "DC",
        '^10$' = "IFN_TAMs",
        '^11$' = "Alveolar_Mac",
        '^12$' = "Mast1",
        '^13$' = "TAMs",
        '^14$' = "TAMs",
        '^15$' = "Prolif_TAMs",
        '^16$' = "Monocyte",
        '^17$' = "Interstitial_Mac",
        '^18$' = "TAMs",
        '^19$' = "Mast2",
        '^20$' = "PreDC",
        '^21$' = "Scar_TAMs",
        '^22$' = "Plasmocytoid_DC"))

sc_dimplot <- 
    dimplot_better(s_obj,
                  group_by = "seurat_clusters")

dimplot_main <-
    dimplot_better(s_obj,
                    group_by = "Ann_level3") + NoLegend()
ggsave(filename = str_c("output/figures/relustering_normals/patient_mets_cancer_cells/final_macs.png"),
        plot = dimplot_main,
        width = 10,
        height = 10,
        limitsize = FALSE)

big_panel_plot <- 
    cowplot::plot_grid(sc_dimplot,
                        dimplot_main,
                        plotlist = big_featureplot_list,
                        ncol = 2)
#calcuate height based of the number of features
length_var <- 
    if (length(big_featureplot_list) %% 2 == 1) {
        length(big_featureplot_list) + 1
    } else {
        length(big_featureplot_list)
    }

height <- (length_var/2 * 7) + 7

ggsave(filename = str_c("output/figures/relustering_normals/patient_mets_normal_cells/endo_epi_big_featureplot.png"),
        plot = big_panel_plot,
        width = 14,
        height = height,
        limitsize = FALSE)

combined_obj <-
    merge(remaining_sobj, s_obj) %>%
    JoinLayers() %>%
    process_seurat() %>%
    RunHarmony(group.by.vars = c("sample_name", "method", "data_source")) %>%
    process_seurat(reduction = "harmony")

combined_obj$Ann_level0 <- "Host"

dimplot_better(combined_obj, group_by = "Ann_level0") + NoLegend()

cancer_cells <- 
    qs::qread("output/seurat_objects/tumor_vs_stroma/patient_mets_cancer_cells.qs") %>%
    FindClusters(resolution = 0.05)

cancer_cells$Ann_level0 <- "Tumor"
cancer_cells$Ann_level1 <- "Tumor"


dimplot_better(cancer_cells, group_by = "seurat_clusters") + NoLegend()

cancer_cells$Ann_level3 <-
    str_replace_all(cancer_cells$seurat_clusters,
                    c("0" = "Growth and Metabolism",
                        "1" = "Inflammatory/Interractive",
                        "2" = "Basal/Quiescent",
                        "3" = "Basal/Quiescent",
                        "4" = "Immune Regulatory",
                        "5" = "Matrix Producing"))

dimplot_better(cancer_cells, group_by = "Ann_level3") + NoLegend()

cancer_cells$Ann_level2 <- cancer_cells$Ann_level3

big_obj <-
    merge(combined_obj, cancer_cells) %>%
    JoinLayers() %>%
    process_seurat() %>%
    RunHarmony(group.by.vars = c("sample_name", "method", "data_source"),
                theta = c(7, 7, 7),
                lambda = c(0.5, 0.5, 0.5)) %>%
    process_seurat(reduction = "harmony")

Dimplot1 <- 
    dimplot_better(big_obj, group_by = "Ann_level0") 

Dimplot2 <-
    dimplot_better(big_obj, group_by = "Ann_level1") 

Dimplot3 <- 
    dimplot_better(big_obj, group_by = "Ann_level2")

Dimplot4 <- 
    dimplot_better(big_obj, group_by = "Ann_level3")

all_plots <- 
    patchwork::wrap_plots(Dimplot1, Dimplot2, Dimplot3, Dimplot4) +
    patchwork::plot_annotation(title = "Patient Metastatic")

ggsave(filename = str_c("output/figures/relustering_normals/patient_mets_final_plots.png"),
        plot = all_plots,
        width = 40,
        height = 30,
        limitsize = FALSE)

clusterbased_annot <- function(s_obj) {
    Idents(s_obj) <- s_obj$seurat_clusters
    clust_info <- tibble()
    for (cluster in unique(s_obj$seurat_clusters)) {
        subset_object <- subset(s_obj, ident = cluster) %>%
            FindVariableFeatures() %>%
            ScaleData() %>%
            # don't ask for more PCs than there are cells
            RunPCA(npcs = min(50,
                            sum(s_obj$seurat_clusters == cluster) - 1))

        if (length(unique(subset_object$sample_name)) > 1 &&
            ncol(subset_object) > 50) {
            subset_object <- RunHarmony(subset_object,
                                        group.by.vars = "sample_name") %>%
                process_seurat(reduction = "harmony")
        } else {
            subset_object <- subset_object
        }

        subset_object$re_cluster <- str_c(cluster,
                                        ".",
                                        subset_object$seurat_clusters)

        clust_info <- subset_object@meta.data %>%
                as.data.frame() %>%
                select(re_cluster) %>%
                rbind(clust_info)
    }

    s_obj <- AddMetaData(s_obj, metadata = clust_info)
    s_obj$new_annot_clust <- s_obj$re_cluster

    cluster_celltypes <-
        table(s_obj$re_cluster, s_obj$annotations) %>%
        as.data.frame() %>%
        group_by(Var1) %>%
        arrange(desc(Freq), .by_group = TRUE) %>%
        slice_head(n = 1)

    for (i in seq_len(nrow(cluster_celltypes))) {
        seurat_clust <- str_c("^", cluster_celltypes$Var1[i], "$") %>%
            as.character()

        celltype <- cluster_celltypes$Var2[i] %>%
            as.character()

        s_obj$new_annot_clust <-
            str_replace_all(string = s_obj$new_annot_clust,
                            pattern = seurat_clust,
                            replacement = celltype)
    }
    return(s_obj)
}

s_objxyz <- clusterbased_annot(xyz)
dimplot_better(s_objxyz, group_by = "new_annot_clust") + NoLegend()
```


# testing Aucell for the TIMs and TAMs
```{r AUcell_feature_plot, include=FALSE}

excel <-
    readxl::read_excel("/gpfs0/home2/gdrobertslab/lab/Analysis/Yogesh/Finalmacrophage_and_monocyte_subsets.xlsx")

mac_marks <- excel %>%
        filter(Species == "Human") %>%
        select(Annotation, ID) %>%
        group_by(Annotation) %>%
        nest() %>%
        as.list()

names(mac_marks$data) <- mac_marks$Annotation
mac_marks <- mac_marks$data

my_new_list <- mac_marks %>%
    set_names(str_replace_all(names(mac_marks),
                            c(" " = "_",
                              "-" = "_",
                              "/" = "_",
                              "\\+" = "_plus")))


entire_matrix <- GetAssayData(s_obj, layer="counts")

big_featureplot_list<-list()
for (module in names(my_new_list)) {
            genelist <- my_new_list[[module]]
                # nichenetr::convert_human_to_mouse_symbols(my_new_list[[module]]) %>%
                # na.omit() %>%
                # unique()
        cell_ranks <-
            AUCell::AUCell_run(exprMat = entire_matrix,
                            geneSets = genelist)
        s_obj[[module]] <- AUCell::getAUC(cell_ranks)[1,]

        feature_plot <-
                FeaturePlot(s_obj,
                            module,
                            cols = c("#EEEEEE", "#ae0600"),
                            min.cutoff = 0.15,
                            pt.size = 1,
                            order = TRUE) +
                    coord_fixed() +
                    ggtitle(paste0(module))

        big_featureplot_list[[module]] <- feature_plot
}

cowplot::plot_grid(plotlist = big_featureplot_list,
                            ncol = 5)





```


## Human Patient Primary
```{r human_reanalysis_primary, include=FALSE}

my_new_list <- list(LA_TAMs = c("APOC1", "APOE", "APC5", "FABP5"),
                    Inflam_TAMs = c("IL1B", "CCL3", "CXCL1", "CXCL2", "CXCL3", "CXCL5"),
                    IFN_TAMs = c("IDO", "ISG15", "CXCL8", "CXCL9", "CXCL10"),
                    Reg_TAMs = c("AGR1", "MRC1", "CD274", "CX3CR1"),
                    Prolif_TAMs = c("MKI67", "CDK1"),
                    RTM_TAMs = c("LYVE1", "HES1", "FOLR2"),
                    Angio_TAMs = c("VEGFA", "ANGPT2", "ANGPTL4", "SSP1"),
                    Osteoclast_TAMs = c("MMP9", "CTSK", "CKB", "CST3"),
                    Scar_Macs = c("CD9", "SPP1", "TREM2", "GPNMB"),
                    TAMs = c("MERTK", "FOLR2", "SELENOP"),
                    IFN_TAMs = c("CXCL10", "IFIT2"),
                    Inflammatory_TIMs = c("IL1B", "CXCL8"),
                    cMonocyte = c("S100A12", "CCR2", "CD14", "LYZ"),
                    Monocyte = c("S100A8", "S100A9"),
                    ncMonocyte = c("FCGR3A", "NR4A1", "CX3CR1"),
                    DC1 = c("CD1C"),
                    DC2 = c("FCER1A", "CD1C", "FCER1A", "HLA-DRA", "HLA-DPB1", "HLA-DPA1"),
                    preDC = c("FLT3", "IDO1", "CLEC9A"),  #myeloid DC
                    plasmocytoid_DC = c("CLEC4C", "IRF7", "PTPRS", "TLR7", "TLR9", 
                                        "GZMB", "LILRA4", "IRF8", "IDO1"),
                    Mast_cells = c("TPSAB1", "KIT", "CPA3", "MS4A2", "IL1RL1"),
                    Mast_cells1 = c("ASIC4", "C1RL", "HGF", "CDK15", "GRAP2", "CADPS", "C2CD5"))

obj <- 
    qs::qread("output/seurat_objects/tumor_vs_stroma/patient_prim_normal_cells.qs")

dimplot_better(obj, group_by = "Ann_level1") + NoLegend()


s_obj <-
    obj %>%
    subset(Ann_level1 == "Immune_Myeloid") %>%
    process_seurat() %>%
    RunHarmony(group.by.vars = "sample_name") %>%
    process_seurat(reduction = "harmony")

remaining_sobj <-
    obj %>%
    subset(Ann_level1 != "Immune_Myeloid")

entire_matrix <- s_obj@assays$RNA$counts
big_featureplot_list <- list()

for (module in names(my_new_list)) {

    genelist <- my_new_list[[module]]

    cell_ranks <-
        AUCell::AUCell_run(exprMat = entire_matrix,
                        geneSets = genelist)
    s_obj[[module]] <- AUCell::getAUC(cell_ranks)[1,]

    feature_plot <-
            FeaturePlot(s_obj,
                        module,
                        cols = c("#EEEEEE", "#ae0600"),
                        min.cutoff = 0.15,
                        pt.size = 1,
                        order = TRUE) +
                coord_fixed() +
                ggtitle(module)

    big_featureplot_list[[module]] <- feature_plot
}
s_obj <-
    FindClusters(s_obj,
                resolution = 0.8)
sc_dimplot <- 
    dimplot_better(s_obj,
                  group_by = "seurat_clusters")
dimplot_main <-
        dimplot_better(s_obj,
                      group_by = "Ann_level3")
big_panel_plot <- 
    cowplot::plot_grid(sc_dimplot,
                        dimplot_main,
                        plotlist = big_featureplot_list,
                        ncol = 2)
#calcuate height based of the number of features
length_var <- 
    if (length(big_featureplot_list) %% 2 == 1) {
        length(big_featureplot_list) + 1
    } else {
        length(big_featureplot_list)
    }

height <- (length_var/2 * 7) + 7

ggsave(filename = str_c("output/figures/relustering_normals/patient_prim_cancer_cells/macs_big_featureplot.png"),
        plot = big_panel_plot,
        width = 14,
        height = height,
        limitsize = FALSE)

s_obj <-
    FindClusters(s_obj,
                resolution = 0.8)
s_obj$Ann_level3 <-
    str_replace_all(s_obj$seurat_clusters,
        c("^0$" = "Inflammatory",
        "^1$" = "Osteoclast_TAMs",
        "^2$" = "TAMs",
        "^3$" = "TAMs",
        "^4$" = "Prolif_TAMs",
        "^5$" = "Inflammatory",
        "^6$" = "Monocyte",
        "^7$" = "DC",
        "^8$" = "IFN_TAMs",
        "^9$" = "TAMs",
        "^10$" = "Osteoclast_TAMs",
        "^11$" = "TIMs",
        "^12$" = "TAMs",
        "^13$" = "TAMs",
        "^14$" = "Mast",
        "^15$" = "Plasmocytoid_DC"))


final_macs <-
        dimplot_better(s_obj,
                      group_by = "Ann_level3")

ggsave(filename = str_c("output/figures/relustering_normals/patient_prim_cancer_cells/final_macs.png"),
        plot = final_macs,
        width = 10,
        height = 10,
        limitsize = FALSE)

merged_sobj <-
    merge(remaining_sobj, s_obj) %>%
    JoinLayers() %>%
    process_seurat() %>%
    RunHarmony(group.by.vars = "sample_name") %>%
    process_seurat(reduction = "harmony")

merged_sobj$Ann_level0 <- "Host"

dimplot_better(merged_sobj, group_by = "Ann_level3") + NoLegend()

cancer_obj <-
    qs::qread("output/seurat_objects/tumor_vs_stroma/patient_prim_cancer_cells.qs") %>%
    FindClusters(resolution = 0.1)

cancer_obj$Ann_level0 <- "Tumor"
cancer_obj$Ann_level1 <- "Tumor"


dimplot_better(cancer_obj, group_by = "seurat_clusters") + NoLegend()

cancer_obj$Ann_level3 <-
    str_replace_all(cancer_obj$seurat_clusters,
                    c("0" = "Growth-Metabolism and Recovery",
                        "1" = "Matrix Producing",
                        "2" = "Growth-Actively Cycling",
                        "3" = "Inflammatory/Interractive",
                        "4" = "Basal/Quiescent",
                        "5" = "Immune Regulatory",
                        "6" = "Basal/Quiescent",
                        "7" = "Basal/Quiescent"))
cancer_obj$Ann_level2<- cancer_obj$Ann_level3
dimplot_better(cancer_obj, group_by = "Ann_level3") + NoLegend()

big_obj <-
    merge(merged_sobj, cancer_obj) %>%
    JoinLayers() %>%
    process_seurat() %>%
    RunHarmony(group.by.vars = c("sample_name",
                                          "method",
                                          "data_source"),
                theta = c(5, 5, 5),
                lambda = c(0.5, 0.5, 0.5)) %>%
    process_seurat(reduction = "harmony")

big_obj$Ann_level0 <-
    str_replace_all(big_obj$celltype_tumor_call,
                    c("normal_cells" = "Host",
                      "cancer_cells" = "Tumor"))

dimplot_whole <-
    dimplot_better(big_obj, group_by = "Ann_level3") + NoLegend()

Dimplot1 <- 
    dimplot_better(big_obj, group_by = "Ann_level0") 

Dimplot2 <-
    dimplot_better(big_obj, group_by = "Ann_level1") 

Dimplot3 <- 
    dimplot_better(big_obj, group_by = "Ann_level2")

Dimplot4 <- 
    dimplot_better(big_obj, group_by = "Ann_level3")

all_plots <- 
    patchwork::wrap_plots(Dimplot1, Dimplot2, Dimplot3, Dimplot4) +
    patchwork::plot_annotation(title = "Patient Primary")

ggsave(filename = str_c("output/figures/relustering_normals/patient_prim_final_plots.png"),
        plot = all_plots,
        width = 20,
        height = 16,
        limitsize = FALSE)


new_big <- big_obj

new_big <- 
    clusterbased_annot(new_big)

ggsave(filename = str_c("output/figures/relustering_normals/patient_prim_cancer_cells/final_combine.png"),
        plot = dimplot_whole,
        width = 10,
        height = 10,
        limitsize = FALSE)
```

```{r mouse_reanalysis, include=FALSE}
#mouse lung ref
mouse_lung_ref_new <- qs::qread("input/downloads/normal_mouselung.qs")
mouse_lung_ref_new$CellType <-
            str_replace_all(mouse_lung_ref_new$free_annotation,
                            c("/" = "_",
                              "\\+" = "_plus",
                              "-" = "_",
                              " " = "_"))
Idents(mouse_lung_ref_new) <- mouse_lung_ref_new$CellType

mouse_lung_subset <-
    mouse_lung_ref_new %>%
    subset(ident = c("Alveolar_Macrophage",
                         "Ccr7_plus_Dendritic",
                         "Classical_Monocyte",
                         "Intermediate_Monocyte",
                         "Interstitial_Macrophage",
                         "Myeloid_Dendritic_Type_1",
                         "Myeloid_Dendritic_Type_2",
                         "Nonclassical_Monocyte",
                         "Plasmacytoid_Dendritic",
                         "Proliferating_Alveolar_Macrophage",
                         "Proliferating_Classical_Monocyte",
                         "Proliferating_Dendritic",
                         "Neutrophil",
                         "Basophil"))

mouse_lung_subset$CellType <-
    str_replace_all(mouse_lung_subset$CellType,
                    c("^Myeloid_Dendritic_Type_1" = "Myeloid_Dendritic",
                     "^Myeloid_Dendritic_Type_2$" = "Myeloid_Dendritic"))

#load the another reference mouse macrophages
murine_macs <- 
    qs::qread("input/downloads/murine_macrophages.qs")

murine_macs$CellType <-
    str_replace_all(murine_macs$macs_assignment,
                    c("^scarMac$" = "Scar_Macrophages",
                      "^IFN-TAM$" = "TumorAssociated_Macrophages",
                      "^TAM$" = "TumorAssociated_Macrophages",
                      "^cMonocyte$" = "Classical_Monocyte",
                      "^ncMonocyte$" = "Nonclassical_Monocyte",
                      "^Interstitial$" = "Interstitial_Macrophage",
                      "^Pre-DC$" = "Myeloid_Dendritic",
                      "^DC1$" = "Dendritic_cells1",
                      "^Cycling$" = "Proliferating_Dendritic"))


object_list <-
    tribble(~group,                         ~res_value,
            "patient_prim_normal_cells",    0.1,
            "patient_mets_normal_cells",    0.1,
            "xeno_prim_mouse",              0.1,
            "xeno_mets_mouse",              0.1,
            "mm_prim_normal_cells",         0.25,
            "mm_mets_normal_cells",         0.2)


for (item in seq_len(nrow(object_list))) {
    group <- object_list$group[item]
    res_value <- object_list$res_value[item]

    obj <- qs::qread(str_c("output/seurat_objects/tumor_vs_stroma/",
                              group,
                              ".qs"))

    dimplot_main <-
        dimplot_better(obj,
                      group_by = c("Ann_level3")) +
            ggtitle(group) +
            NoLegend()
        
    sobj <-
        obj %>%
        subset(Ann_level1 == "Immune_Myeloid") %>%
        process_seurat() %>%
        RunHarmony(group.by.vars = "model") %>%
        process_seurat(reduction = "harmony")


```

## Validation of clustering and harmony
Testing the clustering and harmony of the data using the heatmap for each 
sample.
```{r, validation_clustering, include=FALSE}

object_list <-
    tribble(~group,                         ~res_value,
            "patient_prim_cancer_cells",    0.1,
            "patient_mets_cancer_cells",    0.1)

for (i in seq_len(nrow(object_list))) {
    all_sample <- 
        qs::qread(str_c("output/seurat_objects/tumor_vs_stroma/",
                        object_list$group[i],
                        ".qs")) %>%
        FindClusters(resolution = object_list$res_value[i])

    all_sample <- all_sample %>%
        FindVariableFeatures(nfeatures = 5000) %>%
        ScaleData()
    
    dimplot_main <-
        dimplot_better(all_sample,
                      group_by = c("seurat_clusters")) +
            ggtitle("whole_dimplot") 

    aver_exp2 <- AverageExpression(all_sample,
                        layer = "scale.data",
                        group.by = "seurat_clusters")$RNA %>%
        as.data.frame() %>%
        tibble::rownames_to_column(var = "gene")
    
    combined_corr <- tibble::tibble()

    for (samples in unique(all_sample$sample_name)) {
        if (ncol(subset(all_sample, sample_name == samples)) < 1000) {
            next
        }
        one_sample <-
            subset(all_sample,
                sample_name == samples) %>%
                process_seurat()

        one_sample <- one_sample %>%
            ScaleData(features = VariableFeatures(all_sample))

        sil_val <-
            optimize_silhouette(sobject = one_sample,
                                test_res = seq(0.05, 0.9, by = 0.05),
                                summary_plot = FALSE,
                                reduction = "harmony") %>%
            filter(!is.na(sil_vals)) %>%
            filter(sil_vals == max(sil_vals)) %>%
            slice_head(n=1) %>%
            dplyr::pull(res_vals)

        one_sample <- 
            FindClusters(one_sample,
                        resolution = sil_val)
        
        dimplot_subset <-
            dimplot_better(one_sample,
                        group_by = c("seurat_clusters")) +
                ggtitle(samples)

        aver_exp1 <- AverageExpression(one_sample,
                                    layer = "scale.data",
                                    group.by = "seurat_clusters")$RNA %>%
                    as.data.frame() %>%
                    rename_with(~str_replace(., "g", "clust")) %>%
                    tibble::rownames_to_column(var = "gene")

        combine_exp <- 
            left_join(aver_exp1, aver_exp2, by = "gene") %>%
            column_to_rownames(var = "gene")

        correlation <- tibble::tibble()
        for (clusters in colnames(aver_exp1)[-1]) {
            for (cluster_names in colnames(aver_exp2)[-1]) {
                correlation_calc <-
                    cor(combine_exp[[clusters]],
                    combine_exp[[cluster_names]])
                #append the correlations
                correlation <- 
                    tibble::tibble(corr_val = correlation_calc) %>%
                    mutate(small_cluster = str_c(samples, "_", clusters),
                        big_cluster = str_c("whole_", cluster_names)) %>%
                    rbind(correlation)
            }
        }
        #make a combined heatmap
        combined_corr <- correlation %>%
            group_by(small_cluster) %>%
            slice_max(corr_val) %>%
            rbind(combined_corr)
            

        #make individual heatmaps
        correlation <-
            correlation %>%
            pivot_wider(names_from = big_cluster,
                        values_from = corr_val) %>%
            column_to_rownames(var = "small_cluster") %>%
            pheatmap::pheatmap(display_numbers = TRUE,
                                cluster_cols = FALSE,
                                cluster_rows = FALSE,
                                fontsize = 8,
                                fontsize_number = 8,
                                fontsize_row = 8,
                                fontsize_col = 8,
                                breaks = c(-1, -0.5, -0.1, 0.1, 0.5, 1),
                                silent = TRUE,
                                color = rev(RColorBrewer::brewer.pal(5, name = "PiYG")))
        
        combine_plot <-
            cowplot::plot_grid(dimplot_main,
                                dimplot_subset,
                                ggplotify::as.ggplot(correlation),
                                ncol = 1)

        ggsave(str_c("output/figures/validation/integration_validation/",
                    object_list$group[i],
                    "/",
                    samples,
                    "_",
                    object_list$group[i],
                    ".png"),
            plot = combine_plot,
            width = 10,
            height = 30,
            bg = "white")
    }
    combined_corr_plot <-
        combined_corr %>%
        mutate(cluster = str_remove(small_cluster, ".+_"),
                sample_name = str_remove(small_cluster, "_clust.+")) %>%
        ggplot(aes(x = cluster,
                    y = sample_name,
                    fill = corr_val)) +
        geom_tile() +
        geom_text(aes(label = str_c(big_cluster, "=", round(corr_val, 2))),
                size = 3) +
        theme(axis.text.x = element_text(angle = 0, size = 20),
              axis.text.y = element_text(angle = 0, size = 20)) +
        scale_fill_gradient2(low = "blue", mid = "white", high = "red") +
        theme_bw()

    ggsave(str_c("output/figures/validation/integration_validation/",
                object_list$group[i],
                "/",
                "All_combined_heatmap.png"),
        plot = combined_corr_plot,
        width = 12,
        height = 10,
        bg = "white")
}


```


## Tumor subpopulations in different groups
Testing the clustering and harmony of the data using the heatmap for each 
sample.
```{r, validation_clustering, include=FALSE}

object_list <-
    tribble(~group,                         ~res_value,
            "patient_prim_cancer_cells",    0.1,
            "patient_mets_cancer_cells",    0.1,
            "mm_prim_cancer_cells",         0.3,
            "mm_mets_cancer_cells",         0.3,
            "xeno_prim_human",              0.15,
            "xeno_mets_human",              0.1)


combined_AveExp <- tibble::tibble(gene = character())
for (i in seq_len(nrow(object_list))) {
    group <- object_list$group[i]
    all_sample <- 
        qs::qread(str_c("output/seurat_objects/tumor_vs_stroma/",
                        object_list$group[i],
                        ".qs")) 

    
    all_sample <- all_sample %>%
        FindVariableFeatures(nfeatures = 5000) %>%
        ScaleData()


    dimplot_main <-
        dimplot_better(all_sample,
                      group_by = c("seurat_clusters")) +
            ggtitle("whole_dimplot") 

    all_sample$aver_col <- "whole"
    ave_expression <-
        RowMeans(all_sample,
                        layer = "scale.data")$RNA %>%
                as.data.frame() %>%
                rename(!!group := "V1") %>%
                tibble::rownames_to_column(var = "gene")

    if (all_sample$organism[[1]] == "mouse") {
        ave_expression$gene <-
            nichenetr::convert_mouse_to_human_symbols(ave_expression$gene)
        ave_expression <- 
            ave_expression %>%
            filter(!is.na(gene)) %>%
            distinct(gene, .keep_all = TRUE)
    }
    combined_AveExp <- combined_AveExp %>%
            full_join(ave_expression, by = "gene")
}


# Remove NA values from all columns
combined_AveExp_plot <- combined_AveExp %>%
    na.omit() %>%
    distinct(gene, .keep_all = TRUE) %>%
    column_to_rownames(var = "gene")

# Perform correlation analysis for each group and generate scatterplots
correlation_plots <- list()

for (i in seq_len(ncol(combined_AveExp_plot))) {
    for (j in seq_len(ncol(combined_AveExp_plot))) {
        if (i < j) {
            group1 <- colnames(combined_AveExp_plot)[i]
            group2 <- colnames(combined_AveExp_plot)[j]
            
            correlation_value <- cor(combined_AveExp_plot[[group1]], combined_AveExp_plot[[group2]])
            
            scatter_plot <- ggplot(combined_AveExp_plot, aes_string(x = group1, y = group2)) +
                geom_point(alpha = 0.5, size = 1) +
                geom_smooth(method = "lm", color = "blue", se = FALSE) +
                ggtitle(paste0("Correlation: ", round(correlation_value, 2))) +
                theme_minimal()
            
            correlation_plots[[paste0(group1, "_vs_", group2)]] <- scatter_plot
        }
    }
}

# Combine all scatter plots into a single plot
combined_scatter_plot <- cowplot::plot_grid(plotlist = correlation_plots, ncol = 4)

# Save the combined scatter plot
ggsave(filename = "output/figures/validation/correlation_scatter_plots.png",
       plot = combined_scatter_plot,
       width = 21,
       height = 14,
       limitsize = FALSE,
       bg = "white")
 
```

