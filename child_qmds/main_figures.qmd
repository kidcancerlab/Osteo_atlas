
In this qmd, i will just make the main result figures and stash_plot save them

## Result 1 figures
```{r figure_stroma_panel, echo = FALSE}
#| cache.vars = 'title_replacement'
#plots for stromal panel
sobj_list <-  list()
cell_count_table <- tibble::tibble(celltypes = character())

for (group in c("patient_prim_normal_cells", "patient_mets_normal_cells",
                "mm_prim_normal_cells", "mm_mets_normal_cells",
                "xeno_prim_mouse", "xeno_mets_mouse",
                "dogs_prim_normal_cells", "dogs_mets_normal_cells")) {
    object <- 
        qs::qread(str_c("output/seurat_objects/final_tumor_vs_stroma/",
                        group,
                        ".qs"))

    sobj_list[[group]] <- object

    cell_count <-
        object$Ann_Level2 %>%
        table() %>%
        as.data.frame() %>%
        arrange(desc(Freq)) %>%
        dplyr::rename(!!group := Freq,
                      celltypes := ".")

    cell_count_table <- cell_count_table %>%
        dplyr::full_join(cell_count, by = "celltypes")
}


cell_count_prep <- cell_count_table %>%
    mutate_all(~replace_na(., 0)) %>%
    column_to_rownames("celltypes") %>%
    t()

# Calculate the percentage for each cell type
cell_count_percent <-
    sweep(cell_count_prep, 1, rowSums(cell_count_prep), FUN = "/") * 100

stromal_celltype_heatmap<-
    pheatmap::pheatmap(cell_count_percent,
                        cluster_rows = FALSE,
                        cluster_cols = FALSE,
                        display_numbers = TRUE,
                        fontsize_number = 10,
                        main = "Cell Count Percentage Heatmap",
                        scale = "none",
                        number_format = "%.1f",
                        silent = TRUE,
                        color = colorRampPalette(c("white", "red"))(100),
                        legend = FALSE)

# stash_plot(stromal_celltype_heatmap[[4]], "stromal_celltype_heatmap")

ggsave(filename = "output/figures/Final_Annotations/stromal_celltype_heatmap.png",
        plot = stromal_celltype_heatmap,
        width = 20,
        height = 5,
        limitsize = FALSE,
        bg = "white")

#prepare colors for the dimplot
celltypes <-
    c(unique(sobj_list$patient_prim_normal_cells$Ann_Level3),
    unique(sobj_list$patient_mets_normal_cells$Ann_Level3),
    unique(sobj_list$mm_prim_normal_cells$Ann_Level3),
    unique(sobj_list$mm_mets_normal_cells$Ann_Level3),
    unique(sobj_list$xeno_prim_mouse$Ann_Level3),
    unique(sobj_list$xeno_mets_mouse$Ann_Level3),
    unique(sobj_list$dogs_prim_normal_cells$Ann_Level3),
    unique(sobj_list$dogs_mets_normal_cells$Ann_Level3)) %>%
    unique()

cols <- c(plot_cols, sample(rainbow(length(celltypes))))

names(cols) <- celltypes

dimplot_list <- list()

title_replacement <- 
    list(patient_prim_normal_cells = "Patient Primary Stroma",
        patient_mets_normal_cells = "Patient Metatatic Stroma",
        mm_prim_normal_cells = "Mouse Primary Stroma",
        mm_mets_normal_cells = "Mouse Metatatic Stroma",
        xeno_prim_mouse = "Xenograft Primary Stroma",
        xeno_mets_mouse = "Xenograft Metastatic Stroma",
        dogs_prim_normal_cells = "Dog Primary Stroma",
        dogs_mets_normal_cells = "Dog Metastatic Stroma")

for (group in c("patient_prim_normal_cells", "patient_mets_normal_cells",
                "mm_prim_normal_cells", "mm_mets_normal_cells",
                "xeno_prim_mouse", "xeno_mets_mouse",
                "dogs_prim_normal_cells", "dogs_mets_normal_cells")) {
    object <- 
        qs::qread(str_c("output/seurat_objects/final_tumor_vs_stroma/",
                        group,
                        ".qs"))
    order <-
        object$Ann_Level3 %>%
        table() %>%
        as.data.frame() %>%
        arrange(desc(Freq)) %>%
        dplyr::rename(!!group := Freq,
                      celltypes := ".") %>%
        dplyr::pull(celltypes) %>%
        as.vector()
        
    dimplot <-
        DimPlot(object,
                group.by = "Ann_Level3",
                label.box = T,
                label = T,
                repel = T,
                cols = cols,
                label.size = 2.5,
                raster = F,
                pt.size = 0.5) +
            coord_fixed() +
            #scale_color_manual(values = cols) +
            NoLegend() +
            ggtitle(title_replacement[group][1]) +
            theme(aspect.ratio=1)

    dimplot_list[[group]] <- dimplot
}

stromal_panel_plot <-
    patchwork::wrap_plots(plotlist = dimplot_list,
            ncol = 2) +
        patchwork::plot_annotation(title = "Stromal cell types Ann_Level3")

# stash_plot(stromal_panel_plot, "stromal_panel_plot")

ggsave(filename = "output/figures/Final_Annotations/stromal_panel_plots.png",
        plot = stromal_panel_plot,
        width = 14,
        height = 28,
        limitsize = FALSE,
        bg = "white")


#dimplot_better(object, group_by = "markers", raster=F, pt.size = 0.2) 
Idents(object) <- object$Ann_Level3
object$compare <- 
    ifelse(object$Ann_Level3 == "Neutrophils", "Neutrophils", "compared_to")

Idents(object) <- object$compare
nuet <-
    FindMarkers(object = object,
                ident.1 = "Neutrophils",
                ident.2 = "compared_to",
                min.pct = 0.25,
                logfc.threshold = 0.25,
                test.use = "wilcox",
                only.pos = TRUE)

genes <-
    nuet %>%
    dplyr::filter(p_val_adj < 0.05) %>%
    arrange(desc(avg_log2FC)) %>%
    rownames_to_column(var = "gene") %>%
     dplyr::filter(!str_starts(gene, "ENSCAF"))

Top30 <-
    genes %>%
    select(gene) %>%
    slice(1:30) %>%
    as.vector()
```


## Result 2 figures
```{r, figure_cancer_panel, echo = FALSE}
# load the cancer final object
cancer_sobj_list <-  list()
cell_count_table <- tibble::tibble(celltypes = character())

for (group in c("patient_prim_cancer_cells", "patient_mets_cancer_cells",
                "mm_prim_cancer_cells", "mm_mets_cancer_cells",
                "xeno_prim_human", "xeno_mets_human",
                "dogs_prim_cancer_cells", "dogs_mets_cancer_cells")) {
    object <- 
        qs::qread(str_c("output/seurat_objects/final_tumor_vs_stroma/",
                        group,
                        ".qs"))

    cancer_sobj_list[[group]] <- object
                
    cell_count <-
        object$Ann_Level3 %>%
        table() %>%
        as.data.frame() %>%
        arrange(desc(Freq)) %>%
        dplyr::rename(!!group := Freq,
                      celltypes := ".")

    cell_count_table <- cell_count_table %>%
        dplyr::full_join(cell_count, by = "celltypes")
}

# Generate a heatmap of the cell count data
cell_count_prep <- 
    cell_count_table %>%
    mutate_all(~replace_na(., 0)) %>%
    column_to_rownames("celltypes") %>%
    t()

# Calculate the percentage for each cell type
cell_count_percent <- sweep(cell_count_prep, 1, rowSums(cell_count_prep), FUN = "/") * 100

cancer_cell_percent <-
    pheatmap::pheatmap(cell_count_percent,
         cluster_rows = FALSE,
         cluster_cols = FALSE,
         display_numbers = TRUE,
         fontsize_number = 10,
         main = "Cell Count Percentage Heatmap",
         scale = "none",
         number_format = "%.1f",
         color = colorRampPalette(c("white", "red"))(100))

# stash_plot(cancer_cell_percent[[4]], "tumor_celltype_heatmap")

ggsave(filename = "output/figures/Final_Annotations/tumor_celltype_heatmap.png",
        plot = cancer_cell_percent,
        width = 10,
        height = 7,
        limitsize = FALSE,
        bg = "white")
#prepare colors for the plot
celltypes <-
    c(unique(cancer_sobj_list$patient_prim_cancer_cells$Ann_Level3),
    unique(cancer_sobj_list$patient_mets_cancer_cells$Ann_Level3),
    unique(cancer_sobj_list$mm_prim_cancer_cells$Ann_Level3),
    unique(cancer_sobj_list$mm_mets_cancer_cells$Ann_Level3),
    unique(cancer_sobj_list$xeno_prim_human$Ann_Level3),
    unique(cancer_sobj_list$xeno_mets_human$Ann_Level3),
    unique(cancer_sobj_list$dogs_prim_cancer_cells$Ann_Level3),
    unique(cancer_sobj_list$dogs_mets_cancer_cells$Ann_Level3)) %>%
    unique()
cols <- c(plot_cols, sample(rainbow(length(celltypes))))

names(cols) <- celltypes

#plots for cancer panel
cancer_plot_list <- list()

title_replacement <- 
    list(patient_prim_cancer_cells = "Patient Primary Tumor",
        patient_mets_cancer_cells = "Patient Metastatic Tumor",
        mm_prim_cancer_cells = "Mouse Primary Tumor",
        mm_mets_cancer_cells = "Mouse Metastatic Tumor",
        xeno_prim_human = "Xenograft Primary Tumor",
        xeno_mets_human = "Xenograft Metastatic Tumor",
        dogs_prim_cancer_cells = "Dog Primary Tumor",
        dogs_mets_cancer_cells = "Dog Metastatic Tumor")

for (group in c("patient_prim_cancer_cells", "patient_mets_cancer_cells",
                "mm_prim_cancer_cells", "mm_mets_cancer_cells",
                "xeno_prim_human", "xeno_mets_human",
                "dogs_prim_cancer_cells", "dogs_mets_cancer_cells")) {
    object <- 
        qs::qread(str_c("output/seurat_objects/final_tumor_vs_stroma/",
                        group,
                        ".qs"))

    cancer_plot <-
        DimPlot(object,
                group.by = "Ann_Level3",
                label.box = T,
                label = T,
                repel = T,
                cols = cols,
                raster = F,
                pt.size = 0.5,
                label.size = 2.5) +
            coord_fixed() +
            NoLegend() +
            ggtitle(title_replacement[group][1]) +
            theme(aspect.ratio=1)

    cancer_plot_list[[group]] <- cancer_plot
}

cancer_panel_plot <-
    patchwork::wrap_plots(plotlist = cancer_plot_list,
            ncol = 2) +
        patchwork::plot_annotation(title = "Tumor subpopulations Ann_Level3")

# stash_plot(cancer_panel_plot, "tumor_panel_plot")

ggsave(filename = "output/figures/Final_Annotations/tumor_panel_plots.png",
        plot = cancer_panel_plot,
        width = 20,
        height = 30,
        limitsize = FALSE,
        bg = "white")

```

### Put everything together cancer cells
```{r}

# load the cancer final object
cancer_sobj_list <-  list()
cell_count_table <- tibble::tibble(celltypes = character())

for (group in c("patient_prim_cancer_cells", "patient_mets_cancer_cells",
                "mm_prim_cancer_cells", "mm_mets_cancer_cells",
                "xeno_prim_human", "xeno_mets_human",
                "dogs_prim_cancer_cells", "dogs_mets_cancer_cells")) {
    object <- 
        qs::qread(str_c("output/seurat_objects/final_tumor_vs_stroma/",
                        group,
                        ".qs"))
    #dimplot_better(object, group_by = "Ann_Level3", raster=F, pt.size = 0.7)

    organism <- 
        object$organism[1]

    if (organism[1] == "mouse") {
        object <-
            mouse_to_human_setup(object,
                                harm_vars = "sample_name",
                                theta = 7)
    }

    cancer_sobj_list[[group]] <- object

}

merged_sobj <- 
    merge(x = cancer_sobj_list[[1]],
        y = cancer_sobj_list[2:length(cancer_sobj_list)],
        add.cell.id = names(cancer_sobj_list)) %>%
    JoinLayers() %>%
    process_seurat()

qs::qsave(merged_sobj,
        str_c("output/seurat_objects/final_combined_sobjs/",
                "all_cancer_cells",
                ".qs"))

harmony_sobj <-
    merged_sobj %>%
    RunHarmony(group.by.vars = c("sample_name", "data_source", "method", "unique"),
                theta = c(12, 12, 12, 12),
                lambda = c(0.1, 0.1, 0.1, 0.1)) %>%
    process_seurat(reduction = "harmony",
                    resolution = 0.15)

qs::qsave(harmony_sobj,
        str_c("output/seurat_objects/final_combined_sobjs/",
                "harmony_all_cancer_cells",
                ".qs"))

all_tumor <-
    qs::qread(str_c("output/seurat_objects/final_combined_sobjs/",
                "harmony_all_cancer_cells",
                ".qs"))

dimplot_better(all_tumor,
            group_by = "unique") + 
    NoLegend()
dimplot_better(all_tumor,
            group_by = "Ann_Level3") +
    NoLegend()

dimplot_list <- list()

for (group in unique(all_tumor$unique)) {
    object <- 
        subset(all_tumor,
                subset = unique == group)

    dimplot <-
        dimplot_better(object,
                group_by = "Ann_Level3",
                raster = F,
                pt.size = 0.5,
                label.size = 2.5) +
            coord_fixed() +
            NoLegend() +
            ggtitle(group) +
            theme(aspect.ratio=1)

    dimplot_list[[group]] <- dimplot
}

cancer_panel_plot <-
    patchwork::wrap_plots(plotlist = dimplot_list,
            ncol = 4) +
        patchwork::plot_annotation(title = "Tumor subpopulations Ann_Level3")


patient_prim_mets <-
    merge(x = cancer_sobj_list$patient_prim_cancer_cells,
        y = cancer_sobj_list$patient_mets_cancer_cells) %>%
    JoinLayers() %>%
    process_seurat()
qs::qsave(patient_prim_mets,
        str_c("output/seurat_objects/final_combined_sobjs/",
                "patient_prim_mets",
                ".qs"))
patient_harmony_sobj <-
    patient_prim_mets %>%
    RunHarmony(group.by.vars = c("sample_name", "data_source", "method", "unique"),
                theta = c(12, 12, 12, 12),
                lambda = c(0.1, 0.1, 0.1, 0.1)) %>%
    process_seurat(reduction = "harmony",
                    resolution = 0.15)
qs::qsave(patient_harmony_sobj,
        str_c("output/seurat_objects/final_combined_sobjs/",
                "harmony_patient_prim_mets",
                ".qs"))

patient_obj <-
    qs::qread(str_c("output/seurat_objects/final_combined_sobjs/",
                "harmony_patient_prim_mets.qs"))
patient_obj <-
    FindClusters(patient_obj,
                resolution = 0.2)
dimplot_better(patient_obj,
            group_by = "Ann_Level3",
            #split_by = "unique",
            raster =F,
            pt.size = 1) +
    NoLegend()
FeaturePlot(patient_obj, feature = "BNIP3", raster =F, pt.size = 1)

patient_obj$new_ids <-
    str_replace_all(patient_obj$seurat_clusters,
                    c("^0$" = "Fibrogenic",
                    "^1$" = "Progenitor",
                    "^2$" = "Proliferative",
                    "^3$" = "Hypermetabolic",
                    "^4$" = "Interactive",
                    "^5$" = "Interactive",
                    "^6$" = "Interactive",
                    "^7$" = "Progenitor",
                    "^8$" = "Progenitor",
                    "^9$" = "Fibrogenic",
                    "^10$" = "Fibrogenic",
                    "^11$" = "Ground"))

# xenograft human
xeno_prim_mets <-
    merge(x = cancer_sobj_list$xeno_prim_human,
        y = cancer_sobj_list$xeno_mets_human) %>%
    JoinLayers() %>%
    process_seurat()
qs::qsave(xeno_prim_mets,
        str_c("output/seurat_objects/final_combined_sobjs/",
                "xeno_prim_mets",
                ".qs"))
xeno_harmony_sobj <-
    xeno_prim_mets %>%
    RunHarmony(group.by.vars = c("sample_name", "data_source", "method", "unique"),
                theta = c(12, 12, 12, 12),
                lambda = c(0.1, 0.1, 0.1, 0.1)) %>%
    process_seurat(reduction = "harmony",
                    resolution = 0.15)
qs::qsave(xeno_harmony_sobj,
        str_c("output/seurat_objects/final_combined_sobjs/",
                "harmony_xeno_prim_mets",
                ".qs"))

mouse_prim_mets <-
    merge(x = cancer_sobj_list$mm_prim_cancer_cells,
        y = cancer_sobj_list$mm_mets_cancer_cells) %>%
    JoinLayers() %>%
    process_seurat()
qs::qsave(mouse_prim_mets,
        str_c("output/seurat_objects/final_combined_sobjs/",
                "mouse_prim_mets",
                ".qs"))
mouse_harmony_sobj <-
    mouse_prim_mets %>%
    RunHarmony(group.by.vars = c("sample_name", "data_source", "unique"),
                theta = c(12, 12, 12),
                lambda = c(0.1, 0.1, 0.1)) %>%
    process_seurat(reduction = "harmony",
                    resolution = 0.15)
qs::qsave(mouse_harmony_sobj,
        str_c("output/seurat_objects/final_combined_sobjs/",
                "harmony_mouse_prim_mets",
                ".qs"))

# dog_prim_mets
dog_prim_mets <-
    merge(x = cancer_sobj_list$dogs_prim_cancer_cells,
        y = cancer_sobj_list$dogs_mets_cancer_cells) %>%
    JoinLayers() %>%
    process_seurat()
qs::qsave(dog_prim_mets,
        str_c("output/seurat_objects/final_combined_sobjs/",
                "dog_prim_mets",
                ".qs"))
dog_harmony_sobj <-
    dog_prim_mets %>%
    RunHarmony(group.by.vars = c("sample_name", "data_source", "unique"),
                theta = c(12, 12, 12),
                lambda = c(0.1, 0.1, 0.1)) %>%
    process_seurat(reduction = "harmony",
                    resolution = 0.15)
qs::qsave(dog_harmony_sobj,
        str_c("output/seurat_objects/final_combined_sobjs/",
                "harmony_dog_prim_mets",
                ".qs"))




harmony_params <-
    list(patient_prim = list(group_by = c("sample_name",
                                          "method",
                                          "data_source"),
                             theta = c(1, 5, 5),
                             lambda = c(0.5, 0.5, 0.5)),
        patient_mets = list(group_by = c("sample_name",
                                            "method",
                                            "data_source"),
                            theta = c(7, 7, 7),
                            lambda = c(0.1, 0.1, 0.1)),
        xeno_prim_human = list(group_by = c("sample_name",
                                            "location",
                                            "data_source"),
                               theta = c(12, 12, 12),
                               lambda = c(0.1, 0.1, 0.1)),
        xeno_mets_human = list(group_by = c("sample_name",
                                            "method",
                                            "data_source"),
                               theta = c(2, 7, 15),
                               lambda = c(0.7, 0.1, 0.1)),
        xeno_prim_mouse = list(group_by = c("sample_name",
                                            "data_source"),
                                theta = c(7, 7),
                                lambda = c(0.5, 0.5)),
        xeno_mets_mouse = list(group_by = c("sample_name",
                                            "method",
                                            "data_source"),
                               theta = c(7, 7, 7),
                               lambda = c(0.5, 0.5, 0.5)),
        mm_prim = list(group_by = c("sample_name",
                                    "model"),
                       theta = c(12, 12),
                       lambda = c(0.1, 0.1)),
        mm_mets = list(group_by = c("sample_name",
                                    "model"),
                       theta = c(12, 12),
                       lambda = c(0.1, 0.1)),
        dogs_prim = list(group_by = c("sample_name",
                                       "data_source",
                                       "location"),
                          theta = c(7, 7, 7),
                          lambda = c(0.5, 0.5, 0.5)),
        dogs_mets = list(group_by = c("sample_name",
                                    "location",
                                    "data_source"),
                          theta = c(7, 12, 12),
                          lambda = c(0.1, 0.1, 0.1)),
        normal_bone = list(group_by = c("sample_name"),
                           theta = c(7)))

theme_set(
    theme_classic(base_size = 20) +
    theme(
        axis.title.y = element_text(
            margin = ggplot2::margin(0, 20, 0, 0),
            size = 10,
            color = "black",
            face = "bold"
        ),
        axis.title.x = element_text(
            hjust = 0.5,
            margin = ggplot2::margin(20, 0, 0, 0),
            size = 10,
            color = "black",
            face = "bold"
        ),
        plot.title = element_text(
            hjust = 0.5,
            size = 10,
            face = "bold"
        ),
        legend.text = element_text(size = 8, face = "bold")
    )
)

# load the tsv for human_dog gene orthologs
orthologs <-
    read_tsv("input/downloads/dog_human_gene_orthologs.txt")

#GSEA Miltilevel
cat_tib <- dplyr::tribble(
    ~category, ~subcategory,   ~cat_expl,
    "H",        "NA",          "Hallmark_paths",
    "C2",       "CP:KEGG",     "KEGG",
    "C3",       "TFT:GTRD",    "Transcription_factor_targets",
    "C6",       "NA",          "Oncogenic_signature",
    "C5",       "GO:BP",       "Biological_processes",
    "C2",       "CP:REACTOME", "Reactome")

panel_plots <- list()

object_list <-
    tribble(~group,                         ~res_value,
            "harmony_patient_prim_mets",    0.2,
            "harmony_xeno_prim_mets",    0.2,
            "harmony_mouse_prim_mets",         0.3,
            "harmony_dog_prim_mets",         0.15)


# Make degs gsea panel plot
for (item in seq_len(nrow(object_list))) {
    group <- object_list$group[item]
    res_value <- object_list$res_value[item]

    object <-   
        qs::qread(str_c("output/seurat_objects/final_combined_sobjs/",
                        group, ".qs"))
    #dimplot_better(object, group_by = "Ann_Level3", raster=F)
    #dimplot_better(object, group_by = "seurat_clusters", raster=F)
    object <-
        FindClusters(object,
                    resolution = res_value)

    make_panel_plot(sobj = object,
                    comparison_col = "seurat_clusters",
                    label = "seurat_clusters",
                    group = group,
                    aggregate_by = c("sample_name", "seurat_clusters"),
                    organism_col = "organism",
                    subset = FALSE,
                    batch_var = "data_source")
}


object$new_ids <-
    str_replace_all(object$seurat_clusters,
                    c("^0$" = "Fibrogenic",
                    "^1$" = "Progenitor",
                    "^2$" = "Proliferative",
                    "^3$" = "Hypermetabolic",
                    "^4$" = "Interactive",
                    "^5$" = "Ground",
                    "^6$" = "Fibrogenic",
                    "^7$" = "Interactive",
                    "^8$" = "Ground",
                    "^9$" = "Ground",
                    "^10$" = "Ground",
                    "^11$" = "Ground",
                    "^12$" = "Fibrogenic",
                    "^13$" = "Fibrogenic",
                    "^14$" = "Ground",
                    "^15$" = "Hypermetabolic",
                    "^16$" = "Ground",
                    "^17$" = "Hypermetabolic"))
dimplot_better(object, group_by = "new_ids", raster=F)
patient_prim = list(group_by = c("sample_name",
                                          "method",
                                          "data_source"),
                             theta = c(1, 5, 5),
                             lambda = c(0.5, 0.5, 0.5)),
        patient_mets = list(group_by = c("sample_name",
                                            "method",
                                            "data_source"),
                            theta = c(7, 7, 7),
                            lambda = c(0.1, 0.1, 0.1))
prim <-
    subset(object,
            subset = unique == "patient_prim") %>%
    process_seurat() %>%
    RunHarmony(group.by.vars = c("sample_name",
                                          "method",
                                          "data_source"),
                             theta = c(1, 5, 5),
                             lambda = c(0.5, 0.5, 0.5)) %>%
    process_seurat(reduction = "harmony",
                    resolution = 0.1)

mets <-
    subset(object,
            subset = unique == "patient_mets") %>%
    process_seurat() %>%
    RunHarmony(group.by.vars = c("sample_name",
                                            "method",
                                            "data_source"),
                            theta = c(7, 7, 7),
                            lambda = c(0.1, 0.1, 0.1)) %>%
    process_seurat(reduction = "harmony",
                    resolution = 0.1)
dimplot_better(prim,
            group_by = "new_ids",
            #split_by = "unique",
            raster =F,
            pt.size = 1) +
    NoLegend()


```





```{r}

merge_obj <-
    merge(cancer_sobj_list$patient_prim_cancer_cells,
        cancer_sobj_list$patient_mets_cancer_cells) %>%
    JoinLayers() %>%
    process_seurat()
harmony_sobj <- 
    merge_obj %>%
    RunHarmony(group.by.vars = c("sample_name", "data_source", "method"),
                theta = c(12, 12, 12),
                lambda = c(0.1, 0.1, 0.1)) %>%
    process_seurat(reduction = "harmony")

harm_obj <-
    harmony_sobj %>%
    FindClusters(resolution = 0.1)

dimplot_better(harm_obj,
                group_by = "seurat_clusters",
                raster = F) + 
    NoLegend()

DotPlot(harmony_sobj,
    features = c("F3"),
    group.by = "unique",
    #split.by = "method",
    scale = FALSE) +
    theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
    scale_y_discrete(labels = function(x) gsub("_", " ", x))
#make a boxplot of gene expression for F3 and F7
VlnPlot(merge_obj,
        features = c("F3", "F7"),
        group.by = "unique",
        pt.size = 0.4,
        cols = c("blue", "red")) +
    NoLegend() +
    theme(aspect.ratio=1) +
    ggtitle("VlnPlot of F3")

#make a boxplot of gene expression for F3 and F7
VlnPlot(merge_obj,
        features = "F3",
        group.by = "unique",
        split.by = "method",
        pt.size = 0.01) +
    #ggplot2::geom_bloxplot() +
    #NoLegend() +
    theme(aspect.ratio=1) +
    ggtitle("VlnPlot of F3")

FeaturePlot(harmony_sobj,
            features = c("F3"),
            split.by = "method",
            ncol = 2,
            order = T,
            raster=F) +
    NoLegend() +
    theme(aspect.ratio=1) +
    ggtitle("FeaturePlot of F3")

FeaturePlot(harmony_sobj,
            features = c("F10"),
            split.by = "unique",
            ncol = 2,
            order = T,
            raster=F) +
    NoLegend() +
    theme(aspect.ratio=1) +
    ggtitle("FeaturePlot of F10")


# Extract expression data
df <- FetchData(harm_obj, vars = c("unique", "F3"))

# Rename columns
colnames(df) <- c("unique", "Expression")

# Generate the boxplot
ggplot(df, aes(x = unique, y = log2(Expression), fill = unique)) +
  geom_boxplot(outlier.shape = NA, alpha = 0.6) +  # Boxplot without outliers
  geom_jitter(width = 0.2, size = 0, alpha = 0.5) +  # Scatter points for distribution
  labs(title = paste("Expression by group"),
       x = "Group", y = "log 2 Expression Level") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) 


harmony_sobj <- 
    merge_obj %>%
    RunHarmony(group.by.vars = c("sample_name", "data_source", "method"),
                theta = c(1, 5, 5),
                lambda = c(0.5, 0.5, 0.5)) %>%
    process_seurat(reduction = "harmony")

harm_obj <-
    harmony_sobj %>%
    FindClusters(resolution = 0.1)

patient_p <- 
    subset(harm_obj, unique == "patient_prim")

patient_m <-
    subset(harm_obj, unique == "patient_mets")


dimplot_better(patient_p,
                group_by = "sample_name",
                raster = F) + 
    NoLegend() 



celltypes <- unique(harmony_sobj$annotations)

cols <- c(plot_cols, sample(rainbow(length(celltypes))))

names(cols) <- celltypes

pprim <-
    subset(harmony_sobj, unique == "patient_prim")

cancer_plot <-
        DimPlot(pprim,
                group.by = "annotations",
                label.box = T,
                label = T,
                repel = T,
                cols = cols,
                label.size = 2.5) +
            coord_fixed() +
            NoLegend()



merge_obj2 <-
    merge(cancer_sobj_list$patient_mets_cancer_cells,
        cancer_sobj_list$xeno_mets_human) %>%
    JoinLayers() %>%
    process_seurat()

harmony_sobj2 <- 
    merge_obj2 %>%
    RunHarmony(group.by.vars = c("sample_name", "data_source", "method"),
                theta = c(7, 7, 7),
                lambda = c(0.5, 0.5, 0.5)) %>%
    process_seurat(reduction = "harmony",
                    resolution = 0.15)
dimplot_better(harmony_sobj2, group_by = "Ann_Level3")

obj <-
    qs::qread(str_c("output/seurat_objects/final_combined_sobjs/",
                            "patient_prim",
                            ".qs"))

dimplot_better(obj, group_by = "annotations") + 
    NoLegend()
```


```{r mapping_query_dataset}

# load the query dataset
query_sobj <- 
    qs::qread(str_c("output/seurat_objects/final_tumor_vs_stroma/",
                    "patient_prim_normal_cells",
                            ".qs"))

dimplot_better(query_sobj,
            group_by = "Ann_Level1") + 
    NoLegend()



ref_dataset <-
    qs::qread(str_c("output/seurat_objects/final_tumor_vs_stroma/",
                    "patient_mets_cancer_cells",
                            ".qs"))
dimplot_better(ref_dataset,
            group_by = "Ann_Level3") + 
    NoLegend()

ref_dataset$ref_col <- 
    ref_dataset$Ann_Level3
Idents(ref_dataset) <- ref_dataset$ref_col

# find the anchor genes between te query and reference dataset
anchors <- 
    FindTransferAnchors(reference = ref_dataset,
                        query = query_sobj,
                        dims = 1:30,
                        reference.reduction = "pca")


predictions <- 
    TransferData(anchorset = anchors,
                refdata = ref_dataset$ref_col,
                dims = 1:30)

query_sobj <-
    AddMetaData(query_sobj,
                metadata = predictions)

ref_dataset <-
    RunUMAP(ref_dataset,
            dims = 1:30,
            reduction = "harmony",
            return.model = TRUE)

query_sobj <-
    MapQuery(anchorset = anchors,
            reference = ref_dataset,
            query = query_sobj,
            refdata = list(celltype = "ref_col"),
            reference.reduction = "pca",
            reduction.model = "umap")

table(query_sobj$predicted.id)
celltypes <- unique(query_sobj$Ann_Level3)
cols <- c(plot_cols, sample(rainbow(length(celltypes))))
names(cols) <- celltypes

p1 <-
    dimplot_better(ref_dataset,
                    reduction = "umap",
                    group_by = "ref_col",
                    cols = cols) +
    NoLegend() +
    ggtitle("Reference annotations")


p2 <- 
   dimplot_better(query_sobj,
                reduction = "ref.umap",
                group_by = "predicted.celltype",
                cols = cols) +
    NoLegend() +
    ggtitle("Query transferred labels")

p3 <- 
    dimplot_better(query_sobj,
            reduction = "ref.umap",
            group_by = "Ann_Level3",
            cols = cols) +
    NoLegend() +
    ggtitle("My labels in ref umap")

p4 <-
    dimplot_better(query_sobj,
            reduction = "umap",
            group_by = "Ann_Level3",
            cols = cols) +
    NoLegend() +
    ggtitle("My labels in query umap")

p5 <-
    dimplot_better(query_sobj,
            reduction = "umap",
            group_by = "predicted.id",
            cols = cols) +
    NoLegend() +
    ggtitle("Query transferred labels in query umap")


patchwork::wrap_plots(p1, p2, p3, p4, p5,
            ncol = 3) +
    patchwork::plot_annotation(title = "Mapping query dataset to reference dataset")
```

```{r}
sobj <- 
    qs::qread(str_c("output/seurat_objects/final_tumor_vs_stroma/",
                    "patient_prim_cancer_cells",
                            ".qs"))

sobj12 <-
    process_seurat(sobj) %>%
    RunHarmony(group.by.vars = "sample_name",
                theta = 7) %>%
    process_seurat(reduction = "harmony",
                    resolution = 0.1)

dimplot_better(sobj12,
            group_by = "scATOMIC_pred") + 
    NoLegend()

for (clusters in unique(sobj$seurat_clusters)) {
    sub_obj <- 
        subset(sobj,
                subset = seurat_clusters == clusters) %>%
        process_seurat() %>%
        RunHarmony(group.by.vars = "sample_name",
                    theta = 7) %>%
        process_seurat(reduction = "harmony",
                        resolution = 0.1)
    
    dimplot1 <-
        dimplot_better(sub_obj,
                group_by = "seurat_clusters") + 
            NoLegend() +
            ggtitle(str_c("Cluster ", clusters))

    dimplot2 <-
        dimplot_better(sub_obj,
                group_by = "annotations") + 
            NoLegend() +
            ggtitle(str_c("Cluster ", clusters))
    
    dimplot3 <-
        dimplot_better(sub_obj,
                group_by = "sample_name") + 
            NoLegend() +
            ggtitle(str_c("Cluster ", clusters))
    
    dimplot4 <-
        dimplot_better(sub_obj,
                group_by = "new_annot_clust") + 
            NoLegend() +
            ggtitle(str_c("Cluster ", clusters))
    
    dimplot5 <-
        dimplot_better(sub_obj,
                group_by = "scATOMIC_pred") + 
            NoLegend() +
            ggtitle(str_c("Cluster ", clusters))

    dimplot6 <-
        dimplot_better(sub_obj,
                group_by = "CNV_status") + 
            NoLegend() +
            ggtitle(str_c("Cluster ", clusters))
    
    plot_c <-
        patchwork::wrap_plots(dimplot1, dimplot2, dimplot3,
                            dimplot4, dimplot5, dimplot6,
                            ncol = 2) +
        patchwork::plot_annotation(title = str_c("Cluster ", clusters))

    if (!dir.exists(str_c("output/figures/reclustering_tumors/", group))) {
        dir.create(str_c("output/figures/reclustering_tumors/", group),
                    recursive = TRUE)
    }

    ggsave(filename = str_c("output/figures/reclustering_tumors/", group, "/cluster_",
                        clusters,
                        ".png"),
            plot = plot_c,
            width = 14,
            height = 21,
            limitsize = FALSE,
            bg = "white")
}

dimplot_better(sobj,
            group_by = "annotations") + 
    NoLegend()

clusters <- c("1", "5")

sub_sobj <-
    subset(sobj,
            subset = seurat_clusters %in% clusters) %>%
    process_seurat() %>%
    RunHarmony(group.by.vars = "sample_name",
                theta = 7) %>%
    process_seurat(reduction = "harmony",
                    resolution = 0.1)

annot <-
    annotate_celltypes(sobject = sub_sobj,
                        species = "human",
                        with_tumor = TRUE)

dimplot_better(sub_sobj,
            group_by = "scATOMIC_pred") + 
    NoLegend()

CAF_markers <- list(
  myCAFs = c("ACTA2", "FN1", "COL1A1", "COL1A2", "PDGFRB", "DES"),
  iCAFs = c("IL6", "IL8", "CCL2", "LIF", "FAP", "PDGFRA"),
  apCAFs = c("HLA-DR", "CD74", "CIITA", "FAP"),
  sCAFs = c("CDKN2A", "CDKN1A", "GLB1", "CXCL1", "CXCL12", "MMP2", "MMP9"),
  mCAFs = c("SLC16A3", "SLC2A1", "CAV1", "FAP"),
  isCAFs = c("CD274", "TGFB1", "ARG1", "FAP", "IL10"),
  qCAFs = c("PDGFRB", "DES", "Low_ACTA2"),
  General_CAFs = c("VIM", "S100A4", "PDGFRA", "PDGFRB", "FAP", "TNC")
)

FeaturePlot(sub_sobj,
            features = "POSTN",
            ncol=5) +
    theme(aspect.ratio=1) +
    ggtitle("CAF markers") +
    NoLegend()




```