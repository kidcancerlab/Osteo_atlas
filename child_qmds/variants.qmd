## Load in the list of samples to run SNV calling on
We're only running on patient and mouse model samples that are primary tumors or lung metastases. We're also excluding samples from the NCI-POB data source because we don't have the bam files for these samples. We're also excluding samples with low reads.
```{r load_sample_meta}
#| cache.vars = 'samples_to_run'
samples_to_run <-
    read_tsv("misc/allsample_details.txt",
             show_col_types = FALSE) %>%
    filter(species %in% c("patient", "mousemodel") &
           location != "cc_alltumor" &
           (tumor_type == "primary" |
            (tumor_type == "metastatic" & location == "lung"))) %>% # No bam files for these samples
    filter(!sample_name %in% c("SJOS013768_D1", # drop samples with low reads
                               "SJOS016016_D1",
                               "SJOS030605_D1",
                               "SJOS030411_D1",
                               "SJOS030605_D2")) %>%
    filter(data_source == "NCI_POB")
```

## Run SNV calling on the pseudobulked clusters to try to ID tumor cells
This portion requires https://github.com/kidcancerlab/rrrSnvs
```{r run_rrrSnvs}
file_loc_key <-
    list("X0" = "/home/gdrobertslab/lab/Counts_2/",
         "S0" = "/home/gdrobertslab/lab/Counts_2/",
         "SC" = "/home/gdrobertslab/lab/Counts_2/",
         "SJ" = "/home/gdrobertslab/lab/ExternalData/Patel_lab/",
         "CC" = "/home/gdrobertslab/lab/ExternalData/McEachron_lab/BAMs/")

ploidy_key <-
    list("human" = "GRCh38",
         "mouse" = "mm10")

control_celltypes <-
    c("Monocytes",
      "Macrophage",
      "Macrophages")

genome_key <-
    list("human" = "/home/gdrobertslab/lab/GenRef/10x-hg38/fasta/genome.fa",
         "mouse" = "/home/gdrobertslab/lab/GenRef/10x-mm10/fasta/genome.fa")

output <-
    parallel::mclapply(seq_len(nrow(samples_to_run)),
                       mc.preschedule = FALSE,
                       mc.cores = 10,
                       function(i) {
    sample_id <- samples_to_run$sample_name[i]
    species <- samples_to_run$organism[i]
    file_loc <- file_loc_key[[substr(sample_id, 1, 2)]]
    ploidy <- ploidy_key[[species]]
    data_source <- samples_to_run$data_source[i]
    method <- samples_to_run$method[i]

    message(sample_id)

    bam_file <- "possorted_genome_bam.bam"

    if (method == "single_nucleus" && data_source == "NCH") {
        bam_file <- "gex_possorted_bam.bam"
    }
    if (data_source == "NCI_POB") {
        bam_file <- "gex_possorted_bam.bam"
    }
    message("loading data")

    qs_file <-
        paste0("output/seurat_objects/sobj_preprocess/",
               sample_id,
               "_", species,
               ".qs")

    if (!file.exists(qs_file)) {
        return(
            paste0(
                "No seurat object for ",
                sample_id,
                " at ",
                qs_file
            )
        )
    } else {
        s_obj <- qs::qread(qs_file)
        if (length(Cells(s_obj)) > 100) {
            s_obj <-
                s_obj %>%
                process_seurat(run_umap_dims = 1:50) %>%
                annotate_celltypes(species = species)
        } else {
            return(
                paste0(
                    "Only ",
                    length(Cells(s_obj)),
                    " cells for ",
                    sample_id
                )
            )
        }

        message("Optimizing silhouette score")
        opt_res <-
            optimize_silhouette(s_obj, summary_plot = FALSE) %>%
            arrange(desc(sil_vals)) %>%
            pull(res_vals) %>%
            head(1)

        s_obj <- FindClusters(s_obj, resolution = opt_res)

        if (data_source == "NCI_POB") {
            full_bam_file <- 
                paste0(file_loc,
                   sample_id,
                   "_",
                   bam_file)
        } else {
            full_bam_file <-
                paste0(file_loc,
                    sample_id,
                    "/",
                    bam_file)
        }

        if (!file.exists(full_bam_file)) {
            return(
                paste0(
                    "No bam file for ",
                    sample_id,
                    " at ",
                    full_bam_file
                )
            )
        }

        s_obj$bam_file <- full_bam_file

        s_obj$cell_barcode <- colnames(s_obj)
        s_obj$cell_group <- paste0("cluster_", s_obj$seurat_clusters)
        message("Making DimPlot")
        dim_plot_name <-
            dimplot_better(
                            s_obj,
                            group_by = c("seurat_clusters", "annotations"),
                            label.size = 2.5) +
                        NoLegend()

        ggsave(
            paste0(
                "output/id_tumor/snvs/plots/",
                sample_id,
                "_dim_plot.png"
            ),
            plot = dim_plot_name,
            width = 7,
            height = 14
        )

        c_b_t <-
            s_obj@meta.data %>%
            select(cell_group, bam_file, cell_barcode)

        if (!dir.exists(paste0("output/id_tumor/snvs/", sample_id))) {
            dir.create(
                paste0(
                    "output/id_tumor/snvs/",
                    sample_id
                ),
                recursive = TRUE)
        }
        message("Making snp tree")
        snp_tree <-
            tryCatch({
                rrrSnvs::get_snp_tree(
                    cellid_bam_table = c_b_t,
                    ploidy = ploidy,
                    ref_fasta = genome_key[[species]],
                    min_depth = c(5, 10, 20),
                    temp_dir = paste0("output/id_tumor/snvs/", sample_id),
                    sbatch_base = paste0(
                        "output/id_tumor/snvs/",
                        sample_id,
                        "/shell"
                        ),
                    slurm_base = paste0(
                        "output/id_tumor/snvs/",
                        sample_id,
                        "/slurm"
                        ),
                    min_sites_covered = 1000,
                    cleanup = TRUE
                )
            }, error = function(e) {
                return(
                    paste0(
                        "Error in snp_tree for ",
                        sample_id,
                        ": ",
                        e
                    )
                )
                return(NULL)
            })

        # if all the min_depths failed due to low coverage, then the value
        #  of snp_tree is an empty list of length 0. We change this to NULL for
        # downstream processing
        if (length(snp_tree) == 0) {
            snp_tree <- NULL
        }

        if (is.character(snp_tree)) {
            return(snp_tree)
        }

        if (is.null(snp_tree)) {
            return(paste0("No snp_tree for ", sample_id))
        }

        qs::qsave(
            snp_tree,
            paste0(
                "output/id_tumor/snvs/",
                sample_id, "/",
                sample_id, "_snp_tree.qs"
            )
        )

        message("Plotting trees")
        for (depth in c("min_depth_5", "min_depth_10", "min_depth_20")) {
            if (!is.null(snp_tree[[depth]])) {
                snp_tree[[depth]]$labels <-
                    str_remove(snp_tree[[depth]]$labels, "split_")
                png(
                    paste0(
                        "output/id_tumor/snvs/",
                        sample_id, "/",
                        depth, "_", sample_id, ".png"
                    ),
                    width = 2500,
                    height = 2500,
                    res = 300
                )
                plot(snp_tree[[depth]])
                dev.off()
            }
        }
        message("Labeling tree groups")
        # Figure out which clusters are more than 50% control celltypes
        normal_clusters <-
            rrrSnvs::match_celltype_clusters(
                sobject = s_obj,
                normal_celltypes = control_celltypes,
                cluster_col = "seurat_clusters",
                celltype_col = "annotations"
            ) %>%
            paste0("cluster_", .)

        cut_n_groups <- 2

        s_obj$cell_barcode <- NULL
        for (depth in c("min_depth_5", "min_depth_10", "min_depth_20")) {
            if (!is.null(snp_tree[[depth]])) {
                s_obj <-
                    rrrSnvs::label_tree_groups(
                        sobject = s_obj,
                        dist_tree = snp_tree[[depth]],
                        group_col_name = "cell_group",
                        normal_groups = normal_clusters,
                        cut_n_groups = cut_n_groups,
                        tumor_call_column = paste0("snp_", depth)
                    )
            }
        }
        message("Dimplots of calls")
        if (!is.null(snp_tree)) {
            plot_name <-
                dimplot_better(
                    s_obj,
                    group_by = c(
                        "snp_min_depth_5",
                        "snp_min_depth_10",
                        "snp_min_depth_20"
                    )
                )
            ggsave(
                paste0(
                    "output/id_tumor/snvs/",
                    sample_id,
                    "_dim_plot_calls.png"
                    ),
                plot = plot_name,
                width = 7,
                height = 21
            )

            s_obj@meta.data %>%
                rownames_to_column("cell") %>%
                select(cell, starts_with("snp_min_depth")) %>%
                write_tsv(
                    paste0(
                        "output/id_tumor/snvs/",
                        sample_id,
                        "_snp_calls.tsv"
                    )
                )
        }
    }
    return("Completed successfully")
})

qs::qsave(output, "output/id_tumor/snvs/output.qs")
```

