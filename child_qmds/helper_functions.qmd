
## Make a DimPlot with better default settings
```{r dimplot_better_function}
#| cache.vars = 'dimplot_better'
dimplot_better <- function(object,
                           group_by,
                           cols,
                           ncol = 1,
                           label.size = 2.5,
                           split_by = NULL,
                           ...) {
    DimPlot(object,
            group.by = group_by,
            split.by = split_by,
            ncol = ncol,
            label.size = label.size,
            label = T,
            repel = T,
            shuffle = T,
            label.box = T,
            cols = c(plot_cols, sample(rainbow(1000))),
            ...) +
        coord_fixed()
}
```

## Cell type annotaton data compilation
Human normal lung reference data downloaded from
Mouse lung reference data is from
https://pubmed.ncbi.nlm.nih.gov/33692365/
https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE151974
We kept only the normoxic samples for the analysis
```{r celltype_annotation_data}
#| cache.vars = c('human_lung_ref', 'mouse_lung_ref')
human_lung_ref <- qs::qread("input/downloads/normal_lung.qs")

human_lung_ref$free_annotation <-
    str_replace_all(human_lung_ref$free_annotation, c("/" = "_",
                                                  "\\+" = "_plus"))

human_lung_ref$free_annotation <-
    stringr::str_replace_all(
        human_lung_ref$free_annotation,
        c("Alveolar Epithelial Type 1" = "Alveolar Epithelial",
          "Alveolar Epithelial Type 2" = "Alveolar Epithelial",
          "Basophil_Mast 1" = "Basophil_Mast",
          "Basophil_Mast 2" = "Basophil_Mast",
          "Bronchial Vessel 1" = "Bronchial Vessel",
          "Bronchial Vessel 2" = "Bronchial Vessel",
          "IGSF21_plus Dendritic" = "Dendritic cells",
          "Myeloid Dendritic Type 1" = "Myeloid Dendritic",
          "Myeloid Dendritic Type 2" = "Myeloid Dendritic",
          "Natural Killer" = "NK cells",
          "Natural Killer T" = "NKT",
          "NK cells T" = "NKT",
          "CD4_plus Memory/Effector T" = "CD4+ T cells",
          "CD4_plus Naive T" = "CD4+ T cells",
          "CD8_plus Memory_Effector T" = "CD8+ T cells",
          "CD8_plus Naive T" = "CD8+ T cells",
          "Proliferating NK_T" = "NKT",
          "TREM2_plus Dendritic" = "Dendritic cells",
          "Proliferating Macrophage" = "Macrophage",
          "Nonclassical Monocyte" = "Monocytes",
          "Classical Monocyte" = "Monocytes")
        )

# #load in the human tumor cell from xenograft primary fro documentation
# sobj <- qs::qread("output/seurat_objects/comb_sobjs/xeno_prim_human.qs") %>%
#     subset(sample_name %in% c("S0170", "S0042"))

# #add a column with the cell type
# sobj$CellType <- "Tumor_cells"

# #save the object
# qs::qsave(sobj,
#           file = "input/downloads/human_tumor_fromxenograft.qs")

#load the object
human_tumor_cell <- qs::qread("input/downloads/human_tumor_fromxenograft.qs")

#mouse lung normal cells reference
mouse_lung_ref <- qs::qread("input/downloads/mouse_lung.qs")

mouse_lung_ref$CellType <-
            str_replace_all(mouse_lung_ref$CellType,
                            c("/" = "_",
                              "\\+" = "_plus",
                              "-" = "_"))

mouse_lung_ref$CellType <-
    str_replace_all(mouse_lung_ref$CellType,
                    c("Col14a1_plus fibroblast" = "Fibroblasts",
                      "Col13a1_plus fibroblast" = "Fibroblasts",
                      "AT1" = "AT",
                      "AT2 1" = "AT",
                      "AT2 2" = "AT",
                      "B cell 1" = "B cells",
                      "B cell 2" = "B cells",
                      "Cap_a" = "Cap",
                      "CD4 T cell 1" = "CD4",
                      "CD4 T cell 2" = "CD4",
                      "CD8 T cell 1" = "CD8",
                      "CD8 T cell 2" = "CD8",
                      "DC1" = "Dendritic cells",
                      "DC2" = "Dendritic cells",
                      "gd T cell" = "Tgd",
                      "Neut 1" = "Neutrophils",
                      "Neut 2" = "Neutrophils",
                      "NK cell" = "NK cells",
                      "Pericyte 1" = "Pericytes",
                      "Pericyte 2" = "Pericytes",
                      "Mast Ba2" = "Mast_Basophils",
                      "Mono" = "Monocytes"))

# #make a reference for all tumor cells, using cell culture data documantation
# mouse_tumor_cell <- 
#     qs::qread("output/seurat_objects/comb_sobjs/mm_prim.qs") %>%
#     subset(sample_name %in% c("S0200", "S0201"))

# #create a column with the cell type
# mouse_tumor_cell$CellType <- "Tumor_cells"

# #save the object
# qs::qsave(mouse_tumor_cell,
#           file = "input/downloads/mm_tumor_cellculture.qs")

#load the object S0200 and S0201 combined cell culture mouse tumor cells
mouse_tumor_cell <- qs::qread("input/downloads/mm_tumor_cellculture.qs")

```

## Function to annotate cell types with mouse and human lung
```{r annotate_function}
#| cache.vars = 'annotate_celltypes'
annotate_celltypes <- function(sobject,
                               species = "",
                               with_tumor = FALSE,
                               ref,
                               labels,
                               aggr_ref = FALSE,
                               label_type = "label.main",
                               ...) {
    if (grepl("human", species)) {
        hpca <- celldex::HumanPrimaryCellAtlasData()
        huim <- celldex::MonacoImmuneData()
        ref4 <- SeuratObject::GetAssayData(human_tumor_cell)
        hpca$label.main <-
            stringr::str_replace_all(hpca$label.main,
                                     c("T_cells" = "T cells",
                                       "B_cell" = "B cells",
                                       "NK_cell" = "NK cells",
                                       "Monocyte" = "Monocytes",
                                       "DC" = "Dendritic cells"))
        ref <- list(hpca,
                    huim)
        labels <- list(hpca[[label_type]],
                       huim[[label_type]])

        if (with_tumor) {
            ref <- list(hpca,
                        huim,
                        ref4)
            labels <- list(hpca[[label_type]],
                           huim[[label_type]],
                           human_tumor_cell$CellType)
        }

        if (species == "human_lung") {
            ref <- list(hpca,
                        huim,
                        ref4,
                        SeuratObject::GetAssayData(human_lung_ref))
            labels <- list(hpca[[label_type]],
                           huim[[label_type]],
                           human_tumor_cell$CellType,
                           human_lung_ref$free_annotation)
        }

    } else if (grepl("mouse", species)) {
        mord <- celldex::MouseRNAseqData()
        moim <- celldex::ImmGenData()
        ref4 <- SeuratObject::GetAssayData(mouse_tumor_cell)
        moim$label.main <-
            stringr::str_replace_all(moim$label.main,
                                    c("B cells, pro" = "B cells",
                                      "DC" = "Dendritic cells"))
        ref <- list(mord,
                    moim)
        labels <- list(mord[[label_type]],
                       moim[[label_type]])

        if (with_tumor) {
            ref <- list(mord,
                        moim,
                        ref4)
            labels <- list(mord[[label_type]],
                           moim[[label_type]],
                           mouse_tumor_cell$CellType)
        }

        if (species == "mouse_lung") {
            ref <- list(mord,
                        moim,
                        ref4,
                        SeuratObject::GetAssayData(mouse_lung_ref))
            labels <- list(mord[[label_type]],
                           moim[[label_type]],
                           mouse_tumor_cell$CellType,
                           mouse_lung_ref$CellType)
        }
    }
    annotation <-
        SingleR::SingleR(test = Seurat::as.SingleCellExperiment(sobject),
                         ref = ref,
                         labels = labels,
                         aggr.ref = aggr_ref,
                         ...)
    sobject$annotations <- annotation$labels
    sobject$cell_scores <-
        apply(X = annotation$scores,
              MARGIN = 1,
              function(x) max(x, na.rm = TRUE))
    return(sobject)
}

```

## RUN differential expression analysis on a Seurat object
```{r run_degs_function}
#| cache.vars = 'run_degs'
run_degs <- function(sobject,
                     group_by = "",
                     prefix = "") {
    sobject$new_sample_name <- sobject$sample_name %>%
        stringr::str_replace_all("_", "") %>%
        stringr::str_replace_all("-", "")

    if (group_by == "seurat_clusters") {
        sobject$pseudobulk_col <-
            stringr::str_c(sobject$new_sample_name,
                           "-",
                           sobject$seurat_clusters)
    } else if (group_by == "annotations") {
        sobject$annotations <-
            stringr::str_replace_all(sobject$annotations, " ", "")
        sobject$pseudobulk_col <-
            stringr::str_c(sobject$new_sample_name,
                           "-",
                           sobject$annotations)
    }
    pseudobulk <- Seurat::AggregateExpression(object = sobject,
                                              group.by = "pseudobulk_col",
                                              slot = "counts")[[1]]
    deseq_coldata <- data.frame(pseudobulk_group = colnames(pseudobulk))
    rownames(deseq_coldata) <- deseq_coldata$pseudobulk_group
    deseq_coldata <-
        tidyr::separate(data = deseq_coldata,
                        col = "pseudobulk_group",
                        into = c("sample_name", "group"),
                        sep = "-")
    deseq_coldata$type <- "single-read"
    deseq_coldata <- deseq_coldata[, -1]

    if (group_by == "seurat_clusters") {
        deseq_group <- levels(factor(sobject$seurat_clusters))
        names(deseq_group) <- paste0(prefix, "_Cluster_", deseq_group)
    } else if (group_by == "annotations") {
        deseq_group <- levels(factor(sobject$annotations))
        names(deseq_group) <- paste0(prefix, "_Celltype_", deseq_group)
    }

    degs_output <- list()
    for (group in names(deseq_group)) {
        interested_group <- deseq_group[group]
        other_group <- deseq_coldata
        other_group$group[other_group$group == interested_group] <- "target"  #nolint
        other_group$group[other_group$group != "target"] <- "other"         #nolint
        degs_output[[group]] <-
            DESeq2::DESeqDataSetFromMatrix(countData = pseudobulk+1,
                                           colData = other_group,
                                           design = ~ group) %>%
            DESeq2::DESeq() %>%
            DESeq2::results() %>%
            as.data.frame() %>%
            dplyr::arrange(desc(log2FoldChange)) %>%
            tibble::rownames_to_column("gene") %>%
            na.omit()
    }
    return(degs_output)
}
```

## Function to run GSEA
```{r gsea_function}
#| cache.vars = 'run_gsea'
run_gsea <- function(degs_result,
                     category = "",
                     subcategory = "",
                     species = "") {
    gsea_ref <- msigdbr::msigdbr(species = species,
                                 category = category,
                                 subcategory = subcategory) %>%
        split(x = .$gene_symbol, f = .$gs_name)

    gsea_output <- list()
    for (item in names(degs_result)) {
        gsea_input <- as.vector(degs_result[[item]]$log2FoldChange)
        names(gsea_input) <- degs_result[[item]]$gene

        output <- fgsea::fgseaMultilevel(gsea_ref,
                                         gsea_input,
                                         minSize = 10,
                                         maxSize = 500,
                                         nPermSimple = 10000)
        gsea_output[[item]] <-
            output %>%
            dplyr::arrange(desc(NES)) %>%
            filter(padj < 0.05) %>%
            na.omit()
    }
    return(gsea_output)
}
```

# GSEA Plots function for twoway dotplot and barplot
```{r}
#| cache.vars = c('gsea_dotplot', 'gsea_barplot')
gsea_dotplot <- function(data, x_col = "z_score") {
    lab4plot <-
        tibble(y = c(-2.5, 2.5),
               x = c(0.2, 0.2),
               label = c("Downregulated", "Upregulated"))

    plot_name <-
        ggplot() +
        geom_point(data = data,
                 aes(x = -1 * order,
                     y = get(x_col),
                     color = -log10(padj),
                     size = size),
                 stat = "identity",
                 alpha = 0.8) +
        coord_flip() +
        geom_text(data = data,                #text for pathways names
                    aes(x = -1 * order,
                        y = get(x_col) + (y_pos *5),
                        hjust = justify_y,
                        label = pathway),
                        size = 2,
                        fontface = "bold") +
        geom_text(data = lab4plot,    #text for upregulated/downregulated
                  aes(x = x,
                      y = y,
                      label = label),
                  fontface = "bold",
                  size = 2.5) +
        scale_fill_manual(values = plot_cols,
                          name = paste0(x_col, " > 0")) +
        theme(strip.background = element_rect(color = "white",
                                              fill = "white"),
              #legend.position = "none",
              panel.grid.major = element_blank(),
              panel.grid.minor = element_blank(),
              panel.border = element_blank(),
              axis.line.x = element_line(color = "black"),
              axis.line.y = element_blank(),
              axis.title.x = element_text(size = 7),
              axis.ticks.y = element_blank(),
              plot.title = element_text(size = 7, face = "bold"),
              axis.text.y = element_blank(),
              axis.text.x = element_text(size = 7),
              legend.title = element_text(size = 7,
                                          face = "bold")) +
        labs(title = data$sample[1],
             y = "NES",
             x = "") +
        theme(plot.title = element_text(hjust = 0.5)) +
        ylim(-6, 6) +
        scale_color_gradient(low = plot_cols[2],
                             high =plot_cols[1])

    return(plot_name)
}


gsea_barplot <- function(data, x_col = "z_score") {
    lab4plot <-
        tibble(y = c(-3, 3),
               x = c(0.2, 0.2),
               label = c("Downregulated", "Upregulated"))

    plot_name <-
        ggplot() +
        geom_bar(data = data,
                 aes(x = -1 * order,
                     y = get(x_col),
                     fill = get(x_col) > 0),
                 stat = "identity",
                 alpha = 0.8) +
        coord_flip() +
        geom_hline(yintercept = 0,
                    color = "black",
                    linewidth = 0.5) +
        geom_text(data = data,                #text for pathways names
                    aes(x = -1 * order,
                        y = y_pos,
                        hjust = justify_y,
                        label = pathway),
                        size = 2,
                        fontface = "bold") +
        geom_text(data = lab4plot,    #text for upregulated/downregulated
                  aes(x = x,
                      y = y,
                      label = label),
                  fontface = "bold",
                  size = 2.5) +
        scale_fill_manual(values = plot_cols,
                          name = paste0(x_col, " > 0")) +
        theme(strip.background = element_rect(color = "white",
                                              fill = "white"),
              panel.grid.major = element_blank(),
              panel.grid.minor = element_blank(),
              panel.border = element_blank(),
              axis.line.x = element_line(color = "black"),
              axis.line.y = element_blank(),
              axis.title.x = element_text(size = 7),
              axis.ticks.y = element_blank(),
              plot.title = element_text(size = 7, face = "bold"),
              axis.text.y = element_blank(),
              axis.text.x = element_text(size = 7),
              legend.title = element_text(size = 7,
                                          face = "bold")) +
        labs(title = data$sample[1],
             y = "NES",
             x = "") +
        theme(plot.title = element_text(hjust = 0.5)) +
        ylim(-6, 6)

    return(plot_name)
}
```

