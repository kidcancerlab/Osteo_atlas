
## Make a DimPlot with better default settings
```{r dimplot_better_function}
#| cache.vars = 'dimplot_better'
dimplot_better <- function(object,
                           group_by,
                           cols,
                           ncol = 1,
                           label.size = 2.5,
                           split_by = NULL,
                           ...) {
    DimPlot(object,
            group.by = group_by,
            split.by = split_by,
            ncol = ncol,
            label.size = label.size,
            label = T,
            repel = T,
            shuffle = T,
            label.box = T,
            cols = c(plot_cols, sample(rainbow(1000))),
            ...) +
        coord_fixed()
}
```

## Cell type annotaton data compilation
Human normal lung reference data downloaded from
Mouse lung reference data is from
https://pubmed.ncbi.nlm.nih.gov/33692365/
https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE151974
We kept only the normoxic samples for the analysis
```{r celltype_annotation_data}
#| cache.vars = c('human_lung_ref', 'mouse_lung_ref', 'human_tumor_cell', 'mouse_tumor_cell')
human_lung_ref <- qs::qread("input/downloads/normal_lung.qs")

human_lung_ref$free_annotation <-
    str_replace_all(human_lung_ref$free_annotation, c("/" = "_",
                                                  "\\+" = "_plus"))

human_lung_ref$free_annotation <-
    stringr::str_replace_all(
        human_lung_ref$free_annotation,
        c("^Alveolar Epithelial Type 1$" = "Alveolar_Epithelial",
          "^Alveolar Epithelial Type 2$" = "Alveolar_Epithelial",
          "^Signaling Alveolar Epithelial Type 2$" = "Alveolar_Epithelial",
          "^Basophil_Mast 1$" = "Basophil_Mast",
          "^Basophil_Mast 2$" = "Basophil_Mast",
          "^Bronchial Vessel 1$" = "Bronchial_Vessel",
          "^Bronchial Vessel 2$" = "Bronchial_Vessel",
          "^IGSF21_plus Dendritic$" = "Dendritic_cells",
          "^Myeloid Dendritic Type 1$" = "Myeloid_Dendritic",
          "^Myeloid Dendritic Type 2$" = "Myeloid_Dendritic",
          "^Natural Killer$" = "NK_cells",
          "^Natural Killer T$" = "NKT_cells",
          "^NK cells T$" = "NKT_cells",
          "^CD4_plus Memory/Effector T$" = "CD4_Tcells",
          "^CD4_plus Naive T$" = "CD4_Tcells",
          "^CD8_plus Memory_Effector T$" = "CD8_Tcells",
          "^CD4_plus Memory_Effector T$" = "CD4_Tcells",
          "^CD8_plus Naive T$" = "CD8_Tcells",
          "^Proliferating NK_T$" = "NKT_cells",
          "^TREM2_plus Dendritic$" = "Dendritic_cells",
          "^Proliferating Macrophage$" = "Macrophages",
          "^Proliferating Basal$" = "Basal",
          "^Nonclassical Monocyte$" = "Monocytes",
          "^Classical Monocyte$" = "Monocytes",
          "^B$" = "B_cells",
          "^Vascular Smooth Muscle$" = "Vascular_Smooth_Muscle",
          "^Alveolar Fibroblast$" = "Alveolar_Fibroblasts",
          "^Capillary Aerocyte$" = "Endothelial_cells",
          "^Plasmacytoid Dendritic$" = "Dendritic_cells",
          "^Signalling Alveolar Epithelial$" = "Alveolar_Epithelial",
          "^Adventitial Fibroblast$" = "Adventitial_Fibroblasts",
          "^Signaling Alveolar_Epithelial$" = "Alveolar_Epithelial",
          "^Macrophage$" = "Macrophages",
          "^Differentiating Basal$" = "Basal",
          "^Airway Smooth Muscle$" = "Airway_Smooth_Muscle",
          "^Proximal Ciliated$" = "Ciliated"))

# #load in the human tumor cell from xenograft primary fro documentation
# sobj <- qs::qread("output/seurat_objects/comb_sobjs/xeno_prim_human.qs") %>%
#     subset(sample_name %in% c("S0170", "S0042"))

# #add a column with the cell type
# sobj$CellType <- "Tumor_cells"

# #save the object
# qs::qsave(sobj,
#           file = "input/downloads/human_tumor_fromxenograft.qs")

#load the object
human_tumor_cell <- qs::qread("input/downloads/human_tumor_fromxenograft.qs")

#mouse lung normal cells reference
mouse_lung_ref <- qs::qread("input/downloads/mouse_lung.qs")

mouse_lung_ref$CellType <-
            str_replace_all(mouse_lung_ref$CellType,
                            c("/" = "_",
                              "\\+" = "_plus",
                              "-" = "_"))

mouse_lung_ref$CellType <-
    str_replace_all(mouse_lung_ref$CellType,
                    c("^Col14a1_plus fibroblast$" = "Fibroblasts",
                      "^Col13a1_plus fibroblast$" = "Fibroblasts",
                      "^AT1$" = "Alveolar_Epithelial",
                      "^AT2 1$" = "Alveolar_Epithelial",
                      "^AT2 2$" = "Alveolar_Epithelial",
                      "^B cells$" = "B_cells",
                      "^Cap_a$" = "Capillary", #capillary endothelial
                      "^CD4$" = "CD4_Tcells",
                      "^CD4 T cell 2$" = "CD4_Tcells",
                      "^CD8$" = "CD8_Tcells",
                      "^CD8 T cell 2$" = "CD8_Tcells",
                      "^DC1$" = "Dendritic_cells",
                      "^DC2$" = "Dendritic_cells",
                      "^gd T cell$" = "Tgd_cells",
                      "^Tgd$" = "Tgd_cells",
                      "^Neut 1$" = "Neutrophils",
                      "^Neut 2$" = "Neutrophils",
                      "^NK cells$" = "NK_cells",
                      "^Pericyte 1$" = "Pericytes",
                      "^Pericyte 2$" = "Pericytes",
                      "^Mast Ba2$" = "Basophil_Mast",
                      "^Mono$" = "Monocytes",
                      "^Alv Mf$" = "Macrophages",
                      "^Int Mf$" = "Macrophages",
                      "^B cells$" = "B_cells",
                      "^AT$" = "Alveolar_Epithelial",
                      "^Endothelial cells$" = "Endothelial_cells",
                      "^SMC$" = "Smooth_muscle_cells",
                      "^ILC2$" = "Lymphoid_cells",
                      "^Dendritic cells$" = "Dendritic_cells",
                      "^AT$" = "Alveolar_Epithelial",
                      "^Cap$" = "Capillary",
                      "^Lymph$" = "Endothelial_Cells",
                      "^Art$" = "Endothelial_Cells"))

# #make a reference for all tumor cells, using cell culture data documantation
# mouse_tumor_cell <- 
#     qs::qread("output/seurat_objects/comb_sobjs/mm_prim.qs") %>%
#     subset(sample_name %in% c("S0200", "S0201"))

# #create a column with the cell type
# mouse_tumor_cell$CellType <- "Tumor_cells"

# #save the object
# qs::qsave(mouse_tumor_cell,
#           file = "input/downloads/mm_tumor_cellculture.qs")

#load the object S0200 and S0201 combined cell culture mouse tumor cells
mouse_tumor_cell <- qs::qread("input/downloads/mm_tumor_cellculture.qs")

```

## Function to annotate cell types with mouse and human lung
```{r annotate_function}
#| cache.vars = 'annotate_celltypes'
hpca <- celldex::HumanPrimaryCellAtlasData()
huim <- celldex::MonacoImmuneData()
ref4 <- SeuratObject::GetAssayData(human_tumor_cell)

hpca$label.main <-
            str_replace_all(hpca$label.main,
                            c("/" = "_",
                              "\\+" = "_plus",
                              "-" = "_"))
hpca$label.main <-
            stringr::str_replace_all(hpca$label.main,
                                     c("^T_cells$" = "T_cells",
                                       "^B_cell$" = "B_cells",
                                       "^NK_cell$" = "NK_cells",
                                       "^Monocyte$" = "Monocytes",
                                       "^DC$" = "Dendritic_cells",
                                       "^Pre_B_cell_CD34_$" = "B_cells",
                                       "^Pro_B_cell_CD34_plus$" = "B_cells",
                                       "^BM$" = "Bone_marrow",
                                       "^HSC_CD34_plus$" = "Hematopoietic_stem_cells",
                                       "^Pro_Myelocyte$" = "Myelocyte",
                                       "^MEP$" = "Progenitor_cells",
                                       "^GMP$" = "Progenitor_cells",
                                       "^CMP$" = "Progenitor_cells",
                                       "^BM & Prog.$" = "Bone_marrow",
                                       "^Macrophage$" = "Macrophages"))

huim$label.main <-
            str_replace_all(huim$label.main,
                            c("/" = "_",
                              "\\+" = "_plus",
                              "-" = "_"))
huim$label.main <- 
    stringr::str_replace_all(huim$label.main,
                                c("^B cells$" = "B_cells",
                                "^Dendritic cells$" = "Dendritic_cells",
                                "^NK cells$" = "NK_cells",
                                "^T cells$" = "T_cells",
                                "^CD8_plus T cells$" = "CD8_Tcells",
                                "^CD4_plus T cells$" = "CD4_Tcells",
                                "^Progenitors$" = "Progenitor_cells",
                                "^Macrophage$" = "Macrophages"))


mord <- celldex::MouseRNAseqData()
moim <- celldex::ImmGenData()
ref4 <- SeuratObject::GetAssayData(mouse_tumor_cell)
mord$label.main <-
    stringr::str_replace_all(mord$label.main,
                            c("^T cells$" = "T_cells",
                                "^B cells$" = "B_cells",
                                "^NK cells$" = "NK_cells",
                                "^Epithelial cells$" = "Epithelial_cells",
                                "^Dendritic cells$" = "Dendritic_cells",
                                "^Endothelial cells$" = "Endothelial_cells",
                                "^Progenitors$" = "Progenitor_cells"))
moim$label.main <-
    stringr::str_replace_all(moim$label.main,
                            c("^B cells, pro$" = "B_cells",
                            "^DC$" = "Dendritic_cells",
                            "^NK cells$" = "NK_cells",
                            "^T cells$" = "T_cells",
                            "^Epithelial cells$" = "Epithelial_cells",
                            "^Endothelial cells$" = "Endothelial_cells",
                            "^B cells$" = "B_cells",
                            "^Stem cells$" = "Stem_cells",
                            "^Stromal cells$" = "Stromal_cells",
                            "^Mast cells$" = "Mast_cells",
                            "^NKT$" = "NKT_cells",
                            "^Tgd$" = "Tgd_cells",
                            "^ILC$" = "Lymphoid_cells"))

#function to annotate celltypes
annotate_celltypes <- function(sobject,
                               species = "",
                               with_tumor = FALSE,
                               ref,
                               labels,
                               aggr_ref = FALSE,
                               label_type = "label.main",
                               ...) {
    if (grepl("human", species)) {
        ref <- list(hpca,
                    huim)
        labels <- list(hpca[[label_type]],
                       huim[[label_type]])
        if (with_tumor == TRUE) {
            ref <- list(hpca,
                        huim,
                        SeuratObject::GetAssayData(human_tumor_cell))
            labels <- list(hpca[[label_type]],
                           huim[[label_type]],
                           human_tumor_cell$CellType)
        }
        if (species == "human_lung") {
            ref <- list(hpca,
                        huim,
                        SeuratObject::GetAssayData(human_lung_ref))
            labels <- list(hpca[[label_type]],
                           huim[[label_type]],
                           human_lung_ref$free_annotation)
        }
        if (species == "human_lung" && with_tumor == TRUE) {
            ref <- list(hpca,
                        huim,
                        SeuratObject::GetAssayData(human_tumor_cell),
                        SeuratObject::GetAssayData(human_lung_ref))
            labels <- list(hpca[[label_type]],
                           huim[[label_type]],
                           human_tumor_cell$CellType,
                           human_lung_ref$free_annotation)
        }
    } else if (grepl("mouse", species)) {
        ref <- list(mord,
                    moim)
        labels <- list(mord[[label_type]],
                       moim[[label_type]])
        if (with_tumor == TRUE) {
            ref <- list(mord,
                        moim,
                        SeuratObject::GetAssayData(mouse_tumor_cell))
            labels <- list(mord[[label_type]],
                           moim[[label_type]],
                           mouse_tumor_cell$CellType)
        }
        if (species == "mouse_lung") {
            ref <- list(mord,
                        moim,
                        SeuratObject::GetAssayData(mouse_lung_ref))
            labels <- list(mord[[label_type]],
                           moim[[label_type]],
                           mouse_lung_ref$CellType)
        }
        if (species == "mouse_lung" && with_tumor == TRUE) {
            ref <- list(mord,
                        moim,
                        SeuratObject::GetAssayData(mouse_tumor_cell),
                        SeuratObject::GetAssayData(mouse_lung_ref))
            labels <- list(mord[[label_type]],
                           moim[[label_type]],
                           mouse_tumor_cell$CellType,
                           mouse_lung_ref$CellType)
        }
    }
    annotation <-
        SingleR::SingleR(test = Seurat::as.SingleCellExperiment(sobject),
                         ref = ref,
                         labels = labels,
                         aggr.ref = aggr_ref,
                         ...)
    sobject$annotations <- annotation$labels
    sobject$cell_scores <-
        apply(X = annotation$scores,
              MARGIN = 1,
              function(x) max(x, na.rm = TRUE))
    return(sobject)
}

```

## RUN differential expression analysis on a Seurat object
```{r run_degs_function}
#| cache.vars: all_samples_csv
all_samples_csv <- read_tsv("misc/allsample_details.txt",
                            show_col_types = FALSE)

#| cache.vars = 'run_degs'
run_degs <- function(sobject,
                     group_by = "",
                     prefix = "") {

    degs_output <- list()

    pseudobulk <- sobject %>%
        Seurat::AggregateExpression(group.by = c("sample_name", "seurat_clusters"),
                                    slot = "counts",
                                    assay = "RNA")
    pseudobulk <- pseudobulk[[1]]

    # run the deseq2
    for (cluster_no in unique(object$seurat_clusters)) {

        batch_df <- data.frame(sample_name = colnames(pseudobulk))

        batch_df_new <-
            tibble(col_label = colnames(pseudobulk),
                   sample_name = colnames(pseudobulk) %>%
                   str_remove("_[0-9]+$"),
                   cluster_no = str_remove(colnames(pseudobulk), ".+_")) %>%
            left_join(batch_df) %>%
            mutate(sample_name = str_replace_all(sample_name, "-", "_")) %>%
            mutate(organism = sobject$organism[1])

        #add the datasource and method as batch in batch_df_new from all_samples_csv for each sample_name
        new_all_samples_csv <- all_samples_csv %>%
            select(sample_name, method, data_source, model, location, organism)
        if (sobject$organism[1] == "mouse") {
            batch_df_new2 <- left_join(batch_df_new,
                                    new_all_samples_csv,
                                    by = c("sample_name", "organism")) %>%
                select(-sample_name, -method, -location, -data_source, -organism)
        } else {
            batch_df_new2 <- left_join(batch_df_new,
                                    new_all_samples_csv,
                                    by = c("sample_name", "organism")) %>%
                select(-sample_name, -method,-location, -model, -organism)
        }

        all(colnames(pseudobulk) == batch_df_new$col_label)

        batch_df_new2$group <- "other"
        batch_df_new2$group[batch_df_new2$cluster_no == cluster_no] <- "target"
        batch_df_new2$group <- factor(batch_df_new2$group)

        for (columns in colnames(batch_df_new2)) {
            if (unique(batch_df_new2[[columns]]) %>% length() == 1) {
                batch_df_new2[[columns]] <- NULL
            }
        }
        design <- as.formula(paste0("~", paste(colnames(batch_df_new2)[c(-1,-2)], collapse = " + ")))

        degs_output[[cluster_no]] <-
            DESeq2::DESeqDataSetFromMatrix(countData = pseudobulk + 1,
                                           colData = batch_df_new2,
                                           design = design) %>%
            DESeq2::DESeq() %>%
            DESeq2::results() %>%
            as.data.frame() %>%
            dplyr::arrange(desc(log2FoldChange)) %>%
            tibble::rownames_to_column("gene") %>%
            na.omit()
    }
    return(degs_output)
}
```

## Function to run GSEA
```{r gsea_function}
#| cache.vars = 'run_gsea'
run_gsea <- function(degs_result,
                     category = "",
                     subcategory = "",
                     species = "") {
    gsea_ref <- msigdbr::msigdbr(species = species,
                                 category = category,
                                 subcategory = subcategory) %>%
        split(x = .$gene_symbol, f = .$gs_name)

    gsea_output <- list()
    for (item in names(degs_result)) {
        gsea_input <- as.vector(degs_result[[item]]$log2FoldChange)
        names(gsea_input) <- degs_result[[item]]$gene

        output <- fgsea::fgseaMultilevel(gsea_ref,
                                         gsea_input,
                                         minSize = 10,
                                         maxSize = 500,
                                         nPermSimple = 10000)
        gsea_output[[item]] <-
            output %>%
            dplyr::arrange(desc(NES)) %>%
            filter(padj < 0.05) %>%
            na.omit()
    }
    return(gsea_output)
}
```

# GSEA Plots function for twoway dotplot and barplot
```{r}
#| cache.vars = c('gsea_dotplot', 'gsea_barplot')
gsea_dotplot <- function(data, x_col = "z_score") {
    lab4plot <-
        tibble(y = c(-2.5, 2.5),
               x = c(0.2, 0.2),
               label = c("Downregulated", "Upregulated"))

    plot_name <-
        ggplot() +
        geom_point(data = data,
                 aes(x = -1 * order,
                     y = get(x_col),
                     color = -log10(padj),
                     size = size),
                 stat = "identity",
                 alpha = 0.8) +
        coord_flip() +
        geom_text(data = data,                #text for pathways names
                    aes(x = -1 * order,
                        y = get(x_col) + (y_pos *5),
                        hjust = justify_y,
                        label = pathway),
                        size = 2,
                        fontface = "bold") +
        geom_text(data = lab4plot,    #text for upregulated/downregulated
                  aes(x = x,
                      y = y,
                      label = label),
                  fontface = "bold",
                  size = 2.5) +
        scale_fill_manual(values = plot_cols,
                          name = paste0(x_col, " > 0")) +
        theme(strip.background = element_rect(color = "white",
                                              fill = "white"),
              #legend.position = "none",
              panel.grid.major = element_blank(),
              panel.grid.minor = element_blank(),
              panel.border = element_blank(),
              axis.line.x = element_line(color = "black"),
              axis.line.y = element_blank(),
              axis.title.x = element_text(size = 7),
              axis.ticks.y = element_blank(),
              plot.title = element_text(size = 7, face = "bold"),
              axis.text.y = element_blank(),
              axis.text.x = element_text(size = 7),
              legend.title = element_text(size = 7,
                                          face = "bold")) +
        labs(title = data$sample[1],
             y = "NES",
             x = "") +
        theme(plot.title = element_text(hjust = 0.5)) +
        ylim(-6, 6) +
        scale_color_gradient(low = plot_cols[2],
                             high =plot_cols[1])

    return(plot_name)
}


gsea_barplot <- function(data, x_col = "z_score") {
    lab4plot <-
        tibble(y = c(-3, 3),
               x = c(0.2, 0.2),
               label = c("Downregulated", "Upregulated"))

    plot_name <-
        ggplot() +
        geom_bar(data = data,
                 aes(x = -1 * order,
                     y = get(x_col),
                     fill = get(x_col) > 0),
                 stat = "identity",
                 alpha = 0.8) +
        coord_flip() +
        geom_hline(yintercept = 0,
                    color = "black",
                    linewidth = 0.5) +
        geom_text(data = data,                #text for pathways names
                    aes(x = -1 * order,
                        y = y_pos,
                        hjust = justify_y,
                        label = pathway),
                        size = 2,
                        fontface = "bold") +
        geom_text(data = lab4plot,    #text for upregulated/downregulated
                  aes(x = x,
                      y = y,
                      label = label),
                  fontface = "bold",
                  size = 2.5) +
        scale_fill_manual(values = plot_cols,
                          name = paste0(x_col, " > 0")) +
        theme(strip.background = element_rect(color = "white",
                                              fill = "white"),
              panel.grid.major = element_blank(),
              panel.grid.minor = element_blank(),
              panel.border = element_blank(),
              axis.line.x = element_line(color = "black"),
              axis.line.y = element_blank(),
              axis.title.x = element_text(size = 7),
              axis.ticks.y = element_blank(),
              plot.title = element_text(size = 7, face = "bold"),
              axis.text.y = element_blank(),
              axis.text.x = element_text(size = 7),
              legend.title = element_text(size = 7,
                                          face = "bold")) +
        labs(title = data$sample[1],
             y = "NES",
             x = "") +
        theme(plot.title = element_text(hjust = 0.5)) +
        ylim(-6, 6)

    return(plot_name)
}
```

