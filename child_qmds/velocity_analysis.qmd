We are interested in how cell types and states in each sample change are evolving based on splicing dynamics. For this purpose will perform velocity analysis.

## New velocity analysis function

I realized that I should have just created individual loom files for the filtered_feature matrices, that way I can subset by any barcodes that I want. So i'm going to rewrite the r_make_loom_files function.

Input is a table with the following column names:
    -sample_id
    -h5_path
    -bam_path
    -species

```{r}
source("new_make_loom_files.r")
velo_input <- read.table("misc/allsample_details.txt",
                         header = TRUE) %>%
    dplyr::select(sample_id = sample_name,
                  species,
                  data_source) %>%
    mutate(data_path = paste0(
            recode(data_source,
                   "GEO" = "/home/gdrobertslab/lab/Counts_2/",
                    "NCH" = "/home/gdrobertslab/lab/Counts_2/",
                    "SJ" = "/home/gdrobertslab/lab/ExternalData/Patel_lab/",
                    "NCI_POB" = "/home/gdrobertslab/lab/ExternalData/McEachron_lab/"))) %>%
    unique()
rownames(velo_input) <- NULL

h5s <- ifelse(velo_input$data_source == "NCI_POB",
                             paste0(velo_input$data_path,
                                    "03_FilteredMatricesH5/",
                                    velo_input$sample_id,
                                    "_filtered_feature_bc_matrix.h5"),
                             paste0(velo_input$data_path,
                                    velo_input$sample_id,
                                    "/filtered_feature_bc_matrix.h5"))

velo_input$h5_path <- h5s

ext_data_path <- "/home/gdrobertslab/lab/ExternalData/"

bams <-
    ifelse(
           velo_input$data_source %in% c("NCH", "GEO"),
           paste0("/home/gdrobertslab/lab/Counts_2/",
                  velo_input$sample_id,
                  "/possorted_genome_bam.bam"),
           ifelse(
                  velo_input$data_source == "NCI_POB",
                  paste0(ext_data_path,
                         "McEachron_lab/BAMs/",
                         velo_input$sample_id,
                         "_gex_possorted_bam.bam"),
                  paste0(ext_data_path,
                         "Patel_lab/",
                         velo_input$sample_id,
                         "/possorted_genome_bam.bam")
                         )
                         )

#bams from multiomic runs have different names
bams <- ifelse(file.exists(bams),
                   bams,
                   gsub("possorted_genome", "gex_possorted", bams))

velo_input$bam_path <- bams


#rewrite species to match list in make loom function
unique(velo_input$species)
velo_input$species <- recode(velo_input$species,
       "patient" = "human",
       "xenograft" = "mixed",
       "mousemodel" = "mouse")


head(velo_input)
source("new_make_loom_files.r")
#new_function is new_make_loom_files
#install my version of rrrSingleCellUtils
# devtools::install("/home/gdrobertslab/lab/Analysis/MattGust/projects/rrrSingleCellUtils")

new_make_loom_files(input_table = velo_input,
                    out_dir = "loom_output/samples",
                    cluster_account = "gdrobertslab")
```

## Write off Metadata for Velocity Analysis

In order to analyze the data, we need to save a table of cell-level metadata, including barcodes, seurat clusters, and annotations.

First we need to read in our objects for this. The most up to date object seems to change frequently, but as of 2/19 at 3:15 pm i'm using the ojbects in tumor_vs_stroma.

```{r}
obj_names <- c("mm_mets_normal_cells",
               "mm_mets_cancer_cells",
               "mm_prim_normal_cells",
               "mm_prim_cancer_cells",
               "patient_mets_cancer_cells_fdl",
               "patient_prim_cancer_cells_fdl")

obj_list <- list()
for (ob_name in obj_names) {
    obj_list[[ob_name]] <-
        qs::qread(paste0("/home/gdrobertslab/lab/Analysis/Yogesh/CellTypeAnnRefs/output/seurat_objects/tumor_vs_stroma/", ob_name, ".qs"))
}
```

```{r write-off-md}
lapply(names(obj_list), function(obj_name) {
    write_off_md(sobj = obj_list[[obj_name]],
                 id_col = "sample_name",
                 output_dir = paste0("loom_output/metadata",
                                     obj_name),
                 vars_to_keep = c("sample_name",
                                  "seurat_clusters",
                                  "Ann_level1",
                                  "Ann_level2",
                                  "Ann_level3"))
})
```

## Analyze .loom Files

First I need to activate my conda environment. I set `eval = FALSE` because the environment path will change based on who is rendering this file.

```{bash activate-env, eval = FALSE}
conda activate /home/gdrobertslab/mjg015/R/x86_64-pc-linux-gnu-library/4.3/rrrSingleCellUtils/r_rna_velo
```

Next I need to import my conda libraries.

```{python load-py-libs}
import anndata
import scvelo as scv
import pandas as pd
import numpy as np
import matplotlib as plt
import scanpy as sc
import os
import re
```

### mm_mets_cancer_cells

```{python analyze-mm-mets-cancer-cells}
#get names of loom files
merged_ad = loom_to_an(loom_path = "loom_output/mm_mets_cancer_cells/loom_files",
                       metadata_path = "loom_output/mm_mets_cancer_cells/metadata")
```

### patient_mets_normal_cells

We're also interested in how the normal cells in our patient met samples are behaving, particularly the macrophages. We're gonna write off some metadata for the objects to be able to reconstruct it in python.

```{r macrophage-metadata}
patient_mets_normal_cells <- obj_list[["patient_mets_normal_cells"]]

patient_mets_myeloid <- subset(patient_mets_normal_cells,
                               Ann_level1 %in% c("Immune_Myeloid",
                                                 "Interstitial macrophages")) %>%
    process_seurat()

patient_mets_myeloid <- run_fdl(patient_mets_myeloid)

write_off_md(sobj = patient_mets_myeloid,
             id_col = "sample_name",
             output_dir = "loom_output/patient_mets_normal_cells/macs",
             vars_to_keep = c("sample_name",
                                  "seurat_clusters",
                                  "Ann_level1",
                                  "Ann_level2",
                                  "Ann_level3",
                                  "Phase"),
             handle_n_of_1 = FALSE)
```

## Cancer Cells

First we'll examine the different cancer cell datasets.

We're gonna look at cancer cells first.

```{python make-cancer-obs-and-plts}
ob_names = ["mm_mets_cancer_cells",
            "mm_prim_cancer_cells",
            "patient_mets_cancer_cells",
            "patient_prim_cancer_cells",
            "patient_mets_normal_cells",
            "xeno_mets_human",
            "xeno_prim_human"]
ob_list = []
for ob_name in ob_names:
    loom_path = "loom_output/" + ob_name + "/loom_files"
    md_path = "loom_output/" + ob_name + "/metadata"
    ob = loom_to_an(loom_path,
                    md_path)
    calc_velo(ob)
    save_velo_plots(ob, ob_name = ob_name)
    ob_list.append(ob)


```

### mm_mets_cancer_cells

```{r load-plots-mm-mets-cancer, cache=FALSE}
plt_paths <- paste0("figures/",
                    list.files("figures")[grep("mm_mets_cancer_cells",
                                               list.files("figures"))]) %>%
    as.list()

plts <- lapply(plt_paths, function(x) {
    tmp <- magick::image_read(x)
    tmp_gg <- magick::image_ggplot(tmp)
    return(tmp_gg)
    })

names(plts) <- str_remove(plt_paths,
                          pattern = "figures/scvelo_mm_mets_cancer_cells_") %>%
    str_remove(pattern = ".png")
```

```{r mm_mets_cancer_cells_tabs, results = "asis", cache=FALSE}
qreport::maketabs(plts)
```

### mm_prim_cancer_cells

```{r load-plots-mm-prim-cancer, cache=FALSE}
plt_paths <- paste0("figures/",
                    list.files("figures")[grep("mm_prim_cancer_cells",
                                               list.files("figures"))]) %>%
    as.list()

plts <- lapply(plt_paths, function(x) {
    tmp <- magick::image_read(x)
    tmp_gg <- magick::image_ggplot(tmp)
    return(tmp_gg)
}
)
names(plts) <- str_remove(plt_paths,
                          pattern = "figures/scvelo_mm_prim_cancer_cells_") %>%
    str_remove(pattern = ".png")
```

```{r mm_prim_cancer_cells_tabs, results = "asis", cache=FALSE}
qreport::maketabs(plts)
```


### patient_mets_cancer_cells
```{r load-plots-patient-mets-cancer, cache=FALSE}
plt_paths <- paste0("figures/",
                    list.files("figures")[grep("patient_mets_cancer_cells",
                                               list.files("figures"))]) %>%
    as.list()

plts <- lapply(plt_paths, function(x) {
    tmp <- magick::image_read(x)
    tmp_gg <- magick::image_ggplot(tmp)
    return(tmp_gg)
}
)
names(plts) <- str_remove(plt_paths,
                          pattern = "figures/scvelo_patient_mets_cancer_cells_") %>%
    str_remove(pattern = ".png")
```

```{r patient_mets_cancer_tabs, results = "asis", cache=FALSE}
qreport::maketabs(plts)
```

### patient_prim_cancer_cells

```{r load-plots-patient-prim-cancer, cache=FALSE}
plt_paths <- paste0("figures/",
                    list.files("figures")[grep("patient_prim_cancer_cells",
                                               list.files("figures"))]) %>%
    as.list()

plts <- lapply(plt_paths, function(x) {
    tmp <- magick::image_read(x)
    tmp_gg <- magick::image_ggplot(tmp)
    return(tmp_gg)
}
)
names(plts) <- str_remove(plt_paths,
                          pattern = "figures/scvelo_patient_prim_cancer_cells_") %>%
    str_remove(pattern = ".png")
```

```{r patient_prim_cancer_tabs, results = "asis", cache=FALSE}
qreport::maketabs(plts)
```

### xeno_mets_human

```{r xeno-mets-human}
plt_paths <- paste0("figures/",
                    list.files("figures")[grep("xeno_mets_human",
                                               list.files("figures"))]) %>%
    as.list()

plts <- lapply(plt_paths, function(x) {
    tmp <- magick::image_read(x)
    tmp_gg <- magick::image_ggplot(tmp)
    return(tmp_gg)
}
)
    
names(plts) <- str_remove(plt_paths,
                          pattern = "figures/scvelo_xeno_mets_human_") %>%
    str_remove(pattern = ".png")
```

```{r xeno_mets_human_tabs, results="asis"}
qreport::maketabs(plts)
```

### xeno_prim_human

```{r xeno-prim-human}
plt_paths <- paste0("figures/",
                    list.files("figures")[grep("xeno_prim_human",
                                               list.files("figures"))]) %>%
    as.list()

plts <- lapply(plt_paths, function(x) {
    tmp <- magick::image_read(x)
    tmp_gg <- magick::image_ggplot(tmp)
    return(tmp_gg)
}
)
    
names(plts) <- str_remove(plt_paths,
                          pattern = "figures/scvelo_xeno_prim_human_") %>%
    str_remove(pattern = ".png")
```

```{r xeno_mets_human_tabs, results="asis"}
qreport::maketabs(plts)
```

## Normal Cells

### patient_mets_normal_cells

```{python patient-mets-normal}
ob_name = "patient_mets_normal_cells"
patient_mets_normal_cells = loom_to_an(loom_path= "loom_output/patient_mets_normal_cells/loom_files", metadata_path="loom_output/patient_mets_normal_cells/metadata")
calc_velo(patient_mets_normal_cells)


scv.tl.velocity_graph(patient_mets_normal_cells, backend = "threading")
plotdict = {
    "umap_ann1": ["umap", "Ann_level1"],
    "umap_ann2": ["umap", "Ann_level2"],
    "fdl_ann1": ["fdl", "Ann_level1"],
    "fdl_ann2": ["fdl", "Ann_level2"]
}
for plt_name, plt_type in plotdict.items():
    file_end = ob_name + "_" + plt_name + ".png"
    scv.pl.velocity_embedding_stream(patient_mets_normal_cells,
                                     basis = plt_type[0],
                                     color = plt_type[1],
                                     show = False,
                                     save = file_end)
file_end = ob_name + "_embedding.png"
scv.pl.velocity_embedding(patient_mets_normal_cells,
                          basis = "umap",
                          color = "seurat_clusters",
                          show = False,
                          save = file_end)
```


```{r load-plts-patient-mets-normal, cache=FALSE}
plts <- get_plot_list("patient_mets_normal_cells")
```

```{r patient-mets-normal-tabset, results="asis", cache=FALSE}
qreport::maketabs(plts)
```

#### MACtion

The macrophages are always a mess, so naturally we are interested in them. To do so I'm going to drill down further into the "Immune_Myeloid" group of Ann_level1.

```{python load-patient-mets-myeloid, cache=FALSE}

myeloid=loom_to_an(loom_path="loom_output/patient_mets_normal_cells/loom_files",
                metadata_path="loom_output/patient_mets_normal_cells/macs")

calc_velo(myeloid)
scv.tl.velocity_graph(myeloid, backend = "threading")
#going to use same plotdict as patient_mets_normal chunk
ob_name = "patient_mets_myeloid"
plotdict = {
    "umap_ann2": ["umap", "Ann_level2"],
    "umap_ann3": ["umap", "Ann_level3"],
    "fdl_ann2": ["fdl", "Ann_level2"],
    "fdl_ann3": ["fdl", "Ann_level3"]
}
for plt_name, plt_type in plotdict.items():
    file_end = ob_name + "_" + plt_name + ".png"
    scv.pl.velocity_embedding_stream(myeloid,
                                     basis = plt_type[0],
                                     color = plt_type[1],
                                     show = False,
                                     save = file_end)
file_end = ob_name + "_embedding.png"
scv.pl.velocity_embedding(myeloid,
                          basis = "umap",
                          color = "seurat_clusters",
                          show = False,
                          save = file_end)
```

```{r load-patient-mets-myeloid-plts, cache=FALSE}
plts_new <- get_plot_list("patient_mets_myeloid")
names(plts_new)
```

```{r patient-mets-myeloid-tabset, results="asis", cache=FALSE}
qreport::maketabs(plts_new)
```