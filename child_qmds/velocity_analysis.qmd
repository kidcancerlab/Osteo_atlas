We are interested in how cell types and states in each sample change are evolving based on splicing dynamics. For this purpose will perform velocity analysis.

## New velocity analysis function

I realized that I should have just created individual loom files for the filtered_feature matrices, that way I can subset by any barcodes that I want. So i'm going to rewrite the r_make_loom_files function.

Input is a table with the following column names:
    -sample_id
    -h5_path
    -bam_path
    -species

```{r}
velo_input <- read.table("misc/allsample_details.txt",
                         header = TRUE) %>%
    dplyr::select(sample_id = sample_name,
                  species,
                  data_source) %>%
    mutate(data_path = paste0(
            recode(data_source,
                   "GEO" = "/home/gdrobertslab/lab/Counts_2/",
                    "NCH" = "/home/gdrobertslab/lab/Counts_2/",
                    "SJ" = "/home/gdrobertslab/lab/ExternalData/Patel_lab/",
                    "NCI_POB" = "/home/gdrobertslab/lab/ExternalData/McEachron_lab/"))) %>%
    unique()
rownames(velo_input) <- NULL

h5s <- ifelse(velo_input$data_source == "NCI_POB",
                             paste0(velo_input$data_path,
                                    "03_FilteredMatricesH5/",
                                    velo_input$sample_id,
                                    "_filtered_feature_bc_matrix.h5"),
                             paste0(velo_input$data_path,
                                    velo_input$sample_id,
                                    "/filtered_feature_bc_matrix.h5"))

velo_input$h5_path <- h5s

ext_data_path <- "/home/gdrobertslab/lab/ExternalData/"

bams <-
    ifelse(
           velo_input$data_source %in% c("NCH", "GEO"),
           paste0("/home/gdrobertslab/lab/Counts_2/",
                  velo_input$sample_id,
                  "/possorted_genome_bam.bam"),
           ifelse(
                  velo_input$data_source == "NCI_POB",
                  paste0(ext_data_path,
                         "McEachron_lab/BAMs/",
                         velo_input$sample_id,
                         "_gex_possorted_bam.bam"),
                  paste0(ext_data_path,
                         "Patel_lab/",
                         velo_input$sample_id,
                         "/possorted_genome_bam.bam")
                         )
                         )

#bams from multiomic runs have different names
bams <- ifelse(file.exists(bams),
                   bams,
                   gsub("possorted_genome", "gex_possorted", bams))

velo_input$bam_path <- bams


#rewrite species to match list in make loom function
unique(velo_input$species)
velo_input$species <- recode(velo_input$species,
       "patient" = "human",
       "xenograft" = "mixed",
       "mousemodel" = "mouse")

#new_function is new_make_loom_files
#install my version of rrrSingleCellUtils
# devtools::install("/home/gdrobertslab/lab/Analysis/MattGust/projects/rrrSingleCellUtils")

new_make_loom_files(input_table = velo_input,
                    out_dir = "loom_output/samples",
                    cluster_account = "gdrobertslab")
```

## Write off Metadata for Velocity Analysis

In order to analyze the data, we need to save a table of cell-level metadata, including barcodes, seurat clusters, and annotations.

First we need to read in our objects for this. The most up to date object seems to change frequently, but as of 2/19 at 3:15 pm i'm using the ojbects in tumor_vs_stroma.

```{r}
obj_names <- c("mm_mets_normal_cells",
               "mm_mets_cancer_cells",
               "mm_prim_normal_cells",
               "mm_prim_cancer_cells",
               "patient_mets_cancer_cells_fdl",
               "patient_prim_cancer_cells_fdl")

obj_list <- list()
for (ob_name in obj_names) {
    obj_list[[ob_name]] <-
        qs::qread(paste0("/home/gdrobertslab/lab/Analysis/Yogesh/CellTypeAnnRefs/output/seurat_objects/tumor_vs_stroma/", ob_name, ".qs"))
}
```

```{r write-off-md}
lapply(names(obj_list), function(obj_name) {
    write_off_md(sobj = obj_list[[obj_name]],
                 id_col = "sample_name",
                 output_dir = paste0("loom_output/metadata/",
                                     obj_name),
                 vars_to_keep = c("sample_name",
                                  "seurat_clusters",
                                  "Ann_level1",
                                  "Ann_level2",
                                  "Ann_level3"))
})
```

## Analyze .loom Files

First I need to activate my conda environment. I set `eval = FALSE` because the environment path will change based on who is rendering this file.

```{bash activate-env, eval = FALSE}
conda activate /home/gdrobertslab/mjg015/R/x86_64-pc-linux-gnu-library/4.3/rrrSingleCellUtils/r_rna_velo
```

Next I need to import my conda libraries.

```{python load-py-libs}
import anndata
import scvelo as scv
import pandas as pd
import numpy as np
import matplotlib as plt
import scanpy as sc
import os
import re
```

### mm_mets_cancer_cells

```{python analyze-mm-mets-cancer-cells}
#get names of loom files
merged_ad = loom_to_an(obj_name = "mm_mets_cancer_cells",
                       loom_dir = "loom_output/samples",
                       metadata_dir = "loom_output/metadata/")

ob_names = os.listdir("loom_output/metadata")
for ob in ob_names:
    merged_ad = loom_to_an(obj_name = ob,
                           loom_dir = "loom_output/samples",
                           metadata_dir = "loom_output/metadata")
    calc_velo(merged_ad)
    #save anndata object so you don't have to remake them
    merged_ad.write(filename = "loom_output/anndata/" + ob + ".ad")

    scv.tl.velocity_graph(merged_ad, backend = "threading")

    #create plots
    scv.pl.velocity_embedding_stream(merged_ad, basis = "umap", color = "seurat_clusters", show = False, save = ob + "_umap_clusters", dpi = 300)

    #optionally create fdl plot
    if len(merged_ad.obsm["X_fdl"]) == 2:
        scv.pl.velocity_embedding_stream(merged_ad, basis = "fdl", color = "seurat_clusters", show = False, save = ob + "_fdl_clusters", dpi = 300)
```