We are interested in how cell types and states in each sample change are evolving based on splicing dynamics. For this purpose will perform velocity analysis.

## Get .bam Files for Velocity Analysis

Since we have external data for this project not all .bam files are in the same location. As a result, we will have to conditionally create bam paths.

```{r get-bam-paths}
#making a list of bam paths, where each entry corresponds to an object and is a
#vector of all bams associated with that object

bam_list <- list()
obj_list <- qs::qread("output/matt_obj_list.qs")
obj_names <- names(obj_list)

for (obj in obj_names) {
    tmp_ob <- obj_list[[obj]] #nolint

    obj_list[[obj]] <- tmp_ob

    #get table of sample_names and the data source
    s_ids <- table("sample_name" = tmp_ob$sample_name,
                   "data_source" = tmp_ob$data_source) %>%
        as.data.frame() %>%
        subset(., Freq > 0) %>%
        select(1:2)

    ext_data_path <- "/home/gdrobertslab/lab/ExternalData/"

    bams <-
        ifelse(
               s_ids$data_source %in% c("NCH", "GEO"),
               paste0("/home/gdrobertslab/lab/Counts_2/",
                      s_ids$sample_name,
                      "/possorted_genome_bam.bam"),
               ifelse(
                      s_ids$data_source == "NCI_POB",
                      paste0(ext_data_path,
                             "McEachron_lab/BAMs/",
                             s_ids$sample_name,
                             "_gex_possorted_bam.bam"),
                      paste0(ext_data_path,
                             "Patel_lab/",
                             s_ids$sample_name,
                             "/possorted_genome_bam.bam")
                             )
                             )
    
    #fix paths for atac runs since bams have gex_ before possorted
    bams <- ifelse(file.exists(bams),
                   bams,
                   gsub("possorted_genome", "gex_possorted", bams))
    names(bams) <- s_ids$sample_name

    bam_list[[obj]] <- bams
}

#saving this list so that changing assignments won't mess up my analysis
qs::qsave(obj_list, "output/matt_obj_list.qs")

lapply(bam_list, file.exists)
```

## Make Loom Files

Now that we have our bams associated with each object we can make our loom files.

```{r make-loom-files}
lapply(names(obj_list), function(ob_name) {
    ob <- obj_list[[ob_name]]
    r_make_loom_files(sobj = ob,
                      id_col = "sample_name",
                      out_dir = "loom_output",
                      species = unique(ob$organism),
                      bam_paths = bam_list[[ob_name]],
                      cluster_account = "gdrobertslab",
                      slurm_base = "output/velocity_analysis/slurmOut",
                      sbatch_base = "output/velocity_analysis/sbatch_",
                      sobj_name = ob_name
                      )
    }
)
```

### Figure out Which Samples Failed

Not all samples had loom files successfully created, so I'm going to identify these and rerun `r_make_loom_files`.

Some more remained after this, so I'm running once more before digging deeper into this issue

```{r re-make-looms}
obj_list <- qs::qread("output/matt_obj_list.qs")

failed_runs <- lapply(names(obj_list), function(ob_name) {
    sids <- obj_list[[ob_name]]$sample_name %>% unique()
    failed <- sids[!file.exists(paste0("loom_output/",
                       ob_name,
                       "/loom_files/",
                       sids,
                       ".loom"))]
    if (length(failed) > 0) return(failed)
})
names(failed_runs) <- names(obj_list)

non_null <- list()
for (id in names(failed_runs)) {
    if (!is.null(failed_runs[[id]])) non_null[[id]] <- failed_runs[[id]]
}

lapply(names(non_null), function(ob_name) {
    ob <- obj_list[[ob_name]] %>%
        subset(sample_name %in% non_null[[ob_name]])
    r_make_loom_files(sobj = ob,
                      id_col = "sample_name",
                      out_dir = "loom_output",
                      species = unique(ob$organism),
                      bam_paths = bam_list[[ob_name]],
                      cluster_account = "gdrobertslab",
                      slurm_base = "output/velocity_analysis/slurmOut",
                      sbatch_base = "output/velocity_analysis/sbatch_",
                      sobj_name = ob_name)
})
```

## Add Metadata Columns to Objects

### Re-cluster

I realized that my seurat clusters are different from Yogesh's because I'm not using the same resultion as him for clustering. So I'm going to recreate these clusters using his resolutions.

```{r re-run-clustering-velo}
res_list <-
    list("patient_prim_cancer_cells" = 0.1,
         "patient_mets_cancer_cells" = 0.1,
         "mm_prim_cancer_cells" = 0.3,
         "mm_mets_cancer_cells" = 0.3,
         "xeno_prim_human" = 0.15,
         "xeno_mets_human" = 0.1,
         "patient_prim_normal_cells" = 0.15,
         "patient_mets_normal_cells" = 0.05,
         "xeno_prim_mouse" = 0.1,
         "xeno_mets_mouse" = 0.1,
         "mm_prim_normal_cells" = 0.25,
         "mm_mets_normal_cells" = 0.2)

ob_names <- names(obj_list)
obj_list <- lapply(ob_names, function(ob_name) {
    process_seurat(obj_list[[ob_name]], resolution = res_list[[ob_name]])
})
names(obj_list) <- ob_names
```

### Cell Cycle

I'm going to add cell cycle phases as a metadata feature to ensure that cell cycle effects aren't contributing to RNA velocity.

```{r add-cc}
obj_list <- lapply(obj_list, function(x) {
    CellCycleScoring(x,
                     s.features = cc.genes$s.genes,
                     g2m.features = cc.genes$g2m.genes)
})
```

### FDL

```{r add-fdl}
obj_list <- lapply(obj_list, run_fdl)
qs::qsave(obj_list, "output/matt_obj_list.qs")
```

## Write off Metadata for Velocity Analysis

```{r write-off-md}
lapply(names(obj_list), function(obj_name) {
    write_off_md(sobj = obj_list[[obj_name]],
                 id_col = "sample_name",
                 output_dir = paste0("loom_output/",
                                     obj_name,
                                     "/metadata"),
                 vars_to_keep = c("sample_name",
                                  "seurat_clusters",
                                  "Ann_level1",
                                  "Ann_level2",
                                  "Ann_level3",
                                  "Phase"))
})
```

## Analyze .loom Files

First I need to activate my conda environment. I set `eval = FALSE` because the environment path will change based on who is rendering this file.

```{bash activate-env, eval = FALSE}
conda activate /home/gdrobertslab/mjg015/R/x86_64-pc-linux-gnu-library/4.3/rrrSingleCellUtils/r_rna_velo
```

Next I need to import my conda libraries.

```{python load-py-libs}
import anndata
import scvelo as scv
import pandas as pd
import numpy as np
import matplotlib as plt
import scanpy as sc
import os
import re
```

### mm_mets_cancer_cells

```{python analyze-mm-mets-cancer-cells}
#get names of loom files
merged_ad = loom_to_an(loom_path = "loom_output/mm_mets_cancer_cells/loom_files",
                       metadata_path = "loom_output/mm_mets_cancer_cells/metadata")
```

### patient_mets_normal_cells

We're also interested in how the normal cells in our patient met samples are behaving, particularly the macrophages. We're gonna write off some metadata for the objects to be able to reconstruct it in python.

```{r macrophage-metadata}
patient_mets_normal_cells <- obj_list[["patient_mets_normal_cells"]]

patient_mets_myeloid <- subset(patient_mets_normal_cells,
                               Ann_level1 %in% c("Immune_Myeloid",
                                                 "Interstitial macrophages")) %>%
    process_seurat()

patient_mets_myeloid <- run_fdl(patient_mets_myeloid)

write_off_md(sobj = patient_mets_myeloid,
             id_col = "sample_name",
             output_dir = "loom_output/patient_mets_normal_cells/macs",
             vars_to_keep = c("sample_name",
                                  "seurat_clusters",
                                  "Ann_level1",
                                  "Ann_level2",
                                  "Ann_level3",
                                  "Phase"),
             handle_n_of_1 = FALSE)
```

## Cancer Cells

First we'll examine the different cancer cell datasets.

We're gonna look at cancer cells first.

```{python make-cancer-obs-and-plts}
ob_names = ["mm_mets_cancer_cells",
            "mm_prim_cancer_cells",
            "patient_mets_cancer_cells",
            "patient_prim_cancer_cells",
            "patient_mets_normal_cells"]
ob_list = []
for ob_name in ob_names:
    loom_path = "loom_output/" + ob_name + "/loom_files"
    md_path = "loom_output/" + ob_name + "/metadata"
    ob = loom_to_an(loom_path,
                    md_path)
    calc_velo(ob)
    save_velo_plots(ob, ob_name = ob_name)
    ob_list.append(ob)


```

### mm_mets_cancer_cells

```{r load-plots-mm-mets-cancer, cache=FALSE}
plt_paths <- paste0("figures/",
                    list.files("figures")[grep("mm_mets_cancer_cells",
                                               list.files("figures"))]) %>%
    as.list()

plts <- lapply(plt_paths, function(x) {
    tmp <- magick::image_read(x)
    tmp_gg <- magick::image_ggplot(tmp)
    return(tmp_gg)
    })

names(plts) <- str_remove(plt_paths,
                          pattern = "figures/scvelo_mm_mets_cancer_cells_") %>%
    str_remove(pattern = ".png")
```

```{r mm_mets_cancer_cells_tabs, results = "asis", cache=FALSE}
qreport::maketabs(plts)
```

### mm_prim_cancer_cells

```{r load-plots-mm-prim-cancer, cache=FALSE}
plt_paths <- paste0("figures/",
                    list.files("figures")[grep("mm_prim_cancer_cells",
                                               list.files("figures"))]) %>%
    as.list()

plts <- lapply(plt_paths, function(x) {
    tmp <- magick::image_read(x)
    tmp_gg <- magick::image_ggplot(tmp)
    return(tmp_gg)
}
)
names(plts) <- str_remove(plt_paths,
                          pattern = "figures/scvelo_mm_prim_cancer_cells_") %>%
    str_remove(pattern = ".png")
```

```{r mm_prim_cancer_cells_tabs, results = "asis", cache=FALSE}
qreport::maketabs(plts)
```


### patient_mets_cancer_cells
```{r load-plots-patient-mets-cancer, cache=FALSE}
plt_paths <- paste0("figures/",
                    list.files("figures")[grep("patient_mets_cancer_cells",
                                               list.files("figures"))]) %>%
    as.list()

plts <- lapply(plt_paths, function(x) {
    tmp <- magick::image_read(x)
    tmp_gg <- magick::image_ggplot(tmp)
    return(tmp_gg)
}
)
names(plts) <- str_remove(plt_paths,
                          pattern = "figures/scvelo_patient_mets_cancer_cells_") %>%
    str_remove(pattern = ".png")
```

```{r patient_mets_cancer_tabs, results = "asis", cache=FALSE}
qreport::maketabs(plts)
```

### patient_prim_cancer_cells

```{r load-plots-patient-prim-cancer, cache=FALSE}
plt_paths <- paste0("figures/",
                    list.files("figures")[grep("patient_prim_cancer_cells",
                                               list.files("figures"))]) %>%
    as.list()

plts <- lapply(plt_paths, function(x) {
    tmp <- magick::image_read(x)
    tmp_gg <- magick::image_ggplot(tmp)
    return(tmp_gg)
}
)
names(plts) <- str_remove(plt_paths,
                          pattern = "figures/scvelo_patient_prim_cancer_cells_") %>%
    str_remove(pattern = ".png")
```

```{r patient_prim_cancer_tabs, results = "asis", cache=FALSE}
qreport::maketabs(plts)
```

## Normal Cells

### patient_mets_normal_cells

```{python patient-mets-normal}
ob_name = "patient_mets_normal_cells"
patient_mets_normal_cells = loom_to_an(loom_path= "loom_output/patient_mets_normal_cells/loom_files", metadata_path="loom_output/patient_mets_normal_cells/metadata")
calc_velo(patient_mets_normal_cells)


scv.tl.velocity_graph(patient_mets_normal_cells, backend = "threading")
plotdict = {
    "umap_ann1": ["umap", "Ann_level1"],
    "umap_ann2": ["umap", "Ann_level2"],
    "fdl_ann1": ["fdl", "Ann_level1"],
    "fdl_ann2": ["fdl", "Ann_level2"]
}
for plt_name, plt_type in plotdict.items():
    file_end = ob_name + "_" + plt_name + ".png"
    scv.pl.velocity_embedding_stream(patient_mets_normal_cells,
                                     basis = plt_type[0],
                                     color = plt_type[1],
                                     show = False,
                                     save = file_end)
file_end = ob_name + "_embedding.png"
scv.pl.velocity_embedding(patient_mets_normal_cells,
                          basis = "umap",
                          color = "seurat_clusters",
                          show = False,
                          save = file_end)
```


```{r load-plts-patient-mets-normal, cache=FALSE}
plts <- get_plot_list("patient_mets_normal_cells")
```

```{r patient-mets-normal-tabset, results="asis", cache=FALSE}
qreport::maketabs(plts)
```

#### MACtion

The macrophages are always a mess, so naturally we are interested in them. To do so I'm going to drill down further into the "Immune_Myeloid" group of Ann_level1.

```{python load-patient-mets-myeloid, cache=FALSE}

myeloid=loom_to_an(loom_path="loom_output/patient_mets_normal_cells/loom_files",
                metadata_path="loom_output/patient_mets_normal_cells/macs")

calc_velo(myeloid)
scv.tl.velocity_graph(myeloid, backend = "threading")
#going to use same plotdict as patient_mets_normal chunk
ob_name = "patient_mets_myeloid"
plotdict = {
    "umap_ann2": ["umap", "Ann_level2"],
    "umap_ann3": ["umap", "Ann_level3"],
    "fdl_ann2": ["fdl", "Ann_level2"],
    "fdl_ann3": ["fdl", "Ann_level3"]
}
for plt_name, plt_type in plotdict.items():
    file_end = ob_name + "_" + plt_name + ".png"
    scv.pl.velocity_embedding_stream(myeloid,
                                     basis = plt_type[0],
                                     color = plt_type[1],
                                     show = False,
                                     save = file_end)
file_end = ob_name + "_embedding.png"
scv.pl.velocity_embedding(myeloid,
                          basis = "umap",
                          color = "seurat_clusters",
                          show = False,
                          save = file_end)
```

```{r load-patient-mets-myeloid-plts, cache=FALSE}
plts_new <- get_plot_list("patient_mets_myeloid")
names(plts_new)
```

```{r patient-mets-myeloid-tabset, results="asis", cache=FALSE}
qreport::maketabs(plts_new)
```