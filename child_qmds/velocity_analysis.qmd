We are interested in how cell types and states in each sample change are evolving based on splicing dynamics. For this purpose will perform velocity analysis.

## New velocity analysis function

I realized that I should have just created individual loom files for the filtered_feature matrices, that way I can subset by any barcodes that I want. So i'm going to rewrite the r_make_loom_files function.

Input is a table with the following column names:
    -sample_id
    -h5_path
    -bam_path
    -species

```{r}
velo_input <- read.table("misc/allsample_details.txt",
                         header = TRUE) %>%
    dplyr::select(sample_id = sample_name,
                  species,
                  data_source) %>%
    mutate(data_path = paste0(
            recode(data_source,
                   "GEO" = "/home/gdrobertslab/lab/Counts_2/",
                   "NCH" = "/home/gdrobertslab/lab/Counts_2/",
                   "SJ" = "/home/gdrobertslab/lab/ExternalData/Patel_lab/",
                   "NCI_POB" = "/home/gdrobertslab/lab/ExternalData/McEachron_lab/",
                   "CSU" = "/home/gdrobertslab/lab/ExternalData/Regan_lab/",
                   "TU" = "/home/gdrobertslab/lab/ExternalData/Gardner/",
                   "UoM" = "/home/gdrobertslab/lab/ExternalData/Modiano_Lab/Counts/"))) %>%
    unique() %>%
    mutate(#add h5 paths
           h5_path = ifelse(data_source == "NCI_POB",
                            paste0(data_path,
                                   "03_FilteredMatricesH5/",
                                   sample_id,
                                   "_filtered_feature_bc_matrix.h5"),
                            paste0(data_path,
                                   sample_id,
                                   "/filtered_feature_bc_matrix.h5")),
           #add bam paths
           bam_path = ifelse(data_source == "NCI_POB",
                             paste0(data_path,
                                    "BAMs/",
                                    sample_id,
                                    "_gex_possorted_bam.bam"),
                             ifelse(data_source == "CSU",
                                    paste0(data_path,
                                           sample_id,
                                           "/",
                                           sample_id,
                                           "_possorted_genome_bam.bam"),
                                    paste0(data_path,
                                           sample_id,
                                           "/possorted_genome_bam.bam"))),
           gtf_path = recode(species,
                             "canine" = "/home/gdrobertslab/lab/GenRef/10x-canine-atlas_arc/genes/genes.gtf.gz",
                             "mousemodel" = "/home/gdrobertslab/lab/GenRef/10x-mm10_arc/genes/genes.gtf.gz",
                             "patient" = "/home/gdrobertslab/lab/GenRef/10x-hg38_arc/genes/genes.gtf.gz",
                             "xenograft" = "/home/gdrobertslab/lab/GenRef/10x-hg38-mm10_arc/genes/genes.gtf.gz"))
#fix edge cases for h5's (subset of dan regan's objects) and bams (subset of nch ones)
velo_input$h5_path[!file.exists(velo_input$h5_path)] <-
    paste0(velo_input$data_path,
          velo_input$sample_id,
          "/",
          velo_input$sample_id,
          "_possorted_genome_bam.bam")[!file.exists(velo_input$h5_path)]
velo_input$bam_path[!file.exists(velo_input$bam_path)] <-
    paste0(velo_input$data_path,
           velo_input$sample_id,
           "/gex_possorted_bam.bam")[!file.exists(velo_input$bam_path)]

all(file.exists(velo_input$h5_path) & file.exists(velo_input$bam_path))

rownames(velo_input) <- NULL

loom_paths <- paste0("loom_output/samples/", velo_input$sample_id, "/", velo_input$sample_id, ".loom")
loom_paths[!file.exists(loom_paths)]

velo_input <- velo_input[!file.exists(loom_paths), ]

r_make_loom_files(input_table = velo_input,
                  out_dir = "loom_output/samples",
                  cluster_account = "gdrobertslab")
```

## Write off Metadata for Velocity Analysis

In order to analyze the data, we need to save a table of cell-level metadata, including barcodes, seurat clusters, and annotations.

First we need to read in our objects for this. The most up to date object seems to change frequently, but as of 2/19 at 3:15 pm i'm using the ojbects in tumor_vs_stroma.

```{r}
yogi_prefix <- "/home/gdrobertslab/lab/Analysis/Yogesh/CellTypeAnnRefs/"
obj_names <- list.files(paste0(yogi_prefix, "output/seurat_objects/final_tumor_vs_stroma"))
#get only fdl files
obj_names <- str_replace_all(obj_names,
                             ".qs",
                             "")

obj_list <- list()
for (ob_name in obj_names) {
    obj_list[[ob_name]] <-
        qs::qread(paste0("/home/gdrobertslab/lab/Analysis/Yogesh/CellTypeAnnRefs/output/seurat_objects/final_tumor_vs_stroma/", ob_name, ".qs"))
}
#run fdl
parallel::detectCores()
obj_list_fdl <- parallel::mclapply(obj_list, FUN = run_fdl, mc.cores = parallel::detectCores())

qs::qsave(obj_list_fdl, "output/seurat_objects/obj_list_03_03_2025.qs")
```

```{r write-off-md}
lapply(names(obj_list_fdl), function(obj_name) {
    write_off_md(sobj = obj_list_fdl[[obj_name]],
                 id_col = "sample_name",
                 output_dir = paste0("loom_output/metadata/",
                                     obj_name),
                 vars_to_keep = c("sample_name",
                                  "seurat_clusters",
                                  "Ann_Level1",
                                  "Ann_Level2",
                                  "Ann_Level3"),
                 handle_n_of_1 = FALSE)
})
```

## Analyze .loom Files

First I need to activate my conda environment. I set `eval = FALSE` because the environment path will change based on who is rendering this file.

```{bash activate-env, eval = FALSE}
conda activate /home/gdrobertslab/mjg015/R/x86_64-pc-linux-gnu-library/4.3/rrrSingleCellUtils/r_rna_velo
```

Next I need to import my conda libraries.

```{python load-py-libs}
import anndata
import scvelo as scv
import pandas as pd
import numpy as np
from matplotlib import pyplot
import scanpy as sc
import os
import re
```

### Make Objects and Plots

```{python analyze-mm-mets-cancer-cells}
#get names of loom files
ob_names = os.listdir("loom_output/metadata")
ob_names = list(filter(lambda x:"dog" not in x, ob_names))

for ob in ob_names:
    write_ob_and_plots(ob)

def write_ob_and_plots(ob):
    print("starting on " + ob)
    merged_ad=loom_to_an(obj_name = ob,
                     loom_dir = "loom_output/samples",
                     metadata_dir = "loom_output/metadata")
    print("made " + ob + " , now calculating velocity")
    calc_velo(merged_ad)
    merged_ad.write(filename = "loom_output/anndata/" + ob + ".ad")
    print("calculated velocity and saved off " + ob)
    merged_ad = anndata.read("loom_output/anndata/" + ob + ".ad")
    #make the plots and save them off
    #seurat clusters in umap space
    scv.pl.velocity_embedding_stream(merged_ad,
                                     basis = "umap",
                                     color = "seurat_clusters",
                                     show = False,
                                     sort_order = False)
    pyplot.savefig("figures/scvelo/Ryan/" + ob + "_umap_clusters.svg")
    #Ann_Level3 in umap space
    scv.pl.velocity_embedding_stream(merged_ad,
                                     basis = "umap",
                                     color = "Ann_Level3",
                                     show = False,
                                     sort_order = False)
    pyplot.savefig("figures/scvelo/Ryan/" + ob + "_umap_annotations.svg")
    #seurat_clusters in fdl
    scv.pl.velocity_embedding_stream(merged_ad,
                                     basis = "fdl",
                                     color = "seurat_clusters",
                                     show = False,
                                     sort_order = False)
    pyplot.savefig("figures/scvelo/Ryan/" + ob + "_fdl_clusters.svg")
    #cell types in fdl
    scv.pl.velocity_embedding_stream(merged_ad,
                                     basis = "fdl",
                                     color = "Ann_Level3",
                                     show = False,
                                     sort_order = False)
    pyplot.savefig("figures/scvelo/Ryan/" + ob + "_fdl_annotations.svg")
    return(ob + " is done")


```

### Get Top Velocity Genes for Each Cluster/Cell Type

I'll only be doing this for cancer objects

```{python}
tmp = anndata.read("loom_output/anndata/patient_mets_cancer_cells.ad")
scv.tl.rank_velocity_genes(tmp, groupby="Ann_Level3", min_corr = 0.3)
df = pd.DataFrame(tmp.uns["rank_velocity_genes"]["names"])
df.to_csv("loom_output/velocity_genes/patient_mets_cancer_cells.csv", index = False)

#save it off now grouped by seurat clusters
scv.tl.rank_velocity_genes(tmp, groupby="seurat_clusters", min_corr = 0.3)
df = pd.DataFrame(tmp.uns["rank_velocity_genes"]["names"])
df.to_csv("loom_output/velocity_genes/patient_mets_cancer_cells_clusters.csv", index = False)

```

Let's look at these genes as modules in our single cell data.

```{r}
tmp <- obj_list_fdl[["patient_mets_cancer_cells"]]
tmp_velo_genes <-
    read.table("loom_output/velocity_genes/patient_mets_cancer_cells_clusters.csv",
               sep = ",",
               header = TRUE)

tmp <- AddModuleScore(tmp,
                      features = as.list(tmp_velo_genes),
                      name = colnames(tmp_velo_genes))

FeaturePlot(tmp,
            features = paste0(colnames(tmp_velo_genes), 1:12),
            raster = FALSE,
            cols = rev(brewer.pal(n = 11, name = "RdBu")),
            ncol = 6) / r_dim_plot(tmp, group.by = "seurat_clusters", raster = FALSE)
```