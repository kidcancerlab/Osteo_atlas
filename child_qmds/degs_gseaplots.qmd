Run the differential expression analysis and gene set enrichment analysis on
all of the samples that were split out in the previous step. This will generate
volcano plots and GSEA plots for each of the samples. The results will be
saved in the `output/degs` and `output/figures/gsea` directories. 

## find the optimal resolution for clustering for tumor cells

```{r, echo = FALSE}

object_list <-
    tribble(~group,                         ~res_value,
            "patient_prim_cancer_cells",    0.1,
            "patient_mets_cancer_cells",    0.1,
            "mm_prim_cancer_cells",         0.3,
            "mm_mets_cancer_cells",         0.3,
            "xeno_prim_human",              0.2,
            "xeno_mets_human",              0.1,
            "patient_prim_normal_cells",    0.15,
            "patient_mets_normal_cells",    0.05,
            "xeno_prim_mouse",              0.1,
            "xeno_mets_mouse",              0.1,
            "mm_prim_normal_cells",         0.25,
            "mm_mets_normal_cells",         0.2)

sil_val_list <- list()
clustrees <- list()

for (item in seq_len(nrow(object_list))) {
    group <- object_list$group[item]
    res_value <- object_list$res_value[item]

    object <- qs::qread(str_c("output/seurat_objects/tumor_vs_stroma/",
                              group,
                              ".qs"))

    min_cell_silhouette <- 65000
    n_cells <- length(Cells(object))
    keep_n_cells <- min(min_cell_silhouette, n_cells)
    set.seed(63249528)
    res_score <-
        optimize_silhouette(sobject = object[, sample(1:n_cells, keep_n_cells)],
                            test_res = seq(0.1, 0.9, by = 0.1),
                            summary_plot = FALSE,
                            reduction = "harmony") %>%
        filter(sil_vals == max(sil_vals)) %>%
        slice_head(n=1) %>%
        dplyr::pull(res_vals)

    sil_val_list[[group]] <- res_score

    resolution_range <- seq(from = 0, to = 1, by = 0.05)
    clustree_sobj <- FindClusters(object,
                                resolution = resolution_range)
    tree <- clustree::clustree(clustree_sobj,
                                prefix = "RNA_snn_res.") +
            ggtitle(str_c("sil_val was ", res_score, " ", group))

    ggsave(str_c("output/figures/tumor_vs_stroma/clustree/ ", group, ".png"),
            width = 10,
            height = 10,
            plot = tree)
    
    clustrees[[group]] <- tree
}


```


##  Differential expression analysis for tumor cells
```{r, echo = FALSE}

theme_set(theme_classic(base_size = 20) +
            theme(axis.title.y = element_text(margin = margin(0, 20, 0, 0),
                                              size = 10,
                                              color = "black",
                                              face = "bold"),
                  axis.title.x = element_text(hjust = 0.5,
                                              margin = margin(20, 0, 0, 0),
                                              size = 10,
                                              color = "black",
                                              face = "bold"),
                  plot.title = element_text(hjust = 0.5,
                                            size = 10,
                                            face = "bold"),
                  legend.text = element_text(size = 8,
                                             face = "bold")))

#GSEA Miltilevel
cat_tib <- dplyr::tribble(
    ~category, ~subcategory,   ~cat_expl,
    "H",        "NA",          "Hallmark_paths",
    "C2",      "CP:KEGG",      "KEGG",
    "C3",      "TFT:GTRD",     "Transcription_factor_targets",
    "C6",       "NA",          "Oncogenic_signature")

panel_plots <- list()

object_list <-
    tribble(~group,                         ~res_value,
            "patient_prim_cancer_cells",    0.1,
            "patient_mets_cancer_cells",    0.1,
            "mm_prim_cancer_cells",         0.3,
            "mm_mets_cancer_cells",         0.3,
            "xeno_prim_human",              0.2,
            "xeno_mets_human",              0.1,
            "patient_prim_normal_cells",    0.15,
            "patient_mets_normal_cells",    0.05,
            "xeno_prim_mouse",              0.1,
            "xeno_mets_mouse",              0.1,
            "mm_prim_normal_cells",         0.25,
            "mm_mets_normal_cells",         0.2)


for (item in seq_len(nrow(object_list))) {
    group <- object_list$group[item]
    res_value <- object_list$res_value[item]

    object <- qs::qread(str_c("output/seurat_objects/tumor_vs_stroma/",
                              group,
                              ".qs"))

    object <- FindClusters(object,
                           resolution = res_value)

    volc_plot <- list()
    gsea_plot <- list()
    gsea_result <- list()

    dimplot <- dimplot_better(object,
                              group_by = "seurat_clusters")

    degs_result <- run_degs(sobject = object,
                            group_by = "seurat_clusters",
                            prefix = group)

    if (dir.exists(str_c("output/degs/", group))) {
        unlink(str_c("output/degs/", group), recursive = TRUE)
    }
    for (item in names(degs_result)) {
        if (!dir.exists(str_c("output/degs/", group))) {
            dir.create(str_c("output/degs/", group), recursive = TRUE)
        }
        write_tsv(degs_result[[item]],
                 str_c("output/degs/", group, "/", item, "_degs.tsv"))
        logfc_cutoff <- 0.6
        degs_result[[item]]$diffexpressed <- "Not Significant"
        degs_result[[item]]$diffexpressed[degs_result[[item]]$log2FoldChange > logfc_cutoff & degs_result[[item]]$padj < 0.05] <- "Upregulated"
        degs_result[[item]]$diffexpressed[degs_result[[item]]$log2FoldChange < -1 * logfc_cutoff & degs_result[[item]]$padj < 0.05] <- "Downregulated"
#make the volcano plot
        volc_plot[[item]] <- ggplot(data=degs_result[[item]],
                            aes(x=log2FoldChange,
                                y=-log10(pvalue),
                                color = diffexpressed)) + 
            geom_vline(xintercept = c(-1 * logfc_cutoff, logfc_cutoff), 
                      col = "gray",
                      linetype = "dashed") + 
            geom_hline(yintercept = c(0.05),
                      col = "gray",
                      linetype = "dashed") +
            geom_point(size = 2) +
            scale_color_manual(values = c(plot_cols[1], "grey", plot_cols[2]),
                               name = "") +
            geom_text_repel(aes(label = gene))
    }
#GSEA analysis for the dotplots
    if (dir.exists(str_c("output/gsea/", group))) {
        unlink(str_c("output/gsea/", group), recursive = TRUE)
    }
    for (i in seq_len(nrow(cat_tib))){
        category <- cat_tib$category[i]
        subcategory <- cat_tib$subcategory[i]
        cat_expl <- cat_tib$cat_expl[i]
        if (subcategory == "NA") {
            gsea_result <- run_gsea(degs_result = degs_result,
                                    category = category,
                                    species = object$organism[1])
        } else {
            gsea_result <- run_gsea(degs_result = degs_result,
                                    category = category,
                                    subcategory = subcategory,
                                    species = object$organism[1])
        }
        #test if directory to save the results exists
        if (!dir.exists(str_c("output/gsea/", group))) {
            dir.create(str_c("output/gsea/", group), recursive = TRUE)
        }

        for (item in names(gsea_result)) {
              #save the results
            write_tsv(gsea_result[[item]],
                        str_c("output/gsea/", group, "/",
                        cat_expl, "_cluster_", item, "_gsea.tsv"))

            rows <- gsea_result[[item]] %>% 
                nrow()
            if (rows >= 1) {
                top5up_down <- rbind(gsea_result[[item]] %>%
                                        slice_head(n = 7),
                                    gsea_result[[item]] %>%
                                        slice_tail(n = 7)) %>%
                                dplyr::select(pathway, NES, size, padj) %>%
                                arrange(desc(NES)) %>%
                                mutate(pathway = as.factor(pathway) %>%
                                            str_replace_all("_", " ") %>%
                                            str_wrap(65) %>%
                                            fct_reorder(NES),
                                       sample = item,
                                       order = seq_len(n()),
                                       justify_y = if_else(NES > 0, 1, 0),
                                       y_pos = if_else(NES > 0, -0.1, 0.1))
                gsea_plot[[cat_expl]][[item]] <- 
                    local({cat_expl = cat_expl
                          gsea_dotplot(top5up_down, x_col = "NES") +
                    ggtitle(str_c(cat_expl, " for ", item))})
            } else {
                print(str_c("No Pathways up or down in ", item, " for ", cat_expl))
                gsea_plot[[cat_expl]][[item]] <- 
                local({cat_expl = cat_expl
                      ggplot(data = NULL,
                            aes(x = as.factor(1),
                            y = as.factor(1))) +
                        geom_text(aes(label = str_c("No pathways for ", cat_expl, " in ", item)),
                                  size = 4)})
            }
        }
    }
#make panel plots
    for (clusters in names(volc_plot)) {
        panel_plots[[group]][[clusters]] <- 
            patchwork::wrap_plots(dimplot,
            volc_plot[[clusters]],
            gsea_plot$KEGG[[clusters]],
            gsea_plot$Hallmark_paths[[clusters]] ,
            gsea_plot$Oncogenic_signature[[clusters]],
            gsea_plot$Transcription_factor_targets[[clusters]],
            ncol = 2) +
            patchwork::plot_annotation(title = clusters)
        if (!dir.exists(str_c("output/figures/gsea/", group))) {
            dir.create(str_c("output/figures/gsea/", group), recursive = TRUE)
        }
        ggsave(str_c("output/figures/gsea/", group, "/",group, "_", clusters, ".png"),
                width = 16,
                height = 24,
                plot = panel_plots[[group]][[clusters]])
    }
}

```

