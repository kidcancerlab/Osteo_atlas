Run the differential expression analysis and gene set enrichment analysis on
all of the samples that were split out in the previous step. This will generate
volcano plots and GSEA plots for each of the samples. The results will be
saved in the `output/degs` and `output/figures/gsea` directories.

## Find the optimal resolution for clustering for tumor cells
```{r clustree, echo = FALSE}
all_groups <-
    c("patient_prim_cancer_cells",
      "patient_mets_cancer_cells",
      "mm_prim_cancer_cells",
      "mm_mets_cancer_cells",
      "xeno_prim_human",
      "xeno_mets_human",
      "dogs_prim_cancer_cells",
      "dogs_mets_cancer_cells"
    #   "patient_prim_normal_cells",
    #   "patient_mets_normal_cells",
    #   "xeno_prim_mouse",
    #   "xeno_mets_mouse",
    #   "mm_prim_normal_cells",
    #   "mm_mets_normal_cells",
    #   "dogs_prim_normal_cells",
    #   "dogs_mets_normal_cells"
      )

sil_val_list <- list()
clustrees <- list()

for (i in seq_len(length(all_groups))) {
    group <- all_groups[i]

    object <- 
        qs::qread(str_c("output/seurat_objects/tumor_vs_stroma/",
                        group,
                        ".qs"))
    #dimplot_better(object, group_by = "sample_name") + NoLegend()
    #FeaturePlot(object, features = "Cd36")
    min_cell_silhouette <- 60000
    n_cells <- length(Cells(object))
    keep_n_cells <- min(min_cell_silhouette, n_cells)
    set.seed(63249528)
    res_score <-
        optimize_silhouette(sobject = object[, sample(1:n_cells, keep_n_cells)],
                            test_res = seq(0.05, 0.9, by = 0.05),
                            summary_plot = FALSE,
                            reduction = "harmony") %>%
        filter(!is.na(sil_vals)) %>%
        filter(sil_vals == max(sil_vals)) %>%
        slice_head(n = 1) %>%
        dplyr::pull(res_vals)

    sil_val_list[[group]] <- res_score

    resolution_range <- seq(from = 0, to = 1, by = 0.05)
    clustree_sobj <- 
        FindClusters(object,
        resolution = resolution_range)
    tree <- 
        clustree::clustree(clustree_sobj,
                            prefix = "RNA_snn_res.") +
            ggtitle(str_c("sil_val was ", res_score, " ", group))

    directory <-
        "output/figures/tumor_vs_stroma/clustree/"
    if (!dir.exists(directory)) {
        dir.create(directory, recursive = TRUE)
    }
    ggsave(str_c("output/figures/tumor_vs_stroma/clustree/", group, ".png"),
            width = 10,
            height = 10,
            plot = tree)

    #save as qs
    ggsave(str_c("output/figures/tumor_vs_stroma/clustree/", group, ".pdf"),
            width = 10,
            height = 10,
            plot = tree)
}

```

##  Differential expression analysis for tumor cells and GSEA
```{r degs_analysis_tumor, echo = FALSE}
#| cache.vars: panel_plot_list

object_list <-
    tribble(~group,                         ~res_value,
            "patient_prim_cancer_cells",    0.3,
            "patient_mets_cancer_cells",    0.35,
            "mm_prim_cancer_cells",         0.9,
            "mm_mets_cancer_cells",         0.7,
            "xeno_prim_human",              0.3,
            "xeno_mets_human",              0.4,
            "dogs_prim_cancer_cells",       0.2,
            "dogs_mets_cancer_cells",       0.45
            )

top_7_markers <- list()
# identify degs
for (i in seq_len(nrow(object_list))) {
    group <- object_list$group[i]
    res_value <- object_list$res_value[i]
    object <-
        qs::qread(str_c("output/seurat_objects/tumor_vs_stroma/",
                        group,
                        ".qs"))
    object <-
        FindClusters(object,
                    resolution = 0.35)
    #dimplot_better(object, group_by = "seurat_clusters") + NoLegend()
    # FeaturePlot(object, features = "PTPRC")
    dimplot1 <-
        dimplot_better(object,
                     group_by = "seurat_clusters") +
            NoLegend()
    
    Idents(object) <- "seurat_clusters"
    markers <- 
        FindAllMarkers(object = object,
                        min.pct = 0.5,
                        logfc.threshold = 0.25,
                        only.pos = T)
    
    markers_to_save <-
        markers %>%
        as.data.frame() %>%
        group_by(cluster) %>% 
        group_by(cluster) %>%
        mutate(percent_diff = pct.1 - pct.2) %>%
        arrange(desc(percent_diff), .by_group = TRUE) %>%
        slice_min(order_by = p_val_adj, 
                n = 20,
                with_ties = F) %>%
        select(gene, cluster) %>%
        group_by(cluster) %>%
        summarise(genes = list(gene)) %>%
        deframe()
    # save the markers
    write_tsv(x = markers_to_save,
            file = str_c("output/degs/",
                        group,
                        "/seurat_clusters_markers.tsv"),
            col_names = TRUE)

    # reduce data
    top_markers <- 
        markers %>%
        as.data.frame() %>%
        group_by(cluster) %>% 
        group_by(cluster) %>%
        mutate(percent_diff = pct.1 - pct.2) %>%
        arrange(desc(percent_diff), .by_group = TRUE) %>%
        slice_min(order_by = p_val_adj, 
                n = 7,
                with_ties = F)

    # get list of top marker genes; including each gene only once
    genes <- 
        top_markers$gene %>%
        unique()

    top_7_markers[[group]] <- genes

    # change to RNA assay
    DefaultAssay(object) <- "RNA"

    # scale data for visualization
    data <-
        ScaleData(object = object,
                    assay = "RNA")
    data <-
        subset(x = data,
            downsample = min(100, ncol(object)))

    heatmap_degs <-
        DoHeatmap(object = data,
                features = genes,
                group.by = "seurat_clusters")

    # make dot plot
    dotplot_degs <-
        DotPlot(object = object,
                features = genes) +
        RotatedAxis() 

    # save the dotplot
    width <- length(unique(object$seurat_clusters)) * 2
    height <- length(unique(object$seurat_clusters)) *2

    combine <-
        cowplot::plot_grid(heatmap_degs,
                        dotplot_degs,
                        ncol = 1)

    directory <-
        str_c("output/figures/tumor_vs_stroma/", group)
    if (!dir.exists(directory)) {
        dir.create(directory, recursive = TRUE)
    }

    ggsave(str_c(directory, "/", "degs_per_cluster.png"),
            plot = combine,
            width = width,
            height = height,
            bg = "white")

}




# run force directed layout
for (i in seq_len(nrow(object_list))) {
    group <- object_list$group[i]
    res_value <- object_list$res_value[i]
    object <-
        qs::qread(str_c("output/seurat_objects/tumor_vs_stroma/",
                        group,
                        ".qs"))
    object <-
        FindClusters(object,
                    resolution = 0.3)
    #dimplot_better(object, group_by = "seurat_clusters")
    #FeaturePlot(object, features = "Bnip3")
    #DotPlot(object, features = "Bnip3")
    
    #dimplot_better(object, group_by = "seurat_clusters") +NoLegend()
    # DotPlot(object, features = tumor_features )
    force_directed_layout <- 
        run_fdl(sobject = object)

    split_fdl_plot1 <- 
        dimplot_better(force_directed_layout,
                       group_by= "seurat_clusters",
                       reduction = "fdl") +
            NoLegend()
    
    split_fdl_plot2 <-
        dimplot_better(force_directed_layout,
                       group_by = "new_annot_clust",
                       reduction = "fdl") +
            NoLegend()
    
    split_fdl_plot3 <- 
        dimplot_better(force_directed_layout,
                       group_by = "sample_name",
                       reduction = "fdl") +
            NoLegend()
    
    split_fdl_plot4 <-
        dimplot_better(force_directed_layout,
                       group_by = "data_source",
                       reduction = "fdl") +
            NoLegend()

    split_fdl_plots <-
        patchwork::wrap_plots(
            split_fdl_plot1,
            split_fdl_plot2,
            split_fdl_plot3,
            split_fdl_plot4,
            ncol = 2
        )
    
    directory <-
        str_c("output/figures/tumor_vs_stroma/", group)

    if (!dir.exists(directory)) {
        dir.create(directory, recursive = TRUE)
    }
    ggsave(str_c("output/figures/tumor_vs_stroma/",
                group,
                "/",
                "fdl_plot.png"),
            plot = split_fdl_plots,
            width = 16,
            height = 16)
    qs::qsave(force_directed_layout,
              str_c("output/seurat_objects/tumor_vs_stroma/",
                    group,
                    "_fdl.qs"))
}

# Run GSEA 

theme_set(
    theme_classic(base_size = 20) +
    theme(
        axis.title.y = element_text(
            margin = ggplot2::margin(0, 20, 0, 0),
            size = 10,
            color = "black",
            face = "bold"
        ),
        axis.title.x = element_text(
            hjust = 0.5,
            margin = ggplot2::margin(20, 0, 0, 0),
            size = 10,
            color = "black",
            face = "bold"
        ),
        plot.title = element_text(
            hjust = 0.5,
            size = 10,
            face = "bold"
        ),
        legend.text = element_text(size = 8, face = "bold")
    )
)

# load the tsv for human_dog gene orthologs
orthologs <-
    read_tsv("input/downloads/dog_human_gene_orthologs.txt")

#GSEA Miltilevel
cat_tib <- dplyr::tribble(
    ~category, ~subcategory,   ~cat_expl,
    "H",        "NA",          "Hallmark_paths",
    "C2",       "CP:KEGG",     "KEGG",
    # "C3",       "TFT:GTRD",    "Transcription_factor_targets",
    # "C6",       "NA",          "Oncogenic_signature",
    "C5",       "GO:BP",       "Biological_processes",
    "C2",       "CP:REACTOME", "Reactome")

panel_plots <- list()
for (i in seq_len(nrow(object_list))) {
    group <- object_list$group[i]
    res_value <- object_list$res_value[i]

    object <-
        qs::qread(str_c("output/seurat_objects/tumor_vs_stroma/",
                        group,
                        ".qs"))

    object <- 
        FindClusters(object,
                    resolution = res_value)
    #dimplot_better(object, group_by = "seurat_clusters") + NoLegend()
    ## remmeber to put the run_degs filter to 10% of the cells
    # DotPlot(object, features = tumor_features %>% unlist() %>% as.character())
    make_panel_plot(sobj = object,
                    comparison_col = "seurat_clusters",
                    label = "seurat_clusters",
                    group = group,
                    aggregate_by = c("sample_name", "seurat_clusters"),
                    organism_col = "organism",
                    subset = FALSE,
                    batch_var = "data_source")
}


```


## Save the celltypes metadata 
```{r celltypes_metadata, echo = FALSE, eval = FALSE, include = FALSE}
# Save the celltypes excel out with seurat clusters and celltypes annotation info
object_list <-
    tribble(~group,                         ~res_value,
           "patient_prim_cancer_cells",    0.15,
            "patient_mets_cancer_cells",    0.15,
            "mm_prim_cancer_cells",         0.4,
            "mm_mets_cancer_cells",         0.25,
            "xeno_prim_human",              0.2,
            "xeno_mets_human",              0.15,
            "dogs_prim_cancer_cells",       0.1,
            "dogs_mets_cancer_cells",       0.1,
            "patient_prim_normal_cells",    0.15,
            "patient_mets_normal_cells",    0.05,
            "xeno_prim_mouse",              0.1,
            "xeno_mets_mouse",              0.1,
            "mm_prim_normal_cells",         0.25,
            "mm_mets_normal_cells",         0.2,
            "dogs_prim_normal_cells",       0.1,
            "dogs_mets_normal_cells",       0.15)

all_data_celltypes <- tibble()

for (i in seq_len(nrow(object_list))) {
    group <- object_list$group[i]
    res_value <- object_list$res_value[i]

    object <-
        qs::qread(
            str_c(
                "output/seurat_objects/tumor_vs_stroma/",
                group,
                ".qs"
            )
        ) %>%
        FindClusters(resolution = res_value)

    object$cell_types_string <- "NA"
    object$med_cellscore_string <- "NA"
    celltype_df <-
        object@meta.data %>%
        select(seurat_clusters) %>%
        as_tibble() %>%
        mutate(group = group,
               assigned_celltype = NA,
               cell_types_string = NA,
               med_cellscore_string = NA,
               NCH_assignment = NA,
               NCI_assignment = NA,
               SJ_assignment = NA) %>%
        distinct() %>%
        arrange(seurat_clusters)
    for (i in seq_len(nrow(celltype_df))) {
        temp_obj <-
            subset(x = object,
                   seurat_clusters == celltype_df$seurat_clusters[i])
        cell_types_percent <- 
            table(temp_obj$annotations) %>%
            as.data.frame() %>%
            arrange(desc(Freq), .by_group = TRUE) %>%
            slice_head(n=5) %>%
            mutate(Percentage = Freq / sum(Freq) * 100) %>%
            group_by(Var1) %>%
            mutate(med_cellscore = median(temp_obj$cell_scores[temp_obj$annotations == Var1]) %>% 
                round(2))

        celltype_df$assigned_celltype[i] <- 
            cell_types_percent$Var1[1] %>%
            as.character()

        # Create a string of Var1 and Percentage
        celltype_df$cell_types_string[i] <- 
            paste(cell_types_percent$Var1,
                  cell_types_percent$Percentage %>% round(1),
                  sep = ":",
                  collapse = ",")

        celltype_df$med_cellscore_string[i] <- 
            paste(cell_types_percent$Var1, 
                  cell_types_percent$med_cellscore,
                  sep = ":",
                  collapse = ",")
    }

    all_data_celltypes <-
        celltype_df %>%
        rbind(all_data_celltypes)
}
# Add date and time to the filename
timestamp <- format(Sys.time(), "%Y%m%d_%H%M%S")
directory <-
    "output/cluster_and_celltype"
if (!dir.exists(directory)) {
    dir.create(directory, recursive = TRUE)
}
filename <- 
    str_c("output/cluster_and_celltype/all_data_celltypes_",
            timestamp,
            ".tsv")
write_tsv(x = all_data_celltypes, file = filename)

```


### To compare the what degs match across the different groups
```{r degs_comparison, echo = FALSE}
# dog and human orthologs
orthologs <-
    read_tsv("input/downloads/dog_human_gene_orthologs.txt")

object_list <-
    tribble(~group,                         ~res_value,
            "patient_prim_cancer_cells",    0.3,
            "patient_mets_cancer_cells",    0.35,
            "mm_prim_cancer_cells",         0.9,
            "mm_mets_cancer_cells",         0.7,
            "xeno_prim_human",              0.3,
            "xeno_mets_human",              0.4,
            "dogs_prim_cancer_cells",       0.2,
            "dogs_mets_cancer_cells",       0.45
            )

for (i in seq_len(nrow(object_list))) {
    group1 <- object_list$group[i]
    res_value1 <- object_list$res_value[i]

    object1 <-
        qs::qread(
            str_c(
                "output/seurat_objects/tumor_vs_stroma/",
                group1,
                ".qs"
            )
        ) %>%
        FindClusters(resolution = res_value1)

    dimplot1 <- 
        dimplot_better(object1,
                        group_by = "seurat_clusters")

    #grab the pseudobulk degs_results, to account for the gene loss during conversion 150 are set
    for (s_cluster in unique(object1$seurat_clusters)) {
        genelist <-
            read_tsv(str_c(
                    "output/degs/",
                    group1,
                    "/seurat_clusters/",
                    s_cluster,
                    "_degs.tsv"
                )) %>%
            filter(log2FoldChange > 1 & padj < 0.01) %>% 
            arrange(desc(log2FoldChange)) %>%
            select(gene) %>%
            slice_head(n = 100) %>%
            as.list()

        big_featureplot_list <- list()
        big_Vlnplot_list <- list()

        for (item in seq_len(nrow(object_list))) {
            group2 <- object_list$group[item]
            res_value2 <- object_list$res_value[item]
            if (group1 != group2) {
                object2 <-
                    qs::qread(
                        str_c(
                            "output/seurat_objects/tumor_vs_stroma/",
                            group2,
                            ".qs"
                        )
                    ) %>%
                    FindClusters(resolution = res_value2)

                #dimplot_better(object2, group_by = "seurat_clusters")

                new_gene_list <- genelist$gene

                if (object1$organism[1] == "human" && object2$organism[1] == "mouse") {
                    new_gene_list <- 
                        nichenetr::convert_human_to_mouse_symbols(genelist$gene) %>%
                        na.omit() %>%
                        unique()
                    }

                if (object1$organism[1] == "human" && object2$organism[1] == "dog") {
                    new_gene_list <- 
                        orthologs$dog_gene_name[match(genelist$gene, orthologs$human_gene_ortholog)] %>%
                        na.omit() %>%
                        unique()
                    }
                
                if (object1$organism[1] == "mouse" && object2$organism[1] == "human") {
                    new_gene_list <- 
                        nichenetr::convert_mouse_to_human_symbols(genelist$gene) %>%
                        na.omit() %>%
                        unique()
                    }
                
                if (object1$organism[1] == "mouse" && object2$organism[1] == "dog") {
                    #first convert to human with nichenetr and then to dogs
                    new_gene_list <- 
                        orthologs$dog_gene_name[match(nichenetr::convert_mouse_to_human_symbols(genelist$gene), orthologs$human_gene_ortholog)] %>%
                        na.omit() %>%
                        unique()
                    }

                if (object1$organism[1] == "dog" && object2$organism[1] == "human") {
                    new_gene_list <- 
                        orthologs$human_gene_ortholog[match(genelist$gene, orthologs$dog_gene_name)] %>%
                        na.omit() %>%
                        unique()
                    }
                
                if (object1$organism[1] == "dog" && object2$organism[1] == "mouse") {
                    new_gene_list <- 
                        orthologs$human_gene_ortholog[match(genelist$gene, orthologs$dog_gene_name)] %>%
                        nichenetr::convert_human_to_mouse_symbols() %>%
                        as.character() %>%
                        na.omit() %>%
                        unique()
                    }

                entire_matrix <- object2@assays$RNA$counts

                genelist_present <- 
                    new_gene_list[new_gene_list %in% rownames(entire_matrix)]

                # percent_cells <- 
                #     (length(genelist_present) / length(genelist$gene)) * 100
                # if (percent_cells < 20.1) {
                #     next
                # }
                cell_ranks <-
                    AUCell::AUCell_run(exprMat = entire_matrix,
                                    geneSets = genelist_present)
                
                object2[[s_cluster]] <- AUCell::getAUC(cell_ranks)[1,]

                feature_plot <-
                        FeaturePlot(object2,
                                    s_cluster,
                                    cols = c("#EEEEEE", "#ae0600"),
                                    min.cutoff = 0.1,
                                    pt.size = 1,
                                    order = TRUE) +
                            coord_fixed() +
                            ggtitle(str_c(s_cluster, group2))
                big_featureplot_list[[s_cluster]][[group2]] <- feature_plot

                Vln_plot <- 
                    VlnPlot(object2,
                            features = s_cluster,
                            pt.size = 0,
                            group.by = "seurat_clusters") +
                        ggtitle(str_c(s_cluster, " on  ", group2))

                big_Vlnplot_list[[s_cluster]][[group2]] <- Vln_plot
            }
            big_panel_plot1 <- 
                cowplot::plot_grid(dimplot1,
                                    plotlist = big_featureplot_list[[s_cluster]],
                                    ncol = 2)
            big_panel_plot2 <- 
                cowplot::plot_grid(dimplot1,
                                    plotlist = big_Vlnplot_list[[s_cluster]],
                                    ncol = 2)
                
            length_var <- 
                if (length(big_featureplot_list) %% 2 == 1) {
                    length(big_featureplot_list) + 1
                } else {
                    length(big_featureplot_list)
                }

            height <- (length_var/2 * 7) + 14
            directory <-
                str_c("output/figures/tumor_vs_stroma/",
                        group1,
                        "/tumor_degs_comparison")

            if (!dir.exists(directory)) {
                dir.create(directory, recursive = TRUE)
            }
            ggsave(str_c(directory,
                        "/cluster_",
                        s_cluster,
                        "aucell.png"),
                    plot = big_panel_plot1,
                    width = 14,
                    height = height,
                    limitsize = FALSE,
                    bg = "white")
            ggsave(str_c(directory,
                        "/cluster_",
                        s_cluster,
                        "vln.png"),
                    plot = big_panel_plot2,
                    width = 14,
                    height = height,
                    limitsize = FALSE,
                    bg = "white")
        }
    }
}

hist(genelist$percent_target_degs)
```

## Heatmap fom previous annotations

```{r previous_annotation_heatmap, echo = FALSE}
object_list <-
    tribble(~group,                         ~res_value,
            "patient_prim_cancer_cells",    0.3,
            "patient_mets_cancer_cells",    0.35,
            "mm_prim_cancer_cells",         0.9,
            "mm_mets_cancer_cells",         0.7,
            "xeno_prim_human",              0.3,
            "xeno_mets_human",              0.4,
            "dogs_prim_cancer_cells",       0.2,
            "dogs_mets_cancer_cells",       0.45
            )

for (i in seq_len(nrow(object_list))) {
    group <- object_list$group[i]
    res_value <- object_list$res_value[i]

    object <-
        qs::qread(
            str_c(
                "output/seurat_objects/tumor_vs_stroma/",
                group,
                ".qs"
            )
        ) %>%
        FindClusters(resolution = res_value)
    #dimplot_better(object, group_by = "seurat_clusters")
    filename <-
        system(paste0(
            "ls output_5_29_2025/metadata/celltype_tumor/",
            group,
            "_* | tail -n 1"),
            intern = TRUE)

    old_meta <- 
        read_tsv(filename,
        guess_max = Inf,
        show_col_types = FALSE) %>%
    select(cell_name, Ann_Level3) %>%
    column_to_rownames(var = "cell_name") %>%
    dplyr::rename(old_ann_level3 = Ann_Level3)

    object <-
        AddMetaData(object, metadata = old_meta)

    table_clusters <-
            table(object$seurat_clusters, object$old_ann_level3)
    height <-
        length(unique(object$seurat_clusters))
    
    width <-
        length(unique(object$old_ann_level3))

    heatmap_previous_celltypes <-
        pheatmap::pheatmap(table_clusters,
                            cluster_rows = FALSE,
                            cluster_cols = FALSE,
                            display_numbers = TRUE,
                            #breaks = c(10000, 3000, 1000, 100, 10, 0),
                            silent = TRUE,
                            fontsize = 8,
                            fontsize_number = 8,
                            scale = "row",
                            fontsize_row = 8,
                            fontsize_col = 8,
                            color = RColorBrewer::brewer.pal(5, name = "Reds"))

    ggsave(str_c("output/figures/reclustering_tumors/",
                group, 
                "_heatmap_pre_celltype.png"),
        plot = heatmap_previous_celltypes,
        width = width,
        height = (height),
        bg = "white")

}

#DotPlot(object, group.by = "seurat_clusters", features = "BNIP3")
```


## Annotate the cancer clusters manually based on the degs gsea

```{r annotate_cancer_clusters, echo = FALSE}

object_list <-
    tribble(~group,                         ~res_value,
            "patient_prim_cancer_cells",    0.3,
            "patient_mets_cancer_cells",    0.3,
            "mm_prim_cancer_cells",         0.9,
            "mm_mets_cancer_cells",         0.7,
            "xeno_prim_human",              0.3,
            "xeno_mets_human",              0.4,
            "dogs_prim_cancer_cells",       0.2,
            "dogs_mets_cancer_cells",       0.45
            )

for (i in seq_len(nrow(object_list))) {
    group <- object_list$group[i]
    res_value <- object_list$res_value[i]

    object <-
        qs::qread(
            str_c(
                "output/seurat_objects/tumor_vs_stroma/",
                group,
                ".qs"
            )
        ) %>%
        FindClusters(resolution = res_value)

    object$Ann_Level0 <- "Tumor"
    object$Ann_Level1 <- "Tumor"

    sc_dimplot <-
        dimplot_better(object,
                     group_by = "seurat_clusters") +
            NoLegend()

    # dimplot_better(object, group_by = "annotations") + NoLegend()
    # DimPlot(object, cells.highlight = subset(object,seurat_clusters == "8") %>% colnames())
    sample_dimplot <-
        dimplot_better(object,
                     group_by = "sample_name") +
            NoLegend()

    object <-
        kill_cc(object,
                show_plot = FALSE)

    cc_dimplot <-
        dimplot_better(object,
                      group_by = "Phase") +
            NoLegend()

    if (group == "patient_prim_cancer_cells") {
        object$Ann_Level3 <-
            str_replace_all(object$seurat_clusters,
                          c("^0$" = "Tumor_Progenitor",   #neuronal and bone development, CD36 degs
                            "^1$" = "Tumor_Fibrogenic",
                            "^2$" = "Tumor_Proliferative",  
                            "^3$" = "Tumor_Synthetic",   
                            "^4$" = "Tumor_Basal",   
                            "^5$" = "Tumor_Fibrogenic",  
                            "^6$" = "Tumor_Interactive",  # is hypermetabolic coz similar
                            "^7$" = "Tumor_Fibrogenic",
                            "^8$" = "Tumor_Proliferative",
                            "^9$" = "Tumor_Interactive",
                            "^10$" = "Tumor_Proliferative",   #neuronal and bone development, CD36 degs
                            "^11$" = "Tumor_Proliferative",
                            "^12$" = "Tumor_Synthetic",  
                            "^13$" = "Tumor_Progenitor",   
                            "^14$" = "Tumor_Progenitor",   
                            "^15$" = "Tumor_Progenitor",  
                            "^16$" = "Tumor_Fibrogenic",  # is hypermetabolic coz similar
                            "^17$" = "Tumor_Synthetic"))  #by the degs and fdl
    }
    if (group == "patient_mets_cancer_cells") {
        object$Ann_Level3 <-
            str_replace_all(object$seurat_clusters,
                           c("^0$" = "Tumor_Progenitor",    
                            "^1$" = "Tumor_Synthetic", 
                            "^2$" = "Tumor_Proliferative",  
                            "^3$" = "Tumor_Fibrogenic",
                            "^4$" = "Tumor_Interactive",
                            "^5$" = "Tumor_Fibrogenic",
                            "^6$" = "Tumor_Fibrogenic",
                            "^7$" = "Tumor_Interactive",
                            "^8$" = "Tumor_Proliferative",
                            "^9$" = "Tumor_Apoptosis", 
                            "^10$" = "Tumor_Interactive",
                            "^11$" = "Tumor_Synthetic",
                            "^12$" = "Tumor_Interactive",
                            "^13$" = "Tumor_Proliferative",
                            "^14$" = "Tumor_Interactive",
                            "^15$" = "Tumor_Fibrogenic",
                            "^16$" = "Tumor_Fibrogenic",
                            "^17$" = "Tumor_Fibrogenic",
                            "^18$" = "Tumor_Interactive",
                            "^19$" = "Tumor_Apoptosis",   #Apoptotic
                            "^20$" = "Tumor_Proliferative",
                            "^21$" = "Tumor_Progenitor"))
    }
    if (group == "mm_prim_cancer_cells") {       #KEGG pathways are good to differentiate the clusters
        object$Ann_Level3 <-
            str_replace_all(object$seurat_clusters,
                          c("^0$" = "Tumor_Fibrogenic",
                            "^1$" = "Tumor_Progenitor",
                            "^2$" = "Tumor_Proliferative",  
                            "^3$" = "Tumor_Proliferative",  
                            "^4$" = "Tumor_Synthetic",
                            "^5$" = "Tumor_Fibrogenic",
                            "^6$" = "Tumor_Synthetic",   
                            "^7$" = "Tumor_Interactive",      ## IFIT expression
                            "^8$" = "Tumor_Basal",
                            "^9$" = "Tumor_Progenitor"))
    }
    if (group == "mm_mets_cancer_cells") {
        object$Ann_Level3 <-
            str_replace_all(object$seurat_clusters,
                          c("^0$" = "Tumor_Proliferative",    #
                            "^1$" = "Tumor_Synthetic",   
                            "^2$" = "Tumor_Fibrogenic",
                            "^3$" = "Tumor_Progenitor",           #Apoptotic
                            "^4$" = "Tumor_Fibrogenic",
                            "^5$" = "Tumor_Interactive",
                            "^6$" = "Tumor_Proliferative",
                            "^7$" = "Tumor_Fibrogenic",
                            "^8$" = "Tumor_Interactive",   #potentially interactive
                            "^9$" = "Tumor_Progenitor",
                            "^10$" = "Tumor_Progenitor"))
    }
    # if (group == "xeno_prim_human") {
    #     object$Ann_Level3 <-
    #         str_replace_all(object$seurat_clusters,      
    #                       c("^0$" = "Tumor_Fibrogenic",   #neuronal and bone development axon guidance
    #                         "^1$" = "Tumor_Proliferative",   #not sure
    #                         "^2$" = "Tumor_HyperMetabolic",
    #                         "^3$" = "Tumor_Progenitor", 
    #                         "^4$" = "Tumor_Ground",
    #                         "^5$" = "Tumor_Ground",
    #                         "^6$" = "Tumor_Ground",     # BNIP3 expressed usually apoptotic
    #                         "^7$" = "Tumor_Progenitor",
    #                         "^8$" = "Tumor_Interactive",
    #                         "^9$" = "Tumor_Proliferative",
    #                         "^10$" = "Tumor_Fibrogenic",
    #                         "^11$" = "Tumor_Ground",
    #                         "^12$" = "Tumor_Ground",
    #                         "^13$" = "Tumor_Ground",
    #                         "^14$" = "Tumor_Fibrogenic",
    #                         "^15$" = "Tumor_HyperMetabolic"))
    # }
    # if (group == "xeno_mets_human") {
    #     object$Ann_Level3 <-
    #         str_replace_all(object$seurat_clusters,
    #                       c("0" = "Tumor_Progenitor",
    #                         "1" = "Tumor_HyperMetabolic",
    #                         "2" = "Tumor_Interactive",   #not sure
    #                         "3" = "Tumor_Proliferative",
    #                         "4" = "Tumor_Fibrogenic",
    #                         "5" = "Tumor_Ground"))
    # }
    if (group == "dogs_prim_cancer_cells") {
        object$Ann_Level3 <-
            str_replace_all(object$seurat_clusters,
                          c("^0$" = "Tumor_Progenitor",
                            "^1$" = "Tumor_Fibrogenic",   
                            "^2$" = "Tumor_Proliferative",   
                            "^3$" = "Tumor_Synthetic",
                            "^4$" = "Tumor_Synthetic",
                            "^5$" = "Tumor_Interactive",
                            "^6$" = "Tumor_Progenitor",
                            "^7$" = "Tumor_Fibrogenic", 
                            "^8$" = "Tumor_Fibrogenic",   
                            "^9$" = "Tumor_Apoptosis",
                            "^10$" = "Tumor_Proliferative",
                            "^11$" = "Tumor_Synthetic",
                            "^12$" = "Tumor_Synthetic"))
    }
    if (group == "dogs_mets_cancer_cells") {
        object$Ann_Level3 <-
            str_replace_all(object$seurat_clusters,
                          c("^0$" = "Tumor_Fibrogenic",
                            "^1$" = "Tumor_Proliferative",  
                            "^2$" = "Tumor_Progenitor",   
                            "^3$" = "Tumor_Progenitor",  #or hypermetabolic
                            "^4$" = "Tumor_Synthetic",
                            "^5$" = "Tumor_Interactive",   
                            "^6$" = "Tumor_Progenitor",
                            "^7$" = "Tumor_Apoptosis",
                            "^8$" = "Tumor_Interactive",
                            "^9$" = "Tumor_Proliferative",
                            "^10$" = "Tumor_Fibrogenic",
                            "^11$" = "Tumor_Apoptosis",
                            "^12$" = "Tumor_Fibrogenic",
                            "^13$" = "Tumor_Interactive",
                            "^14$" = "Tumor_Progenitor",
                            "^15$" = "Tumor_Interactive",
                            "^16$" = "Tumor_Progenitor",
                            "^17$" = "Tumor_Proliferative"))
    }

    object$Ann_Level2 <- object$Ann_Level3

    annotation_dimplot1 <-
        dimplot_better(object,
                     group_by = "Ann_Level3") +
            NoLegend()
    
    annotation_dimplot2 <-
        dimplot_better(object,
                     group_by = "Ann_Level2") +
            NoLegend()
    
    annotation_dimplot3 <-
        dimplot_better(object,
                     group_by = "Ann_Level1") +
            NoLegend()
    
    annotation_dimplot4 <-
        dimplot_better(object,
                     group_by = "Ann_Level0") +
            NoLegend()

    panel_plots <-
        patchwork::wrap_plots(
            sc_dimplot,
            sample_dimplot,
            cc_dimplot,
            annotation_dimplot1,
            annotation_dimplot2,
            annotation_dimplot3,
            annotation_dimplot4,
            ncol = 2
        )

    directory <- file.path("output/figures/tumor_vs_stroma/", group)
    if (!dir.exists(directory)) {
        dir.create(directory, recursive = TRUE)
    }

    ggsave(str_c("output/figures/tumor_vs_stroma/",
                group,
                "/",
                "final_annotation_plot.png"),
            plot = panel_plots,
            width = 14,
            height = 28)
    directory <-
        str_c("output/seurat_objects/final_tumor_vs_stroma/")
    if (!dir.exists(directory)) {
        dir.create(directory, recursive = TRUE)
    }
    qs::qsave(object,
              str_c("output/seurat_objects/final_tumor_vs_stroma/",
                    group,
                    ".qs"))

    directory <-
        str_c("output/metadata/celltype_tumor/")
    if (!dir.exists(directory)) {
        dir.create(directory, recursive = TRUE)
    }

    timestamp <- format(Sys.time(), "%Y%m%d_%H%M%S")

    filename <- str_c("output/metadata/celltype_tumor/",
                        group,
                        "_",
                        timestamp,
                        ".tsv")

    object@meta.data %>%
    rownames_to_column(var = "cell_name") %>%
    write_tsv(file = filename)

    print(str_c("Finished processing ", "for ", group))

}



```

### Put per species cancer cells together
```{r}

# load the cancer final object
cancer_sobj_list <-  list()
cell_count_table <- tibble::tibble(celltypes = character())

# load the cancer objects
combine_tumor_per_species <-
    tribble(~primary,                     ~metastatic,                ~combined,
            "patient_prim_cancer_cells", "patient_mets_cancer_cells", "patient_prim_mets",
            "mm_prim_cancer_cells",      "mm_mets_cancer_cells",      "mouse_prim_mets",
            "xeno_prim_human",           "xeno_mets_human",           "xeno_prim_mets",
            "dogs_prim_cancer_cells",    "dogs_mets_cancer_cells",    "dog_prim_mets"
            )

harmony_parameters <-
    list(patient_prim_mets = list(group_by = c("sample_name",
                                                "data_source",
                                                "method",
                                                "unique"),
                                theta = c(12, 12, 12, 12),
                                lambda = c(0.1, 0.1, 0.1, 0.1)),
        mouse_prim_mets = list(group_by = c("sample_name",
                                            "data_source",
                                            "unique"),
                                theta = c(12, 12, 12),
                                lambda = c(0.1, 0.1, 0.1)),
        xeno_prim_mets = list(group_by = c("sample_name",
                                            "data_source",
                                            "method",
                                            "unique"),
                                theta = c(12, 12, 12, 12),
                                lambda = c(0.1, 0.1, 0.1, 0.1)),
        dog_prim_mets = list(group_by = c("sample_name",
                                        "data_source",
                                        "unique"),
                            theta = c(12, 12, 12),
                            lambda = c(0.1, 0.1, 0.1)),
        patient_xeno_prim_mets = list(group_by = c("sample_name",
                                                    "data_source",
                                                    "method",
                                                    "unique"),
                                    theta = c(12, 12, 12, 12),
                                    lambda = c(0.1, 0.1, 0.1, 0.1)))

# save the combined for each dataset
for (item in seq_len(nrow(combine_tumor_per_species))) {
    group1 <- combine_tumor_per_species$primary[item]
    group2 <- combine_tumor_per_species$metastatic[item]
    comb_group <- combine_tumor_per_species$combined[item]

    object1 <- 
        qs::qread(str_c("output/seurat_objects/tumor_vs_stroma/",
                        group1,
                        ".qs"))
    # DotPlot(object1, group.by = "seurat_clusters", features = c("Ifit3", "Bnip3"))
    object2 <-
        qs::qread(str_c("output/seurat_objects/tumor_vs_stroma/",
                        group2,
                        ".qs"))
    # dimplot_better(object, group_by = "seurat_clusters")
     # DotPlot(object2, group.by = "seurat_clusters", features = c("Ifit3", "Bnip3"))
    object <- 
        merge(x = object1,
            y = object2) %>%
        JoinLayers() %>%
        process_seurat() %>%
        RunHarmony(group.by.vars = harmony_parameters[[comb_group]]$group_by,
                    theta = harmony_parameters[[comb_group]]$theta,
                    lambda = harmony_parameters[[comb_group]]$lambda) %>%
        process_seurat(reduction = "harmony",
                        resolution = 0.2)

    dim1 <-
        object %>%
        subset(unique == object1$unique[[1]]) %>%
        dimplot_better(group_by = "seurat_clusters") + NoLegend()

    dim2 <-
        object %>%
        subset(unique == object2$unique[[1]]) %>%
        dimplot_better(group_by = "seurat_clusters") + NoLegend()
    panel_plot <-
        cowplot::plot_grid(dim1, dim2,
                            ncol = 2,
                            labels = c("prim", "mets"))
    # save the panel plot
    #DotPlot(object, group.by = "seurat_clusters", features = c("CSF1R","CD36", "RPLP1", "THBS2"))
    #dimplot_better(object, group_by = "data_source")

    qs::qsave(object,
            str_c("output/seurat_objects/final_combined_sobjs/",
                    comb_group,
                    ".qs"))

}

# since xenograft and human patient tumor cells are human, we can combine them
patient_prim_mets <-
    qs::qread("output/seurat_objects/final_combined_sobjs/patient_prim_mets.qs")

xeno_prim_mets <-
    qs::qread("output/seurat_objects/final_combined_sobjs/xeno_prim_mets.qs")

combine_all <-
    merge(x = patient_prim_mets,
          y = xeno_prim_mets) %>%
    JoinLayers() %>%
    process_seurat() %>%
    RunHarmony(group.by.vars = c("sample_name",
                                "data_source",
                                "method",
                                "unique"),
                theta = c(12, 12, 12, 12),
                lambda = c(0.1, 0.1, 0.1, 0.1)) %>%
    process_seurat(reduction = "harmony",
                    resolution = 0.2)

qs::qsave(combine_all,
        str_c("output/seurat_objects/final_combined_sobjs/",
                "patient_xeno_prim_mets_harm.qs"))

combine_all <-
    qs::qread("output/seurat_objects/final_combined_sobjs/patient_xeno_prim_mets.qs")

celltype_percent <-
    table(combine_all$seurat_clusters) %>%
    as.data.frame() %>%
    arrange(desc(Freq)) %>%
    mutate(Percentage = Freq / sum(Freq) * 100) %>%
    ggplot(aes(x = reorder(Var1, -Percentage), y = Percentage)) +
    geom_bar(stat = "identity", fill = "#ae0600") +
    labs(x = "Seurat Clusters", y = "Percentage of Cells")



# we can optimise harmony parameters for the combined objects
for (comb_group in c("patient_xeno_prim_mets",
                "mouse_prim_mets",
                "dog_prim_mets")) {

    object <- 
        qs::qread(str_c("output/seurat_objects/final_combined_sobjs/",
                        comb_group,
                        ".qs"))
    optimize_harmony(s_obj = object, 
                    group_by = harmony_parameters[[comb_group]]$group_by,
                    theta_combo = c(7, 12),
                    lambda_combo = c(0.1, 0.5),
                    dimplot_col = "sample_name",
                    output_dir = "output/figures/harmony_optimization",
                    output_folder = comb_group)

}

# for combined optimize clustering resolution
for (comb_group in c(
                "patient_xeno_prim_mets"
                # "mouse_prim_mets",
                # "dog_prim_mets"
                )) {

    object <- 
        qs::qread(str_c("output/seurat_objects/final_combined_sobjs/",
                        comb_group,
                        ".qs"))
    # Downsample up to 100000 cells if needed
    # if (ncol(object) > 100000) {
    #     set.seed(12345)
    #     object <- subset(object, cells = sample(colnames(object), 100000))
    # }

    resolution_range <- seq(from = 0, to = 1, by = 0.05)
    clustree_sobj <- 
        FindClusters(object,
        resolution = resolution_range)
    tree <- 
        clustree::clustree(clustree_sobj,
                            prefix = "RNA_snn_res.") +
            ggtitle(comb_group)

    directory <-
        "output/figures/tumor_vs_stroma/clustree/"
    if (!dir.exists(directory)) {
        dir.create(directory, recursive = TRUE)
    }
    ggsave(str_c("output/figures/tumor_vs_stroma/clustree/", comb_group, ".png"),
            width = 20,
            height = 10,
            plot = tree)

    #save as qs
    ggsave(str_c("output/figures/tumor_vs_stroma/clustree/", comb_group, ".pdf"),
            width = 20,
            height = 10,
            plot = tree)

    qs::qsave(tree, file = str_c("output/figures/tumor_vs_stroma/clustree/", comb_group, ".qs"))
}



# new table for resolution
combine_tumor_per_species_new <-
    tribble(~combined,             ~res_value,   ~prim,        ~mets,
            "patient_xeno_prim_mets", 0.3,       "patient_prim", "patient_mets",
            "mouse_prim_mets",       0.35,     "mm_prim",       "mm_mets",
            "dog_prim_mets",         0.3,     "dogs_prim_cancer_cells", "dogs_mets_cancer_cells"
            ) 

# we can make gsea panel plots
for (item in seq_len(nrow(combine_tumor_per_species_new))) {
    comb_group <- combine_tumor_per_species_new$combined[item]
    res_value <- combine_tumor_per_species_new$res_value[item]

    object <- 
        qs::qread(str_c("output/seurat_objects/final_combined_sobjs/",
                        comb_group,
                        ".qs")) %>%
        FindClusters(resolution = res_value)

    make_panel_plot(sobj = object,
                    comparison_col = "seurat_clusters",
                    label = "seurat_clusters",
                    group = comb_group,
                    aggregate_by = c("sample_name", "seurat_clusters"),
                    organism_col = "organism",
                    subset = FALSE,
                    batch_var = "data_source")
    # fdl_obj <-
    #     run_fdl(sobject = object)
    # #dimplot_better(fdl_obj, group_by = "ann_lvl2", reduction = "fdl")
    # qs::qsave(fdl_obj,
    #         str_c("output/seurat_objects/final_tumor_vs_stroma/",
    #                 comb_group,
    #                 "_fdl.qs"))
}

marker_list <- list()
# we can make gsea panel plots
for (item in seq_len(nrow(combine_tumor_per_species_new))) {
    comb_group <- combine_tumor_per_species_new$combined[item]
    res_value <- combine_tumor_per_species_new$res_value[item]

    object <- 
        qs::qread(str_c("output/seurat_objects/final_combined_sobjs/",
                        comb_group,
                        ".qs")) %>%
        FindClusters(resolution = res_value)
    #dimplot_better(object, group_by = "seurat_clusters")
    percent_per_cluster <-
        table(object$seurat_clusters) %>%
        as.data.frame() %>%
        arrange(desc(Freq)) %>%
        mutate(Percentage = Freq / sum(Freq) * 100) %>%
        ggplot(aes(x = reorder(Var1, -Percentage), y = Percentage)) +
        geom_bar(stat = "identity", fill = "#ae0600") +
        labs(x = "Seurat Clusters", y = "Percentage of Cells") +
        ggtitle(str_c("Cell type distribution for ", comb_group))
    
    # average_expression <-
    #     AverageExpression(object,
    #                     assays = "RNA",
    #                     slot = "data",
    #                     group.by = "seurat_clusters") %>%
    #     as.data.frame() %>%
    #     rownames_to_column(var = "gene") %>%
    #     pivot_longer(cols = -gene,
    #                 names_to = "cluster",
    #                 values_to = "expression") %>%
    #     mutate(cluster = str_remove(cluster, "RNA.g"))

    markers_all <- 
        FindAllMarkers(object = object,
                        min.pct = 0.1,
                        logfc.threshold = 0.25,
                        only.pos = T)

    markers_to_save <-
        markers_all %>%
        # left_join(average_expression,
        #         by = c("gene", "cluster")) %>%
        as.data.frame() %>%
        #filter(expression > 1) %>%
        mutate(percent_diff = pct.1 - pct.2) %>%
        filter(p_val_adj < 0.05) %>%
        group_by(cluster) %>%
        slice_max(order_by = percent_diff, 
                n = 20,
                with_ties = F) %>%
        select(gene, cluster) %>%
        group_by(cluster) %>%
        summarise(genes = list(gene)) %>%
        deframe()

    # correlation
    correlation <-
        object %>%
        FindVariableFeatures(nfeatures = 5000) %>%
        ScaleData() %>%
        AverageExpression(group.by = "seurat_clusters",
                        assays = "RNA",
                        slot = "data") %>% 
        as.data.frame() %>%
        filter(!rownames(.) %in% c("Gm42418", "Malat1", "MALAT1")) %>%
        # arrange(desc(RNA.g0)) %>%
        # head()
        GGally::ggpairs() 

    ggsave(str_c("output/figures/tumor_vs_stroma/correlation/",
                comb_group,
                "_correlation.png"),
            plot = correlation,
            width = 30,
            height = 30,
            limitsize = FALSE,
            bg = "white")

    correlation_with_gsea <-
        read_tsv(list.files("output/gsea/all_tumur_human_and_xeno/seurat_clusters/",
                            full.names = TRUE,
                            pattern = "Reactome"),
                  id = "clusters") %>%
        mutate(cluster = basename(clusters) %>%
                str_replace_all("Reactome_cluster_", "C") %>%
                str_remove_all("\\.tsv")) %>%
        pivot_wider(names_from = cluster,
                    values_from = NES,
                    id_cols = pathway,
                    values_fill = 0) %>%
        column_to_rownames(var = "pathway") %>%
        select(paste0("C", 1:ncol(.) - 1, "_gsea")) %>%
        GGally::ggpairs()


    ggsave(str_c("output/figures/tumor_vs_stroma/correlation/",
                comb_group,
                "_gsea_correlation.png"),
            plot = correlation_with_gsea,
            width = 30,
            height = 30,
            limitsize = FALSE,
            bg = "white")

}


Annotation_list <-  
    list(patient_xeno_prim_mets = c("^0$" = "Fibrogenic",    
                                    "^1$" = "MP_Progenitor", 
                                    "^2$" = "Basal_Progenitor",  
                                    "^3$" = "Proliferative",
                                    "^4$" = "COMA",
                                    "^5$" = "Interactive",
                                    "^6$" = "Fibrogenic",
                                    "^7$" = "Interactive",
                                    "^8$" = "Proliferative",
                                    "^9$" = "MP_Progenitor", 
                                    "^10$" = "Fibrogenic",
                                    "^11$" = "Fibrogenic",
                                    "^12$" = "MP_Progenitor",
                                    "^13$" = "MP_Progenitor",
                                    "^14$" = "Fibrogenic",
                                    "^15$" = "Fibrogenic",
                                    "^16$" = "Fibrogenic",
                                    "^17$" = "Fibrogenic",
                                    "^18$" = "Basal_Progenitor", #
                                    "^19$" = "Basal_Progenitor",   
                                    "^20$" = "Fibrogenic",
                                    "^21$" = "Basal_Progenitor",
                                    "^22$" = "Fibrogenic"),
        mouse_prim_mets = c("^0$" = "Proliferative",
                             "^1$" = "MP_Progenitor",
                             "^2$" = "Proliferative",
                             "^3$" = "Basal_Progenitor",
                             "^4$" = "Fibrogenic",
                             "^5$" = "Interactive",
                             "^6$" = "Proliferative"),
        dog_prim_mets = c("^0$" = "MP_Progenitor",
                            "^1$" = "Proliferative",   
                            "^2$" = "Basal_Progenitor",   
                            "^3$" = "Basal_Progenitor",
                            "^4$" = "Fibrogenic",
                            "^5$" = "Basal_Progenitor",
                            "^6$" = "Interactive",
                            "^7$" = "COMA",
                            "^8$" = "COMA",
                            "^9$" = "Interactive",
                            "^10$" = "Interactive",
                            "^11$" = "Interactive",
                            "^12$" = "COMA",
                            "^13$" = "Proliferative",
                            "^14$" = "Proliferative",
                            "^15$" = "MP_Progenitor"))



combine_tumor_per_species_new <-
    tribble(~combined,             ~res_value,   ~prim,        ~mets,
            "patient_xeno_prim_mets", 0.3,       "patient_prim", "patient_mets",
            "mouse_prim_mets",       0.35,     "mm_prim",       "mm_mets",
            "dog_prim_mets",         0.3,     "dogs_prim_cancer_cells", "dogs_mets_cancer_cells"
            )
cat_tib <- dplyr::tribble(
    ~category, ~subcategory,   ~cat_expl,
    "H",        "NA",          "Hallmark_paths",
    "C2",       "CP:KEGG",     "KEGG",
    # "C3",       "TFT:GTRD",    "Transcription_factor_targets",
    # "C6",       "NA",          "Oncogenic_signature",
    "C5",       "GO:BP",       "Biological_processes",
    "C2",       "CP:REACTOME", "Reactome")

# we can make gsea panel plots
for (item in seq_len(nrow(combine_tumor_per_species_new))) {
    comb_group <- combine_tumor_per_species_new$combined[item]
    res_value <- combine_tumor_per_species_new$res_value[item]

    object <- 
        qs::qread(str_c("output/seurat_objects/final_combined_sobjs/",
                        comb_group,
                        ".qs")) %>%
        FindClusters(resolution = res_value)


    object$Ann_Level3 <-
        str_replace_all(object$seurat_clusters,
                        Annotation_list[[comb_group]])
    object$Ann_Level2 <- object$Ann_Level3
    object$Ann_Level1 <- "Tumor"
    object$Ann_Level0 <- "Tumor"
    # dimplot_better(object, group_by = "Ann_Level3") + NoLegend()
    # FeaturePlot(object, features = dog$Progenitor, order = TRUE)
    # qs::qsave(object,
    #         str_c("output/seurat_objects/final_tumor_vs_stroma/",
    #                 comb_group,
    #                 "_cancer_cells.qs"))

    make_panel_plot(sobj = object,
                    comparison_col = "Ann_Level3",
                    label = "Ann_Level3",
                    group = comb_group,
                    aggregate_by = c("sample_name", "Ann_Level3"),
                    organism_col = "organism",
                    subset = FALSE,
                    batch_var = "data_source")}

    # for (names in unique(object$unique)) {
    #     object_subset <- subset(object, unique == names)
    #     # reduce data
    #     Idents(object_subset) <- "Ann_Level3"
    #     #dimplot_better(object_subset, group_by = "Ann_Level3")

    #     markers <- 
    #         FindAllMarkers(object = object_subset,
    #                     min.pct = 0.3,
    #                     logfc.threshold = 0.25,
    #                     only.pos = T)
    #     top_markers <- 
    #         markers %>%
    #         as.data.frame() %>%
    #         group_by(cluster) %>% 
    #         filter(p_val_adj < 0.05) %>%
    #         mutate(pct_diff = pct.1 - pct.2) %>%
    #         slice_max(order_by = pct_diff, 
    #                 n = 20,
    #                 with_ties = F) %>%
    #         dplyr::select(gene, cluster) %>%
    #         #filter(!cluster == "Stressed") %>%
    #         mutate(cluster = factor(cluster, 
    #                             levels = c("Fibrogenic", "Interactive", "MP_Progenitor",
    #                                        "Proliferative", "Stressed", "Basal_Progenitor"))) %>%
    #         arrange(cluster)

    #     # get list of top marker genes; including each gene only once
    #     genes <- 
    #         top_markers$gene %>%
    #         unique()
    #     # change to RNA assay
    #     DefaultAssay(object_subset) <- "RNA"
    #     # scale data for visualization
    #     data <-
    #         ScaleData(object = object_subset,
    #                     assay = "RNA")
    #     data <-
    #         subset(x = data,
    #             downsample = min(500, ncol(object_subset)))
    #     heatmap_degs <-
    #         DoHeatmap(object = data,
    #                 features = genes,
    #                 group.by = "Ann_Level3")
    #     # make dot plot
    #     dotplot_degs <-
    #         DotPlot(object = object_subset,
    #             features = genes,
    #             group.by = "Ann_Level3") +
    #             scale_y_discrete(limits = c("Fibrogenic", "Interactive", "MP_Progenitor",
    #                                        "Proliferative", "Stressed", "Basal_Progenitor")) +
    #             RotatedAxis()
    #     # save the dotplot
    #     width <- length(unique(object_subset$Ann_Level3)) * 2
    #     height <- length(unique(object_subset$Ann_Level3)) *2

    #     combine <-
    #         cowplot::plot_grid(heatmap_degs,
    #                         dotplot_degs,
    #                         ncol = 1)

    #     directory <-
    #         str_c("output/figures/final_tumor_vs_stroma/", names)
    #     if (!dir.exists(directory)) {
    #         dir.create(directory, recursive = TRUE)
    #     }

    #     ggsave(str_c(directory, "/", "degs_per_cluster.png"),
    #             plot = combine,
    #             width = width,
    #             height = height,
    #             bg = "white")

    #     qs::qsave(object_subset,
    #             str_c("output/seurat_objects/final_tumor_vs_stroma/",
    #                     names,
    #                     "_cancer_cells.qs"))
    # }
}


# derive the markers for each group by intersecting the markers
new_list_for_markers <-
    tribble(~group1,                    ~group2,                    
            "patient_prim_cancer_cells", "patient_mets_cancer_cells",
            "xeno_prim_human_cancer_cells", "xeno_mets_human_cancer_cells",
            "mm_prim_cancer_cells",      "mm_mets_cancer_cells",   
            "dogs_prim_cancer_cells",    "dogs_mets_cancer_cells")

for (item in seq_len(nrow(new_list_for_markers))) {
    group1 <- new_list_for_markers$group1[item]
    group2 <- new_list_for_markers$group2[item]

    object1 <-
        qs::qread(str_c("output/seurat_objects/final_tumor_vs_stroma/",
                        group1,
                        ".qs"))
    #dimplot_better(object1, group_by = "Ann_Level3")
    object2 <-
        qs::qread(str_c("output/seurat_objects/final_tumor_vs_stroma/",
                        group2,
                        ".qs"))
    #dimplot_better(object2, group_by = "Ann_Level3")
    Idents(object1) <- "Ann_Level3"
    Idents(object2) <- "Ann_Level3"
    markers1 <-
        FindAllMarkers(object = object1,
                        min.pct = 0.33,
                        logfc.threshold = 0.25,
                        only.pos = T)
    markers1_top <-
        markers1 %>%
        as.data.frame() %>%
        mutate(percent_diff = pct.1 - pct.2) %>%
        filter(p_val_adj < 0.05) %>%
        group_by(cluster) %>%
        slice_max(order_by = percent_diff, 
                n = 50,
                with_ties = F) %>%
        dplyr::select(gene, cluster) %>%
        group_by(cluster) %>%
        summarise(genes = list(gene)) %>%
        deframe()
    markers2 <-
        FindAllMarkers(object = object2,
                        min.pct = 0.33,
                        logfc.threshold = 0.25,
                        only.pos = T)
    markers2_top <-
        markers2 %>%
        as.data.frame() %>%
        mutate(percent_diff = pct.1 - pct.2) %>%
        filter(p_val_adj < 0.05) %>%
        group_by(cluster) %>%
        slice_max(order_by = percent_diff, 
                n = 50,
                with_ties = F) %>%
        dplyr::select(gene, cluster) %>%
        group_by(cluster) %>%
        summarise(genes = list(gene)) %>%
        deframe()
    
    # Intersect markers per cluster
    intersected_markers <- list()
    clusters <- 
        intersect(names(markers1_top), names(markers2_top))
    for (cl in clusters) {
        intersected_markers[[cl]] <- intersect(markers1_top[[cl]], markers2_top[[cl]])
    }
    names(intersected_markers) <- clusters
    # Save as a TSV with cluster as rownames and genes as comma-separated strings
    intersected_markers_df <- 
        tibble::tibble(cluster = names(intersected_markers),
                        genes = sapply(intersected_markers, function(x) paste(x, collapse = ",")))
    write_tsv(intersected_markers_df,
        str_c("output/metadata/celltype_tumor/",
                group1,
                "_vs_",
                group2,
                "_markers.tsv"))
    
}

```

## Markers for the tumor cellssubpopulations using DEGS
this chunk will identify the shared markers across the tumor subpopulations using
patient primary and metastatic datasets
```{r markers_for_tumor}

groups <- c(
    "patient_prim_cancer_cells", "patient_mets_cancer_cells",
    "mm_prim_cancer_cells", "mm_mets_cancer_cells",
    "xeno_prim_human_cancer_cells", "xeno_mets_human_cancer_cells",
    "dogs_prim_cancer_cells", "dogs_mets_cancer_cells"
)
library(parallel)
parallel::mclapply(groups, function(group) {
    object <- qs::qread(str_c("output/seurat_objects/final_tumor_vs_stroma/", group, ".qs"))
    object <- run_fdl(sobject = object)
    qs::qsave(object, str_c("output/seurat_objects/final_tumor_vs_stroma/", group, "_fdl.qs"))
    NULL
}, mc.cores = min(length(groups), detectCores()))

for (group in groups) {
    object <- 
        qs::qread(str_c("output/seurat_objects/final_tumor_vs_stroma/",
                        group, "_fdl.qs"))
    DimPlot(object,
            group.by = "Ann_Level3",
            reduction = "fdl") +
        NoLegend() +
        ggtitle(str_c("Tumor", group))
}
dimplot_better(object, group_by = "Ann_Level3") + NoLegend()

obj_list <- list()

MP_Progenitor <- list()
Fibrogenic <- list()
Basal_Progenitor <- list()
Proliferative <- list()
Interactive <- list()
Stressed <- list()

## Human dataset
percent_diff <-
    tribble(~population,          ~percent_diff_num,
            "Synthetic",          0.05,
            "Fibrogenic",         0.20,
            "Progenitor",         0.15,
            "Proliferative",      0.40,
            "Interactive",        0.30,
            "Stressed",           0.15
            )
dimplot_list <- list()

for (group in c(
                "patient_prim_cancer_cells", "patient_mets_cancer_cells",
                "mm_prim_cancer_cells", "mm_mets_cancer_cells",
                # "xeno_prim_human_cancer_cells", "xeno_mets_human_cancer_cells",
                "dogs_prim_cancer_cells", "dogs_mets_cancer_cells"
                )) {
    object <- 
        qs::qread(str_c("output/seurat_objects/final_tumor_vs_stroma/",
                        group,
                        ".qs"))
    obj_list[[group]] <- object


    species <- object$organism[1]
    dimplot_list[[group]] <-
        dimplot_better(object, group_by = "Ann_Level3") + NoLegend() +
        ggtitle(str_c("Tumor", group))
    
    Idents(object) <- object$Ann_Level3
    genes <-
        FindAllMarkers(object,
                        only.pos = TRUE,
                        min.pct = 0.15,
                        logfc.threshold = 0.15)

    markers <-
        genes %>%
        as.data.frame() %>%
        mutate(percent_diff = pct.1 - pct.2) %>%
        #filter(p_val_adj < 0.05) %>%
        group_by(cluster) %>%
        slice_max(order_by = percent_diff, 
                n = 50) %>%
        dplyr::select(gene, cluster) %>%
        group_by(cluster) %>%
        summarise(genes = list(gene)) %>%
        deframe()
    
    MP_Progenitor[[group]] <- markers$MP_Progenitor
    Fibrogenic[[group]] <- markers$Fibrogenic
    Basal_Progenitor[[group]] <- markers$Basal_Progenitor
    Proliferative[[group]] <- markers$Proliferative
    Interactive[[group]] <- markers$Interactive
    Stressed[[group]] <- markers$Stressed

}

fibrogenic_shared <- 
    Reduce(intersect, list(
                        #    Fibrogenic$patient_prim_cancer_cells,
                        #    Fibrogenic$patient_mets_cancer_cells
                        #    Fibrogenic$xeno_prim_human_cancer_cells,
                        #    Fibrogenic$xeno_mets_human_cancer_cells
                           Fibrogenic$dogs_prim_cancer_cells,
                           Fibrogenic$dogs_mets_cancer_cells
                        #    Fibrogenic$mm_prim_cancer_cells,
                        #    Fibrogenic$mm_mets_cancer_cells
                           ))

progenitor_shared <-
     Reduce(intersect, list(
                        #    Basal_Progenitor$patient_prim_cancer_cells,
                        #    Basal_Progenitor$patient_mets_cancer_cells
                        #    Basal_Progenitor$xeno_prim_human_cancer_cells,
                        #    Basal_Progenitor$xeno_mets_human_cancer_cells
                           Basal_Progenitor$dogs_prim_cancer_cells,
                           Basal_Progenitor$dogs_mets_cancer_cells
                        #    Basal_Progenitor$mm_prim_cancer_cells,
                        #    Basal_Progenitor$mm_mets_cancer_cells
                           ))
prolif <-
    Reduce(intersect, list(
                           Proliferative$patient_prim_cancer_cells,
                           Proliferative$patient_mets_cancer_cells
                        #    Proliferative$xeno_prim_human_cancer_cells,
                        #    Proliferative$xeno_mets_human_cancer_cells
                        #    Proliferative$dogs_prim_cancer_cells,
                        #    Proliferative$dogs_mets_cancer_cells
                        #    Proliferative$mm_prim_cancer_cells,
                        #    Proliferative$mm_mets_cancer_cells
                           ))

inter <-
    Reduce(intersect, list(
                        #    Interactive$patient_prim_cancer_cells,
                        #    Interactive$patient_mets_cancer_cells
                        #    Interactive$xeno_prim_human_cancer_cells,
                        #    Interactive$xeno_mets_human_cancer_cells
                           Interactive$dogs_prim_cancer_cells,
                           Interactive$dogs_mets_cancer_cells
                        #    Interactive$mm_prim_cancer_cells,
                        #    Interactive$mm_mets_cancer_cells
                           ))

stress <-
   Reduce(intersect, list(
                        #    Stressed$patient_prim_cancer_cells,
                        #    Stressed$patient_mets_cancer_cells
                           Stressed$xeno_prim_human_cancer_cells,
                           Stressed$xeno_mets_human_cancer_cells
                        #    Stressed$dogs_prim_cancer_cells,
                        #    Stressed$dogs_mets_cancer_cells
                        #    Stressed$mm_prim_cancer_cells,
                        #    Stressed$mm_mets_cancer_cells
                           ))

synthe <-
   Reduce(intersect, list(
                        #    MP_Progenitor$patient_prim_cancer_cells,
                        #    MP_Progenitor$patient_mets_cancer_cells
                           MP_Progenitor$xeno_prim_human_cancer_cells,
                           MP_Progenitor$xeno_mets_human_cancer_cells
                        #    MP_Progenitor$dogs_prim_cancer_cells,
                        #    MP_Progenitor$dogs_mets_cancer_cells
                        #    MP_Progenitor$mm_prim_cancer_cells,
                        #    MP_Progenitor$mm_mets_cancer_cells
                           ))

#plots for cancer panel
patient <-
    list(Fibrogenic = c("COL6A3", "POSTN","FBN1", "CCN1"),
         Interactive = c("CSF1R", "PTPRC", "PTPRJ", "CD74", "MSR1"),
         Progenitor = c("CD36", "ROBO2", "ANO5", "PDGFD"),
         Proliferative = c("TOP2A", "CENPF", "MKI67", "ASPM"),
         Stressed = c("EGLN3", "BNIP3", "HILPDA", "VEGFA"),
         Synthetic = c("RPS28", "RPL36", "RPS13"))

xenograft <-
    list(Fibrogenic = c("COL3A1", "COL6A1", "POSTN", "COL6A3"),
         Interactive = c("PTPRC", "PTPRJ", "MERTK", "CD96"),
         Progenitor = c("PTPRZ1", "ROBO2", "CD36", "PDGFD", "ANO5"),
         Proliferative = c("TOP2A", "ASPM", "CENPF", "MKI67"),
         Stressed = c("NDRG1", "BNIP3", "VEGFA", "EGLN3"),
         Synthetic = c("RPL26", "RPL8","RPL35", "RPS13"))
mouse <-
    list(
        Fibrogenic = c("Setbp1", "Lama4", "Adamts9", "Rbms3", "Pdzrn3", " Antxr1"),
        Interactive = c("Alcam", "Ptprc", "Ptprj", "Lcp1"),
        Basal_Progenitor = c("Pten", "Bmp4", "Aqp5", "Crip2"),
        Proliferative = c("Pclaf", "Mki67", "Cenph", "Cenpf"),
        Stressed = c("Hspb7", "Eno3", "Bnip3"),
        Synthetic = c("Rps2", "Rpl10", "Rpl26")
    )

dog <-
    list(Fibrogenic = c("F13A1", "COL11A2", "CHST11", "COL24A1"),
         Interactive = c("ALCAM", "PTPRC", "CSF1R", "CD74", "MSR1"),
         Basal_Progenitor = c("ESRRG", "PTPRD", "ST6GALNAC3", "SRGAP3", "MEGF10"),
         Proliferative = c("CENPF", "ANLN", "KIF4A", "NCAPG"),
         Stressed = c("IGFBP7", "MAP3K5", "ROR1", "VEGFA"),
         Synthetic = c("RPS28", "RPS13", "RPS27"))

```


## compare different tumor subtypes across species
```{r compare_tumor_subtypes_across_species}

Fibrogenic_list <- list()
MP_Progenitor_list <- list()
Basal_Progenitor_list <- list()
Proliferative_list <- list()
Interactive_list <- list()
COMA_list <- list()

for (comb_group in  c(
                "patient_xeno_prim_mets",
                "mouse_prim_mets",
                "dog_prim_mets"
                )) {
    object <- 
        qs::qread(str_c("output/seurat_objects/final_tumor_vs_stroma/",
                        comb_group,
                        "_cancer_cells.qs"))
    if (object$organism[1] == "mouse") {
        object <-
            mouse_to_human_setup(object,
                                harm_vars = "sample_name",
                                 theta = 7)
    }
    if (object$organism[1] == "dog") {
        object <-
            dog_to_human_setup(object,
                               run_harmony = TRUE,
                               harm_vars = c("sample_name",
                                              "data_source"),
                                theta = c(7, 7))
    }
    #dimplot_better(object, group_by = "Ann_Level3")
    for (subpop in unique(object$Ann_Level3)) {
        object_subset <- subset(object, Ann_Level3 == subpop)
        if (subpop == "Fibrogenic") {
            Fibrogenic_list[[comb_group]] <- object_subset
        }
        if (subpop == "MP_Progenitor") {
            MP_Progenitor_list[[comb_group]] <- object_subset
        }
        if (subpop == "Basal_Progenitor") {
            Basal_Progenitor_list[[comb_group]] <- object_subset
        }
        if (subpop == "Proliferative") {
            Proliferative_list[[comb_group]] <- object_subset
        }
        if (subpop == "Interactive") {
            Interactive_list[[comb_group]] <- object_subset
        }
        if (subpop == "COMA") {
            COMA_list[[comb_group]] <- object_subset
        }
    }
}

parallel::mclapply(
    list(Fibrogenic_list,
         MP_Progenitor_list,
         Basal_Progenitor_list,
         Proliferative_list,
         Interactive_list,
         COMA_list),
    function(item) {
        common_genes <-
            Reduce(intersect, list(rownames(item$patient_xeno_prim_mets),
                                   rownames(item$mouse_prim_mets),
                                   rownames(item$dog_prim_mets)))
        # Subset each object to only common genes
        patient <- 
            subset(item$patient_xeno_prim_mets, features = common_genes)
        mouse <- NULL
        if (!is.null(item$mouse_prim_mets)) {
            mouse <- subset(item$mouse_prim_mets, features = common_genes)
        }
        dog <- 
            subset(item$dog_prim_mets, features = common_genes)
        
        # Merge the objects
        merged_object <-
            merge(x = patient,
                  y = c(mouse, dog)) %>%
            JoinLayers() %>%
            process_seurat() %>%
            RunHarmony(group.by.vars = c("sample_name",
                                         "method",
                                         "unique"),
                       theta = c(12, 12, 12),
                       lambda = c(0.1, 0.1, 0.1)) %>%
            process_seurat(reduction = "harmony")
        
        if (!dir.exists("output/seurat_objects/tumor_only/")) {
            dir.create("output/seurat_objects/tumor_only/", recursive = TRUE)
        }
        qs::qsave(merged_object,
                  str_c("output/seurat_objects/tumor_only/",
                        item$patient_xeno_prim_mets$Ann_Level3[1],
                        "_merged.qs"))
        NULL
    },
    mc.cores = min(6, parallel::detectCores())
)


# perform DEGs and GSEA
cat_tib <- dplyr::tribble(
    ~category, ~subcategory,   ~cat_expl,
    "H",        "NA",          "Hallmark_paths",
    "C2",       "CP:KEGG",     "KEGG",
    # "C3",       "TFT:GTRD",    "Transcription_factor_targets",
    # "C6",       "NA",          "Oncogenic_signature",
    "C5",       "GO:BP",       "Biological_processes",
    "C2",       "CP:REACTOME", "Reactome")

for (obj in c("COMA_merged", "Fibrogenic_merged",
             "MP_Progenitor_merged", "Basal_Progenitor_merged",
             "Proliferative_merged", "Interactive_merged")) {
    object <- 
        qs::qread(str_c("output/seurat_objects/tumor_only/", obj, ".qs"))

    dimplot_better(object, group_by = "unique") + NoLegend() +
        ggtitle(str_c("Tumor", obj))
    object$organisms <- "human"

    make_panel_plot(sobj = object,
                    comparison_col = "unique",
                    label = "unique",
                    group = obj,
                    aggregate_by = c("sample_name", "unique"),
                    organism_col = "organisms",
                    subset = FALSE,
                    batch_var = "data_source")
}

   make_panel_plot(sobj = object,
                    comparison_col = "Ann_Level3",
                    label = "Ann_Level3",
                    group = comb_group,
                    aggregate_by = c("sample_name", "Ann_Level3"),
                    organism_col = "organism",
                    subset = FALSE,
                    batch_var = "data_source")}
```