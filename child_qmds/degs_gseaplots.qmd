Run the differential expression analysis and gene set enrichment analysis on
all of the samples that were split out in the previous step. This will generate
volcano plots and GSEA plots for each of the samples. The results will be
saved in the `output/degs` and `output/figures/gsea` directories.

## Find the optimal resolution for clustering for tumor cells

```{r clustree, echo = FALSE}
all_groups <-
    c("patient_prim_cancer_cells",
      "patient_mets_cancer_cells",
      "mm_prim_cancer_cells",
      "mm_mets_cancer_cells",
      "xeno_prim_human",
      "xeno_mets_human",
      "patient_prim_normal_cells",
      "patient_mets_normal_cells",
      "xeno_prim_mouse",
      "xeno_mets_mouse",
      "mm_prim_normal_cells",
      "mm_mets_normal_cells")

sil_val_list <- list()
clustrees <- list()

for (i in seq_len(length(all_groups))) {
    group <- all_groups[i]

    object <- qs::qread(str_c("output/seurat_objects/tumor_vs_stroma/",
                              group,
                              ".qs"))

    min_cell_silhouette <- 65000
    n_cells <- length(Cells(object))
    keep_n_cells <- min(min_cell_silhouette, n_cells)
    set.seed(63249528)
    res_score <-
        optimize_silhouette(sobject = object[, sample(1:n_cells, keep_n_cells)],
                            test_res = seq(0.1, 0.9, by = 0.1),
                            summary_plot = FALSE,
                            reduction = "harmony") %>%
        filter(!is.na(sil_vals)) %>%
        filter(sil_vals == max(sil_vals)) %>%
        slice_head(n = 1) %>%
        dplyr::pull(res_vals)

    sil_val_list[[group]] <- res_score

    resolution_range <- seq(from = 0, to = 1, by = 0.05)
    clustree_sobj <- FindClusters(object,
                                resolution = resolution_range)
    tree <- clustree::clustree(clustree_sobj,
                                prefix = "RNA_snn_res.") +
            ggtitle(str_c("sil_val was ", res_score, " ", group))

    ggsave(str_c("output/figures/tumor_vs_stroma/clustree/", group, ".png"),
            width = 10,
            height = 10,
            plot = tree)

    #save as qs
    qs::qsave(tree,
              str_c("output/figures/tumor_vs_stroma/clustree/", group, ".qs"))

}
```

##  Differential expression analysis for tumor cells and GSEA
```{r degs_analysis_tumor, echo = FALSE}
#| cache.vars: panel_plot_list
theme_set(
    theme_classic(base_size = 20) +
    theme(
        axis.title.y = element_text(
            margin = ggplot2::margin(0, 20, 0, 0),
            size = 10,
            color = "black",
            face = "bold"
        ),
        axis.title.x = element_text(
            hjust = 0.5,
            margin = ggplot2::margin(20, 0, 0, 0),
            size = 10,
            color = "black",
            face = "bold"
        ),
        plot.title = element_text(
            hjust = 0.5,
            size = 10,
            face = "bold"
        ),
        legend.text = element_text(size = 8, face = "bold")
    )
)

#GSEA Miltilevel
cat_tib <- dplyr::tribble(
    ~category, ~subcategory,   ~cat_expl,
    "H",        "NA",          "Hallmark_paths",
    "C2",       "CP:KEGG",     "KEGG",
    "C3",       "TFT:GTRD",    "Transcription_factor_targets",
    "C6",       "NA",          "Oncogenic_signature",
    "C5",       "GO:BP",       "Biological_processes",
    "C2",       "CP:REACTOME", "Reactome")

panel_plots <- list()

object_list <-
    tribble(~group,                         ~res_value,
            "patient_prim_cancer_cells",    0.1,
            "patient_mets_cancer_cells",    0.1,
            "mm_prim_cancer_cells",         0.3,
            "mm_mets_cancer_cells",         0.3,
            "xeno_prim_human",              0.15,
            "xeno_mets_human",              0.1,
            "patient_prim_normal_cells",    0.15,
            "patient_mets_normal_cells",    0.05,
            "xeno_prim_mouse",              0.1,
            "xeno_mets_mouse",              0.1,
            "mm_prim_normal_cells",         0.25,
            "mm_mets_normal_cells",         0.2)

# run force directed layout

for (i in seq_len(nrow(object_list))) {
    group <- object_list$group[i]
    res_value <- object_list$res_value[i]
    object <-
        qs::qread(str_c("output/seurat_objects/tumor_vs_stroma/",
                        group,
                        ".qs"))
    object <- 
        FindClusters(object, resolution = res_value)

    force_directed_layout <- 
        run_fdl(sobject = object)

    split_fdl_plot <- 
        dimplot_better(force_directed_layout,
                       group_by= "new_annot_clust",
                       reduction = "fdl") +
            NoLegend()

    ggsave(str_c("output/figures/tumor_vs_stroma/",
                group,
                "/",
                "fdl_plot.png"),
            plot = split_fdl_plot,
            width = 10,
            height = 10)
}


# Run GSEA 
for (i in seq_len(nrow(object_list))) {
    group <- object_list$group[i]
    res_value <- object_list$res_value[i]

    object <-
        qs::qread(str_c("output/seurat_objects/tumor_vs_stroma/",
                        group,
                        ".qs"))

    object <- 
        FindClusters(object, resolution = res_value)

    make_panel_plot(sobj = object,
                    cluster_column = "seurat_clusters",
                    label = "seurat_clusters",
                    group = group)
}



```


## Save the celltypes metadata 
```{r celltypes_metadata, echo = FALSE}
# Save the celltypes excel out with seurat clusters and celltypes annotation info
object_list <-
    tribble(~group,                         ~res_value,
            "patient_prim_cancer_cells",    0.1,
            "patient_mets_cancer_cells",    0.1,
            "mm_prim_cancer_cells",         0.3,
            "mm_mets_cancer_cells",         0.3,
            "xeno_prim_human",              0.15,
            "xeno_mets_human",              0.1,
            "patient_prim_normal_cells",    0.15,
            "patient_mets_normal_cells",    0.05,
            "xeno_prim_mouse",              0.1,
            "xeno_mets_mouse",              0.1,
            "mm_prim_normal_cells",         0.25,
            "mm_mets_normal_cells",         0.2)

all_data_celltypes <- tibble()

for (i in seq_len(nrow(object_list))) {
    group <- object_list$group[i]
    res_value <- object_list$res_value[i]

    object <-
        qs::qread(
            str_c(
                "output/seurat_objects/tumor_vs_stroma/",
                group,
                ".qs"
            )
        ) %>%
        FindClusters(resolution = res_value)

    object$cell_types_string <- "NA"
    object$med_cellscore_string <- "NA"
    celltype_df <-
        object@meta.data %>%
        select(seurat_clusters) %>%
        as_tibble() %>%
        mutate(group = group,
               assigned_celltype = NA,
               cell_types_string = NA,
               med_cellscore_string = NA,
               NCH_assignment = NA,
               NCI_assignment = NA,
               SJ_assignment = NA) %>%
        distinct() %>%
        arrange(seurat_clusters)
    for (i in seq_len(nrow(celltype_df))) {
        temp_obj <-
            subset(x = object,
                   seurat_clusters == celltype_df$seurat_clusters[i])
        cell_types_percent <- 
            table(temp_obj$annotations) %>%
            as.data.frame() %>%
            arrange(desc(Freq), .by_group = TRUE) %>%
            slice_head(n=5) %>%
            mutate(Percentage = Freq / sum(Freq) * 100) %>%
            group_by(Var1) %>%
            mutate(med_cellscore = median(temp_obj$cell_scores[temp_obj$annotations == Var1]) %>% 
                round(2))

        celltype_df$assigned_celltype[i] <- 
            cell_types_percent$Var1[1] %>%
            as.character()

        # Create a string of Var1 and Percentage
        celltype_df$cell_types_string[i] <- 
            paste(cell_types_percent$Var1,
                  cell_types_percent$Percentage %>% round(1),
                  sep = ":",
                  collapse = ",")

        celltype_df$med_cellscore_string[i] <- 
            paste(cell_types_percent$Var1, 
                  cell_types_percent$med_cellscore,
                  sep = ":",
                  collapse = ",")
    }

    all_data_celltypes <-
        celltype_df %>%
        rbind(all_data_celltypes)
}
# Add date and time to the filename
timestamp <- format(Sys.time(), "%Y%m%d_%H%M%S")
filename <- str_c("output/cluster_and_celltype/all_data_celltypes_",
                  timestamp,
                  ".tsv")
write_tsv(x = all_data_celltypes, file = filename)

```


## Annotate the cancer clusters manually
labelling the clusters based on the cell types and the cell cycle phase
1. Tumor_Inflammatory: The supopulation of tumor that have the following pathways up: 
    Kegg_graft_vs_host_disease,
    Kegg_autoimmune_thyroid_disease,
    Kegg_graft_vs_host_disease,
    Kegg_Allograft _rejection,
    Kegg_ccomplement_and_coagulation_cascades
    Reactome_Defensis pathways.
    reactome_interferon_gamma_signaling,
    GOBP_antibacterial_humoral_immune_reponse

2. Tumor_Metablolic: pathways up: 
    Kegg_oxidative_phosphorylation,
    Kegg_preoteasome,
    Kegg_glutathione_metabolism,
    kegg_ribosome,
    Kegg_parkinsons_disease,
    reactone_resporatory_electron_transport,
    Reactome_mitochondrial_electron_transport,
    Reactome_the_citric_acid_TCA_cycle
    reactome_selenoamino_acid_metabolism

3. Tumor_Interractive: pathways up:
    Kegg_neurotropin_signalling_pathway,
    Kegg_insulin_signalling_pathway,
    Kegg_ERBB_signalling_pathway,
    Kegg_TGF_beta_signalling_pathway,
    KEGG_ECM_receptor_interaction,
    KEGG_TOll_like_receptor_signalling_pathway,
    LEGG_cell_adhesion_molecules,
    Kegg_focal_adhesion,
    Kegg_cytokine_cytokine_receptor_interaction

4. Tumor_Cycling: pathways up:
    Kegg_cell_cycle,
    Kegg_DNA_replication,
    Kegg_p53_signalling_pathway,
    Kegg_oocyte_meiosis,
    Kegg_mismatch_repair,
    Kegg_base_excision_repair,
    Kegg_nucleotide_excision_repair

5. Tumor_Secretory: pathways up:
    Kegg_protein_processing_in_endoplasmic_reticulum,
    Kegg_endocytosis,
    Kegg_phagosome,
    Kegg_Lysosome,
    Kegg_autophagy,
    Kegg_mTOR_signalling_pathway,
    Kegg_AMPK_signalling_pathway

6. Tumor_Quiescent: pathways up: not much

7. Tumor_Invasive: pathways up: This seems to be interractive as well
    Reactome degradation of ECM
    Raactome_collagen_degradation,
    Kegg_TGF_beta_signalling_pathway, 
    Reactome_Collagen_modification
    Reactome_ECM_proteolysis
    Reactine_non_integrin_membrane_ecm_interactions
    Reactome_cellular_response_to_chemical_stimulus
    Reactome_ECM_pro
    Reactome_MET_promotes_cell_motility



8. Tumor_ImmuneRegulatory: pathways up:
    Reactome_Interluken_10_signalling, #anti-inflammatory IL10
    Reactome_Immuneorelatory_interactions_between_lymphoid_and_non_lymphoid_cells,
    Reactome_antimicrobial_peptides,
    Reactome_PD1_signalling,
    Reacton_interferon_alpha_beta_signalling : regulate NK cells activation


```{r annotate_cancer_clusters, echo = FALSE}

object_list <-
    tribble(~group,                         ~res_value,
            "patient_prim_cancer_cells",    0.1,
            "patient_mets_cancer_cells",    0.1,
            "mm_prim_cancer_cells",         0.3,
            "mm_mets_cancer_cells",         0.3,
            "xeno_prim_human",              0.15,
            "xeno_mets_human",              0.1)

for (i in seq_len(nrow(object_list))) {
    group <- object_list$group[i]
    res_value <- object_list$res_value[i]

    object <-
        qs::qread(
            str_c(
                "output/seurat_objects/tumor_vs_stroma/",
                group,
                ".qs"
            )
        ) %>%
        FindClusters(resolution = res_value)

    object$Ann_Level0 <- "Tumor"
    object$Ann_Level1 <- "Tumor"

    sc_dimplot <-
        dimplot_better(object,
                     group_by = "seurat_clusters") +
            NoLegend()

    sample_dimplot <-
        dimplot_better(object,
                     group_by = "sample_name") +
            NoLegend()

    object <-
        kill_cc(object,
                show_plot = FALSE)
    
    cc_dimplot <-
        dimplot_better(object,
                      group_by = "Phase") +
            NoLegend()

    if (group == "patient_prim_cancer_cells") {
        object$Ann_Level3 <-
            str_replace_all(object$seurat_clusters,
                          c("0" = "Tumor_Metabolic",    #metabolic phenotype
                            "1" = "Tumor_Interactive",   #collagen and ECM phenotype
                            "2" = "Tumor_Cycling",   #actively dividing G2M phase
                            "3" = "Tumor_Quiescent",   
                            "4" = "Tumor_Interractive",   #
                            "5" = "Tumor_ImmuneRegulatory",  #Immune regulatory interraction, IL10
                            "6" = "Tumor_Inflammatory",
                            "7" = "Tumor_Inflammatory"))
    }
    if (group == "patient_mets_cancer_cells") {
        object$Ann_Level3 <-
            str_replace_all(object$seurat_clusters,
                          c("0" = "Tumor_Interractive",
                            "1" = "Tumor_Cycling",
                            "2" = "Tumor_Quiescent",
                            "3" = "Tumor_Inflammatory",
                            "4" = "Tumor_Quiescent",
                            "5" = "Tumor_Quiescent",
                            "6" = "Tumor_Quiescent",
                            "7" = "Tumor_ImmuneRegulatory",
                            "8" = "Tumor_Interactive",
                            "9" = "Tumor_Quiescent"))
    }
    if (group == "mm_prim_cancer_cells") {       #KEGG pathways are good to differentiate the clusters
        object$Ann_Level3 <-
            str_replace_all(object$seurat_clusters,
                          c("0" = "Tumor_Cycling",
                            "1" = "Tumor_Metabolic",
                            "2" = "Tumor_Inflammatory",    #not sure about this, Rho_gtpase pathways
                            "3" = "Tumor_Interactive",   #invasive or ECM degradation and hedgehog signaling
                            "4" = "Tumor_ImmuneRegulatory",
                            "5" = "Tumor_Quiescent"))
    }
    if (group == "mm_mets_cancer_cells") {
        object$Ann_Level3 <-
            str_replace_all(object$seurat_clusters,
                          c("0" = "Tumor_Inflammatory",    #rho family up
                            "1" = "Tumor_Interractive",
                            "2" = "Tumor_Cycling",
                            "3" = "Tumor_Metabolic",
                            "4" = "Tumor_ImmuneRegulatory",
                            "5" = "Tumor_Quiescent"))
    }
    if (group == "xeno_prim_human") {
        object$Ann_Level3 <-
            str_replace_all(object$seurat_clusters,         #need to work more on this, its hard
                          c("0" = "Tumor_Metabolic",
                            "1" = "Tumor_Interractive",
                            "2" = "Tumor_Quiescent",
                            "3" = "Tumor_Cycling",
                            "4" = "Tumor_Inflammatory",
                            "5" = "Tumor_Quiescent",
                            "6" = "Tumor_ImmuneRegulatory",
                            "7" = "Tumor_Inflammatory",
                            "8" = "Tumor_Quiescent"))
    }
    if (group == "xeno_mets_human") {
        object$Ann_Level3 <-
            str_replace_all(object$seurat_clusters,
                          c("0" = "Tumor_Interractive",
                            "1" = "Tumor_ImmuneRegulatory",
                            "2" = "Tumor_Metabolic",
                            "3" = "Tumor_Inflammatory",
                            "4" = "Tumor_Cycling",
                            "5" = "Tumor_Cycling",
                            "6" = "Tumor_Quiescent"))
    }

    object$Ann_Level2<- object$Ann_Level3

    annotation_dimplot <-
        dimplot_better(object,
                     group_by = "Ann_Level3") +
            NoLegend()

    panel_plots <-
        patchwork::wrap_plots(
            sc_dimplot,
            sample_dimplot,
            cc_dimplot,
            annotation_dimplot,
            nrow = 2
        )

    ggsave(str_c("output/figures/tumor_vs_stroma/",
                group,
                "/",
                "final_annotation_plot.png"),
            plot = panel_plots,
            width = 14,
            height = 14)

    qs::qsave(object,
              str_c("output/seurat_objects/final_tumor_vs_stroma/",
                    group,
                    ".qs"))
}

```



