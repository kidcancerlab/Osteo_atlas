Run the differential expression analysis and gene set enrichment analysis on
all of the samples that were split out in the previous step. This will generate
volcano plots and GSEA plots for each of the samples. The results will be
saved in the `output/degs` and `output/figures/gsea` directories.

## Find the optimal resolution for clustering for tumor cells
```{r clustree, echo = FALSE}
all_groups <-
    c("patient_prim_cancer_cells",
      "patient_mets_cancer_cells",
      "mm_prim_cancer_cells",
      "mm_mets_cancer_cells",
      "xeno_prim_human",
      "xeno_mets_human",
      "dogs_prim_cancer_cells",
      "dogs_mets_cancer_cells",
      "patient_prim_normal_cells",
      "patient_mets_normal_cells",
      "xeno_prim_mouse",
      "xeno_mets_mouse",
      "mm_prim_normal_cells",
      "mm_mets_normal_cells",
      "dogs_prim_normal_cells",
      "dogs_mets_normal_cells")

sil_val_list <- list()
clustrees <- list()

for (i in seq_len(length(all_groups))) {
    group <- all_groups[i]

    object <- 
        qs::qread(str_c("output/seurat_objects/tumor_vs_stroma/",
                        group,
                        ".qs"))
    #dimplot_better(object, group_by = "new_annot_clust") + NoLegend()
    min_cell_silhouette <- 65000
    n_cells <- length(Cells(object))
    keep_n_cells <- min(min_cell_silhouette, n_cells)
    set.seed(63249528)
    res_score <-
        optimize_silhouette(sobject = object[, sample(1:n_cells, keep_n_cells)],
                            test_res = seq(0.05, 0.9, by = 0.05),
                            summary_plot = FALSE,
                            reduction = "harmony") %>%
        filter(!is.na(sil_vals)) %>%
        filter(sil_vals == max(sil_vals)) %>%
        slice_head(n = 1) %>%
        dplyr::pull(res_vals)

    sil_val_list[[group]] <- res_score

    resolution_range <- seq(from = 0, to = 1, by = 0.05)
    clustree_sobj <- 
        FindClusters(object,
        resolution = resolution_range)
    tree <- 
        clustree::clustree(clustree_sobj,
                            prefix = "RNA_snn_res.") +
            ggtitle(str_c("sil_val was ", res_score, " ", group))

    directory <-
        "output/figures/tumor_vs_stroma/clustree/"
    if (!dir.exists(directory)) {
        dir.create(directory, recursive = TRUE)
    }
    ggsave(str_c("output/figures/tumor_vs_stroma/clustree/", group, ".png"),
            width = 10,
            height = 10,
            plot = tree)

    #save as qs
    qs::qsave(tree,
              str_c("output/figures/tumor_vs_stroma/clustree/", group, ".qs"))
}

cellss <-
    subset(object1, seurat_clusters == "0") %>%
    colnames()

DimPlot(object,
        cells.highlight = cellss,
        label = TRUE)
```

##  Differential expression analysis for tumor cells and GSEA
```{r degs_analysis_tumor, echo = FALSE}
#| cache.vars: panel_plot_list
theme_set(
    theme_classic(base_size = 20) +
    theme(
        axis.title.y = element_text(
            margin = ggplot2::margin(0, 20, 0, 0),
            size = 10,
            color = "black",
            face = "bold"
        ),
        axis.title.x = element_text(
            hjust = 0.5,
            margin = ggplot2::margin(20, 0, 0, 0),
            size = 10,
            color = "black",
            face = "bold"
        ),
        plot.title = element_text(
            hjust = 0.5,
            size = 10,
            face = "bold"
        ),
        legend.text = element_text(size = 8, face = "bold")
    )
)

# load the tsv for human_dog gene orthologs
orthologs <-
    read_tsv("input/downloads/dog_human_gene_orthologs.txt")

#GSEA Miltilevel
cat_tib <- dplyr::tribble(
    ~category, ~subcategory,   ~cat_expl,
    "H",        "NA",          "Hallmark_paths",
    "C2",       "CP:KEGG",     "KEGG",
    "C3",       "TFT:GTRD",    "Transcription_factor_targets",
    "C6",       "NA",          "Oncogenic_signature",
    "C5",       "GO:BP",       "Biological_processes",
    "C2",       "CP:REACTOME", "Reactome")

panel_plots <- list()

object_list <-
    tribble(~group,                         ~res_value,
            "patient_prim_cancer_cells",    0.15,
            "patient_mets_cancer_cells",    0.15,
            "mm_prim_cancer_cells",         0.4,
            "mm_mets_cancer_cells",         0.25,
            "xeno_prim_human",              0.3,
            "xeno_mets_human",              0.15,
            "dogs_prim_cancer_cells",       0.2,
            "dogs_mets_cancer_cells",       0.1)



# run force directed layout
for (i in seq_len(nrow(object_list))) {
    group <- object_list$group[i]
    res_value <- object_list$res_value[i]
    object <-
        qs::qread(str_c("output/seurat_objects/tumor_vs_stroma/",
                        group,
                        ".qs"))
    object <-
        FindClusters(object,
                    resolution = res_value)
    #dimplot_better(object, group_by = "seurat_clusters", raster=FALSE) +NoLegend()
    force_directed_layout <- 
        run_fdl(sobject = object)

    split_fdl_plot1 <- 
        dimplot_better(force_directed_layout,
                       group_by= "seurat_clusters",
                       reduction = "fdl") +
            NoLegend()
    
    split_fdl_plot2 <-
        dimplot_better(force_directed_layout,
                       group_by = "new_annot_clust",
                       reduction = "fdl") +
            NoLegend()
    
    split_fdl_plot3 <- 
        dimplot_better(force_directed_layout,
                       group_by = "sample_name",
                       reduction = "fdl") +
            NoLegend()
    
    split_fdl_plot4 <-
        dimplot_better(force_directed_layout,
                       group_by = "data_source",
                       reduction = "fdl") +
            NoLegend()

    split_fdl_plots <-
        patchwork::wrap_plots(
            split_fdl_plot1,
            split_fdl_plot2,
            split_fdl_plot3,
            split_fdl_plot4,
            ncol = 2
        )
    
    directory <-
        str_c("output/figures/tumor_vs_stroma/", group)

    if (!dir.exists(directory)) {
        dir.create(directory, recursive = TRUE)
    }
    ggsave(str_c("output/figures/tumor_vs_stroma/",
                group,
                "/",
                "fdl_plot.png"),
            plot = split_fdl_plots,
            width = 16,
            height = 16)
    qs::qsave(force_directed_layout,
              str_c("output/seurat_objects/tumor_vs_stroma/",
                    group,
                    "_fdl.qs"))
}

# Run GSEA 
for (i in seq_len(nrow(object_list))) {
    group <- object_list$group[i]
    res_value <- object_list$res_value[i]

    object <-
        qs::qread(str_c("output/seurat_objects/tumor_vs_stroma/",
                        group,
                        ".qs"))

    object <- 
        FindClusters(object,
                    resolution = res_value)
    #dimplot_better(object, group_by = "seurat_clusters", raster =F)

    make_panel_plot(sobj = object,
                    comparison_col = "seurat_clusters",
                    label = "seurat_clusters",
                    group = group,
                    aggregate_by = c("sample_name", "seurat_clusters"),
                    organism_col = "organism",
                    subset = FALSE,
                    batch_var = "data_source")
}


```


## Save the celltypes metadata 
```{r celltypes_metadata, echo = FALSE, eval = FALSE, include = FALSE}
# Save the celltypes excel out with seurat clusters and celltypes annotation info
object_list <-
    tribble(~group,                         ~res_value,
           "patient_prim_cancer_cells",    0.15,
            "patient_mets_cancer_cells",    0.15,
            "mm_prim_cancer_cells",         0.4,
            "mm_mets_cancer_cells",         0.25,
            "xeno_prim_human",              0.2,
            "xeno_mets_human",              0.15,
            "dogs_prim_cancer_cells",       0.1,
            "dogs_mets_cancer_cells",       0.1,
            "patient_prim_normal_cells",    0.15,
            "patient_mets_normal_cells",    0.05,
            "xeno_prim_mouse",              0.1,
            "xeno_mets_mouse",              0.1,
            "mm_prim_normal_cells",         0.25,
            "mm_mets_normal_cells",         0.2,
            "dogs_prim_normal_cells",       0.1,
            "dogs_mets_normal_cells",       0.15)

all_data_celltypes <- tibble()

for (i in seq_len(nrow(object_list))) {
    group <- object_list$group[i]
    res_value <- object_list$res_value[i]

    object <-
        qs::qread(
            str_c(
                "output/seurat_objects/tumor_vs_stroma/",
                group,
                ".qs"
            )
        ) %>%
        FindClusters(resolution = res_value)

    object$cell_types_string <- "NA"
    object$med_cellscore_string <- "NA"
    celltype_df <-
        object@meta.data %>%
        select(seurat_clusters) %>%
        as_tibble() %>%
        mutate(group = group,
               assigned_celltype = NA,
               cell_types_string = NA,
               med_cellscore_string = NA,
               NCH_assignment = NA,
               NCI_assignment = NA,
               SJ_assignment = NA) %>%
        distinct() %>%
        arrange(seurat_clusters)
    for (i in seq_len(nrow(celltype_df))) {
        temp_obj <-
            subset(x = object,
                   seurat_clusters == celltype_df$seurat_clusters[i])
        cell_types_percent <- 
            table(temp_obj$annotations) %>%
            as.data.frame() %>%
            arrange(desc(Freq), .by_group = TRUE) %>%
            slice_head(n=5) %>%
            mutate(Percentage = Freq / sum(Freq) * 100) %>%
            group_by(Var1) %>%
            mutate(med_cellscore = median(temp_obj$cell_scores[temp_obj$annotations == Var1]) %>% 
                round(2))

        celltype_df$assigned_celltype[i] <- 
            cell_types_percent$Var1[1] %>%
            as.character()

        # Create a string of Var1 and Percentage
        celltype_df$cell_types_string[i] <- 
            paste(cell_types_percent$Var1,
                  cell_types_percent$Percentage %>% round(1),
                  sep = ":",
                  collapse = ",")

        celltype_df$med_cellscore_string[i] <- 
            paste(cell_types_percent$Var1, 
                  cell_types_percent$med_cellscore,
                  sep = ":",
                  collapse = ",")
    }

    all_data_celltypes <-
        celltype_df %>%
        rbind(all_data_celltypes)
}
# Add date and time to the filename
timestamp <- format(Sys.time(), "%Y%m%d_%H%M%S")
directory <-
    "output/cluster_and_celltype"
if (!dir.exists(directory)) {
    dir.create(directory, recursive = TRUE)
}
filename <- 
    str_c("output/cluster_and_celltype/all_data_celltypes_",
            timestamp,
            ".tsv")
write_tsv(x = all_data_celltypes, file = filename)

```


### To compare the what degs match across the different groups
```{r degs_comparison, echo = FALSE}
# dog and human orthologs
orthologs <-
    read_tsv("input/downloads/dog_human_gene_orthologs.txt")

#object list
object_list <-
    tribble(~group,                         ~res_value,
            "patient_prim_cancer_cells",    0.15,
            "patient_mets_cancer_cells",    0.15,
            "mm_prim_cancer_cells",         0.4,
            "mm_mets_cancer_cells",         0.25,
            "xeno_prim_human",              0.3,
            "xeno_mets_human",              0.15,
            "dogs_prim_cancer_cells",       0.1,
            "dogs_mets_cancer_cells",       0.1)

for (i in seq_len(nrow(object_list))) {
    group1 <- object_list$group[i]
    res_value1 <- object_list$res_value[i]

    object1 <-
        qs::qread(
            str_c(
                "output/seurat_objects/tumor_vs_stroma/",
                group1,
                ".qs"
            )
        ) %>%
        FindClusters(resolution = res_value1)

    dimplot1 <- 
        dimplot_better(object1,
                        group_by = "seurat_clusters")

    #grab the pseudobulk degs_results, to account for the gene loss during conversion 150 are set
    for (s_cluster in unique(object1$seurat_clusters)) {
        genelist <-
            read_tsv(str_c(
                    "output/degs/",
                    group1,
                    "/seurat_clusters/",
                    s_cluster,
                    "_degs.tsv"
                )) %>%
            filter(log2FoldChange > 1 & padj < 0.01) %>% 
            arrange(desc(log2FoldChange)) %>%
            select(gene) %>%
            slice_head(n = 100) %>%
            as.list()

        big_featureplot_list <- list()
        big_Vlnplot_list <- list()

        for (item in seq_len(nrow(object_list))) {
            group2 <- object_list$group[item]
            res_value2 <- object_list$res_value[item]
            if (group1 != group2) {
                object2 <-
                    qs::qread(
                        str_c(
                            "output/seurat_objects/tumor_vs_stroma/",
                            group2,
                            ".qs"
                        )
                    ) %>%
                    FindClusters(resolution = res_value2)

                #dimplot_better(object2, group_by = "seurat_clusters")

                new_gene_list <- genelist$gene

                if (object1$organism[1] == "human" && object2$organism[1] == "mouse") {
                    new_gene_list <- 
                        nichenetr::convert_human_to_mouse_symbols(genelist$gene) %>%
                        na.omit() %>%
                        unique()
                    }

                if (object1$organism[1] == "human" && object2$organism[1] == "dog") {
                    new_gene_list <- 
                        orthologs$dog_gene_name[match(genelist$gene, orthologs$human_gene_ortholog)] %>%
                        na.omit() %>%
                        unique()
                    }
                
                if (object1$organism[1] == "mouse" && object2$organism[1] == "human") {
                    new_gene_list <- 
                        nichenetr::convert_mouse_to_human_symbols(genelist$gene) %>%
                        na.omit() %>%
                        unique()
                    }
                
                if (object1$organism[1] == "mouse" && object2$organism[1] == "dog") {
                    #first convert to human with nichenetr and then to dogs
                    new_gene_list <- 
                        orthologs$dog_gene_name[match(nichenetr::convert_mouse_to_human_symbols(genelist$gene), orthologs$human_gene_ortholog)] %>%
                        na.omit() %>%
                        unique()
                    }

                if (object1$organism[1] == "dog" && object2$organism[1] == "human") {
                    new_gene_list <- 
                        orthologs$human_gene_ortholog[match(genelist$gene, orthologs$dog_gene_name)] %>%
                        na.omit() %>%
                        unique()
                    }
                
                if (object1$organism[1] == "dog" && object2$organism[1] == "mouse") {
                    new_gene_list <- 
                        orthologs$human_gene_ortholog[match(genelist$gene, orthologs$dog_gene_name)] %>%
                        nichenetr::convert_human_to_mouse_symbols() %>%
                        as.character() %>%
                        na.omit() %>%
                        unique()
                    }

                entire_matrix <- object2@assays$RNA$counts

                genelist_present <- 
                    new_gene_list[new_gene_list %in% rownames(entire_matrix)]

                # percent_cells <- 
                #     (length(genelist_present) / length(genelist$gene)) * 100
                # if (percent_cells < 20.1) {
                #     next
                # }
                cell_ranks <-
                    AUCell::AUCell_run(exprMat = entire_matrix,
                                    geneSets = genelist_present)
                
                object2[[s_cluster]] <- AUCell::getAUC(cell_ranks)[1,]

                feature_plot <-
                        FeaturePlot(object2,
                                    s_cluster,
                                    cols = c("#EEEEEE", "#ae0600"),
                                    min.cutoff = 0.1,
                                    pt.size = 1,
                                    order = TRUE) +
                            coord_fixed() +
                            ggtitle(str_c(s_cluster, group2))
                big_featureplot_list[[s_cluster]][[group2]] <- feature_plot

                Vln_plot <- 
                    VlnPlot(object2,
                            features = s_cluster,
                            pt.size = 0,
                            group.by = "seurat_clusters") +
                        ggtitle(str_c(s_cluster, " on  ", group2))

                big_Vlnplot_list[[s_cluster]][[group2]] <- Vln_plot
            }
            big_panel_plot1 <- 
                cowplot::plot_grid(dimplot1,
                                    plotlist = big_featureplot_list[[s_cluster]],
                                    ncol = 2)
            big_panel_plot2 <- 
                cowplot::plot_grid(dimplot1,
                                    plotlist = big_Vlnplot_list[[s_cluster]],
                                    ncol = 2)
                
            length_var <- 
                if (length(big_featureplot_list) %% 2 == 1) {
                    length(big_featureplot_list) + 1
                } else {
                    length(big_featureplot_list)
                }

            height <- (length_var/2 * 7) + 14
            directory <-
                str_c("output/figures/tumor_vs_stroma/",
                        group1,
                        "/tumor_degs_comparison")

            if (!dir.exists(directory)) {
                dir.create(directory, recursive = TRUE)
            }
            ggsave(str_c(directory,
                        "/cluster_",
                        s_cluster,
                        "aucell.png"),
                    plot = big_panel_plot1,
                    width = 14,
                    height = height,
                    limitsize = FALSE,
                    bg = "white")
            ggsave(str_c(directory,
                        "/cluster_",
                        s_cluster,
                        "vln.png"),
                    plot = big_panel_plot2,
                    width = 14,
                    height = height,
                    limitsize = FALSE,
                    bg = "white")
        }
    }
}

hist(genelist$percent_target_degs)
```

## Heatmap fom previous annotations

```{r previous_annotation_heatmap, echo = FALSE}
object_list <-
    tribble(~group,                         ~res_value,
            "patient_prim_cancer_cells",    0.15,
            "patient_mets_cancer_cells",    0.15,
            "mm_prim_cancer_cells",         0.4,
            "mm_mets_cancer_cells",         0.25,
            "xeno_prim_human",              0.3,
            "xeno_mets_human",              0.15,
            "dogs_prim_cancer_cells",       0.1,
            "dogs_mets_cancer_cells",       0.1)

for (i in seq_len(nrow(object_list))) {
    group <- object_list$group[i]
    res_value <- object_list$res_value[i]

    object <-
        qs::qread(
            str_c(
                "output/seurat_objects/tumor_vs_stroma/",
                group,
                ".qs"
            )
        ) %>%
        FindClusters(resolution = res_value)
    #dimplot_better(object, group_by = "seurat_clusters")
    filename <-
        system(paste0(
            "ls output/metadata/celltype_tumor/",
            group,
            "_* | tail -n 1"),
            intern = TRUE)

    old_meta <- 
        read_tsv(filename,
        guess_max = Inf,
        show_col_types = FALSE) %>%
    select(cell_name, Ann_Level3) %>%
    column_to_rownames(var = "cell_name") %>%
    dplyr::rename(old_ann_level3 = Ann_Level3)

    object <-
        AddMetaData(object, metadata = old_meta)

    table_clusters <-
            table(object$seurat_clusters, object$old_ann_level3)
    height <-
        length(unique(object$seurat_clusters))
    
    width <-
        length(unique(object$old_ann_level3))

    heatmap_previous_celltypes <-
        pheatmap::pheatmap(table_clusters,
                            cluster_rows = FALSE,
                            cluster_cols = FALSE,
                            display_numbers = TRUE,
                            #breaks = c(10000, 3000, 1000, 100, 10, 0),
                            silent = TRUE,
                            fontsize = 8,
                            fontsize_number = 8,
                            scale = "row",
                            fontsize_row = 8,
                            fontsize_col = 8,
                            color = RColorBrewer::brewer.pal(5, name = "Reds"))

    ggsave(str_c("output/figures/reclustering_tumors/",
                group, 
                "_heatmap_pre_celltype.png"),
        plot = heatmap_previous_celltypes,
        width = width,
        height = (height),
        bg = "white")

}


```


## Annotate the cancer clusters manually based on the degs gsea

```{r annotate_cancer_clusters, echo = FALSE}

object_list <-
    tribble(~group,                         ~res_value,
            "patient_prim_cancer_cells",    0.15,
            "patient_mets_cancer_cells",    0.15,
            "mm_prim_cancer_cells",         0.4,
            "mm_mets_cancer_cells",         0.25,
            "xeno_prim_human",              0.3,
            "xeno_mets_human",              0.15,
            "dogs_prim_cancer_cells",       0.2,
            "dogs_mets_cancer_cells",       0.1
            )

for (i in seq_len(nrow(object_list))) {
    group <- object_list$group[i]
    res_value <- object_list$res_value[i]

    object <-
        qs::qread(
            str_c(
                "output/seurat_objects/tumor_vs_stroma/",
                group,
                ".qs"
            )
        ) %>%
        FindClusters(resolution = res_value)

    object$Ann_Level0 <- "Tumor"
    object$Ann_Level1 <- "Tumor"

    sc_dimplot <-
        dimplot_better(object,
                     group_by = "seurat_clusters") +
            NoLegend()

    sample_dimplot <-
        dimplot_better(object,
                     group_by = "sample_name") +
            NoLegend()

    object <-
        kill_cc(object,
                show_plot = FALSE)

    cc_dimplot <-
        dimplot_better(object,
                      group_by = "Phase") +
            NoLegend()

    if (group == "patient_prim_cancer_cells") {
        object$Ann_Level3 <-
            str_replace_all(object$seurat_clusters,
                          c("^0$" = "Tumor_Progenitor",   #neuronal and bone development, CD36 degs
                            "^1$" = "Tumor_Fibrogenic",
                            "^2$" = "Tumor_HyperMetabolic",  
                            "^3$" = "Tumor_Proliferative",   
                            "^4$" = "Tumor_Ground",   
                            "^5$" = "Tumor_Interactive",  
                            "^6$" = "Tumor_HyperMetabolic",  # is hypermetabolic coz similar
                            "^7$" = "Tumor_Fibrogenic",
                            "^8$" = "Tumor_HyperMetabolic"))  #by the degs and fdl
    }
    if (group == "patient_mets_cancer_cells") {
        object$Ann_Level3 <-
            str_replace_all(object$seurat_clusters,
                           c("^0$" = "Tumor_HyperMetabolic",    
                            "^1$" = "Tumor_Progenitor",  #neuronal and bone development
                            "^2$" = "Tumor_Interactive",  
                            "^3$" = "Tumor_Proliferative",
                            "^4$" = "Tumor_Fibrogenic",
                            "^5$" = "Tumor_Interactive",
                            "^6$" = "Tumor_Interactive",
                            "^7$" = "Tumor_HyperMetabolic",
                            "^8$" = "Tumor_Ground",
                            "^9$" = "Tumor_Fibrogenic",
                            "^10$" = "Tumor_Interactive",
                            "^11$" = "Tumor_Ground",
                            "^12$" = "Tumor_Ground",
                            "^13$" = "Tumor_HyperMetabolic",
                            "^14$" = "Tumor_Interactive",
                            "^15$" = "Tumor_Fibrogenic",
                            "^16$" = "Tumor_Ground"))
    }
    if (group == "mm_prim_cancer_cells") {       #KEGG pathways are good to differentiate the clusters
        object$Ann_Level3 <-
            str_replace_all(object$seurat_clusters,
                          c("0" = "Tumor_Proliferative",
                            "1" = "Tumor_HyperMetabolic",
                            "2" = "Tumor_Fibrogenic",  
                            "3" = "Tumor_Progenitor",   #neuronal and bone development, axon guidance
                            "4" = "Tumor_Interactive",
                            "5" = "Tumor_Interactive",
                            "6" = "Tumor_Ground",
                            "7" = "Tumor_HyperMetabolic"))
    }
    if (group == "mm_mets_cancer_cells") {
        object$Ann_Level3 <-
            str_replace_all(object$seurat_clusters,
                          c("0" = "Tumor_HyperMetabolic",    #rho family up
                            "1" = "Tumor_Progenitor",   #neuronal and bone development axon, sox10
                            "2" = "Tumor_Proliferative",
                            "3" = "Tumor_Interactive",   
                            "4" = "Tumor_Ground",
                            "5" = "Tumor_Fibrogenic",
                            "6" = "Tumor_Progenitor"))
    }
    if (group == "xeno_prim_human") {
        object$Ann_Level3 <-
            str_replace_all(object$seurat_clusters,      
                          c("^0$" = "Tumor_Fibrogenic",   #neuronal and bone development axon guidance
                            "^1$" = "Tumor_Proliferative",   #not sure
                            "^2$" = "Tumor_HyperMetabolic",
                            "^3$" = "Tumor_Progenitor", 
                            "^4$" = "Tumor_Ground",
                            "^5$" = "Tumor_Ground",
                            "^6$" = "Tumor_Ground",     # BNIP3 expressed usually apoptotic
                            "^7$" = "Tumor_Progenitor",
                            "^8$" = "Tumor_Interactive",
                            "^9$" = "Tumor_Proliferative",
                            "^10$" = "Tumor_Fibrogenic",
                            "^11$" = "Tumor_Ground",
                            "^12$" = "Tumor_Ground",
                            "^13$" = "Tumor_Ground",
                            "^14$" = "Tumor_Fibrogenic",
                            "^15$" = "Tumor_HyperMetabolic"))
    }
    if (group == "xeno_mets_human") {
        object$Ann_Level3 <-
            str_replace_all(object$seurat_clusters,
                          c("0" = "Tumor_Progenitor",
                            "1" = "Tumor_HyperMetabolic",
                            "2" = "Tumor_Interactive",   #not sure
                            "3" = "Tumor_Proliferative",
                            "4" = "Tumor_Fibrogenic",
                            "5" = "Tumor_Ground"))
    }
    if (group == "dogs_prim_cancer_cells") {
        object$Ann_Level3 <-
            str_replace_all(object$seurat_clusters,
                          c("^0$" = "Tumor_Progenitor",
                            "^1$" = "Tumor_Fibrogenic",   #neuronal and bone development axon guidance
                            "^2$" = "Tumor_Proliferative",   #not sure
                            "^3$" = "Tumor_HyperMetabolic",
                            "^4$" = "Tumor_HyperMetabolic",
                            "^5$" = "Tumor_Interactive",
                            "^6$" = "Tumor_Progenitor",
                            "^7$" = "Tumor_Interactive",
                            "^8$" = "Tumor_Interactive",
                            "^9$" = "Tumor_Fibrogenic",
                            "^10$" = "Tumor_Ground",
                            "^11$" = "Tumor_Ground",
                            "^12$" = "Tumor_Ground"))
    }
    if (group == "dogs_mets_cancer_cells") {
        object$Ann_Level3 <-
            str_replace_all(object$seurat_clusters,
                          c("0" = "Tumor_Progenitor",
                            "1" = "Tumor_Proliferative",   #neuronal and bone development axon guidance
                            "2" = "Tumor_Fibrogenic",   #not sure
                            "3" = "Tumor_HyperMetabolic",
                            "4" = "Tumor_Interactive",
                            "5" = "Tumor_Interactive",
                            "6" = "Tumor_HyperMetabolic",
                            "7" = "Tumor_Ground"))
    }
    object$Ann_Level2 <- object$Ann_Level3
    # object$Ann_Level1 <- 
    #     str_replace_all(object$Ann_Level2,
    #                     c("^CAF$" = "Mesenchymal",
    #                       "^Osteoblasts$" = "Mesenchymal",
    #                       "^Macrophages$" = "Immune_Myeloid",
    #                       "^Osteoclast_TAMs$" = "Immune_Myeloid",
    #                       "^Tumor_Proliferative$" = "Tumor",
    #                       "^Tumor_Ground$" = "Tumor",
    #                       "^Tumor_Interactive$" = "Tumor",
    #                       "^Tumor_Metabolic$" = "Tumor",
    #                       "^Tumor_Fibrogenic$" = "Tumor",
    #                       "^Tumor_HyperMetabolic$" = "Tumor",
    #                       "^Tumor_Progenitor$" = "Tumor"))
    
    # object$Ann_Level0 <- 
    #     str_replace_all(object$Ann_Level1,
    #                     c("^Immune_Myeloid$" = "Host",
    #                       "^Epithelial_Endothelial$" = "Host",
    #                       "^Immune_Lymphoid$" = "Host",
    #                       "^Mesenchymal$" = "Host"))

    annotation_dimplot1 <-
        dimplot_better(object,
                     group_by = "Ann_Level3") +
            NoLegend()
    
    annotation_dimplot2 <-
        dimplot_better(object,
                     group_by = "Ann_Level2") +
            NoLegend()
    
    annotation_dimplot3 <-
        dimplot_better(object,
                     group_by = "Ann_Level1") +
            NoLegend()
    
    annotation_dimplot4 <-
        dimplot_better(object,
                     group_by = "Ann_Level0") +
            NoLegend()

    panel_plots <-
        patchwork::wrap_plots(
            sc_dimplot,
            sample_dimplot,
            cc_dimplot,
            annotation_dimplot1,
            annotation_dimplot2,
            annotation_dimplot3,
            annotation_dimplot4,
            ncol = 2
        )

    ggsave(str_c("output/figures/tumor_vs_stroma/",
                group,
                "/",
                "final_annotation_plot.png"),
            plot = panel_plots,
            width = 14,
            height = 28)
    directory <-
        str_c("output/seurat_objects/final_tumor_vs_stroma/")
    if (!dir.exists(directory)) {
        dir.create(directory, recursive = TRUE)
    }
    qs::qsave(object,
              str_c("output/seurat_objects/final_tumor_vs_stroma/",
                    group,
                    ".qs"))

    directory <-
        str_c("output/metadata/celltype_tumor/")
    if (!dir.exists(directory)) {
        dir.create(directory, recursive = TRUE)
    }

    timestamp <- format(Sys.time(), "%Y%m%d_%H%M%S")

    filename <- str_c("output/metadata/celltype_tumor/",
                        group,
                        "_",
                        timestamp,
                        ".tsv")

    object@meta.data %>%
    rownames_to_column(var = "cell_name") %>%
    write_tsv(file = filename)

    print(str_c("Finished processing ", "for ", group))

}

```



## Trial for marker based annotation of tumor subpopulations
```{r markers_based_tumor_annot, echo = FALSE}
## Annotate the cancer clusters based on the markers
tumor_markers <- list(
  Tumor_Metabolic = c("SLC2A1", "HK2", "LDHA", "CA9", "IDH1", "IDH2"),
  Tumor_Proliferative = c("MKI67", "PCNA", "CCND1", "MYC", "E2F1", "TOP2A"),
  Tumor_Ground = c("CD44", "CD24", "EPCAM", "CDH2", "VIM"),
  Tumor_Inflammatory = c("IL6", "TNF", "CCL2", "NFKB1", "PTGS2"),
  Tumor_Osteoblastic = c("ALPL", "RUNX2", "SPP1", "BGLAP", "COL1A1"),
  Tumor_ImmuneRegulatory = c("CD274", "CTLA4", "FOXP3", "TGFB1", "IL10")
)


object_list <-
    tribble(~group,                         ~res_value,
           "patient_prim_cancer_cells",    0.15,
            "patient_mets_cancer_cells",    0.1,
            "mm_prim_cancer_cells",         0.4,
            "mm_mets_cancer_cells",         0.25,
            "xeno_prim_human",              0.15,
            "xeno_mets_human",              0.15,
            "dogs_prim_cancer_cells",       0.1,
            "dogs_mets_cancer_cells",       0.1)

for (i in seq_len(nrow(object_list))) {
    group <- object_list$group[i]
    res_value <- object_list$res_value[i]

    object <-
        qs::qread(
            str_c(
                "output/seurat_objects/tumor_vs_stroma/",
                group,
                ".qs"
            )
        ) %>%
        FindClusters(resolution = res_value)
    
    species <- object$organism[1]
    
    dimplot1 <-
        dimplot_better(object,
                     group_by = "seurat_clusters") +
            NoLegend()
    dimplot2 <-
        dimplot_better(object,
                     group_by = "new_annot_clust") +
            NoLegend()

    entire_matrix <- object@assays$RNA$counts

    big_featureplot_list <- list()

    for (module in names(tumor_markers)) {
        genelist <- tumor_markers[[module]]
        if (species == "mouse") {
            genelist <- 
                nichenetr::convert_human_to_mouse_symbols(genelist) %>%
                na.omit() %>%
                unique()
        }
        genelist_present <- 
            genelist[genelist %in% rownames(entire_matrix)]
        # percent_cells <- 
        #     (length(genelist_present) /length(genelist)) * 100
        # if (percent_cells < 20.1) {
        #     next
        # }
        cell_ranks <-
            AUCell::AUCell_run(exprMat = entire_matrix,
                            geneSets = genelist)
        
        object[[module]] <- AUCell::getAUC(cell_ranks)[1,]

        feature_plot <-
                FeaturePlot(object,
                            module,
                            cols = c("#EEEEEE", "#ae0600"),
                            min.cutoff = 0.15,
                            pt.size = 1,
                            order = TRUE) +
                    coord_fixed() +
                    ggtitle(module)

        big_featureplot_list[[module]] <- feature_plot
    }
    big_panel_plot <- 
        cowplot::plot_grid(dimplot1,
                            dimplot2,
                            plotlist = big_featureplot_list,
                            ncol = 2)

#calculate height and length
    length_var <- 
        if (length(big_featureplot_list) %% 2 == 1) {
            length(big_featureplot_list) + 1
        } else {
            length(big_featureplot_list)
        }

    height <- (length_var/2 * 7) + 14

    ggsave(filename = str_c("output/figures/tumor_vs_stroma/",
                            group,
                            "/",
                            "aucell_subpopulation_plots.png"),
            plot = big_panel_plot,
            width = 16,
            height = height,
            limitsize = FALSE,
            bg = "white")
}


```

## Looking deeper into specific pathways
```{r looking_into_pathways, echo = FALSE}

object_list <-
    tribble(~group,                         ~cluster_num,
            "patient_prim_cancer_cells",    5,
            "patient_mets_cancer_cells",    c(3, 7),
            "mm_prim_cancer_cells",         c(4, 5),
            "mm_mets_cancer_cells",         c(1, 4),
            "xeno_prim_human",              c(4, 5))

for (i in seq_len(nrow(object_list))) {
    group <- object_list$group[i]
    cluster_num <- object_list$cluster_num[i]

    object <-
        qs::qread(
            str_c(
                "output/seurat_objects/final_tumor_vs_stroma/",
                "patient_prim_normal_cells",
                ".qs"
            ))
    tumor_featureplot <- 
                FeaturePlot(object,
                            features = c("COL1A1", "COL1A2", "FBLN1",
                                        "SATB2", "RUNX2", "SOX9"),
                            ncol = 3)
    immune_featureplot <- 
        FeaturePlot(object,
                    features = c("CD3E", "CD4", "CD68",
                                "MUC1", "MS4A1", "ESAM"),
                    ncol = 3)

}

sobj <-
    qs::qread("output/seurat_objects/final_tumor_vs_stroma/patient_mets_cancer_cells.qs")

degs_result <-
    run_degs(sobject = sobj,
            group_by = "seurat_clusters")

gsea_result <-
    run_gsea(degs_result = degs_result,
            category = "C2",
            subcategory = "CP:REACTOME",
            species = sobj$organism[1])

"patient_mets_cancer_cells" 
pat <- "REACTOME_IMMUNOREGULATORY_INTERACTIONS_BETWEEN_A_LYMPHOID_AND_A_NON_LYMPHOID_CELL"

leading <-
    gsea_result$`7` %>% 
    filter(pathway == pat) %>%
    pull(leadingEdge)

make_panel_plot(objecrt)
```


### mislabelled cleanups
Has to be done manually
```{r cleanupids_and_save, echo = FALSE, eval = FALSE}
# date
Patient_prim <-
    qs::qread(
        str_c(
            "output/seurat_objects/final_tumor_vs_stroma/",
            "patient_prim_cancer_cells",
            ".qs"
        ))

ids1 <-
    Patient_prim@meta.data %>%
    filter(Ann_Level3 == "CAF") %>%
    rownames_to_column("cell_ids") %>%
    select(cell_ids)
    

DimPlot(Patient_prim,
        cells.highlight = ids1$cell_ids) 

write_tsv(ids1,
          "misc/mislabelled_ids/patient_prim/Epithelial_Endothelial_1.tsv")


ids2 <-
    Patient_prim@meta.data %>%
    filter(Ann_Level3 == "Osteoblasts") %>%
    rownames_to_column("cell_ids") %>%
    select(cell_ids)

DimPlot(Patient_prim,
        cells.highlight = ids2$cell_ids)    

write_tsv(ids2,
          "misc/mislabelled_ids/patient_prim/Mesenchymal_1.tsv")

# Date
Patient_prim <-
    qs::qread(
        str_c(
            "output/seurat_objects/final_tumor_vs_stroma/",
            "patient_prim_cancer_cells",
            ".qs"
        ))

ids1 <-
    Patient_prim@meta.data %>%
    filter(Ann_Level3 == "fibro") %>%
    rownames()

DimPlot(Patient_prim,
        cells.highlight = ids1)

write_tsv(ids1,
          "misc/mislabelled_ids/patient_prim/Epithelial_Endothelial_2.tsv")


```

```{r annotate_using_patient_data}
harmony_params <-
    list(patient_prim = list(group_by = c("sample_name",
                                          "method",
                                          "data_source"),
                             theta = c(1, 5, 5),
                             lambda = c(0.5, 0.5, 0.5)),
        patient_mets = list(group_by = c("sample_name",
                                         "method",
                                         "data_source"),
                            theta = c(1, 7, 7),
                            lambda = c(0.5, 0.5, 0.5)),
        xeno_prim_human = list(group_by = c("sample_name",
                                            "location",
                                            "data_source"),
                               theta = c(2, 7, 15),
                               lambda = c(0.1, 0.1, 0.1)),
        xeno_mets_human = list(group_by = c("sample_name",
                                            "method",
                                            "data_source"),
                               theta = c(2, 7, 15),
                               lambda = c(0.7, 0.1, 0.1)),
        xeno_prim_mouse = list(group_by = c("sample_name",
                                            "data_source"),
                                theta = c(7, 7),
                                lambda = c(0.5, 0.5)),
        xeno_mets_mouse = list(group_by = c("sample_name",
                                            "method",
                                            "data_source"),
                               theta = c(7, 7, 7),
                               lambda = c(0.5, 0.5, 0.5)),
        mm_prim = list(group_by = c("sample_name",
                                    "model"),
                       theta = c(12, 12),
                       lambda = c(0.1, 0.1)),
        mm_mets = list(group_by = c("sample_name",
                                    "model"),
                       theta = c(12, 12),
                       lambda = c(0.1, 0.1)),
        dogs_prim = list(group_by = c("sample_name",
                                       "data_source",
                                       "location"),
                          theta = c(7, 7, 7),
                          lambda = c(0.5, 0.5, 0.5)),
        dogs_mets = list(group_by = c("sample_name",
                                    "location",
                                    "data_source"),
                          theta = c(7, 12, 12),
                          lambda = c(0.1, 0.1, 0.1)),
        normal_bone = list(group_by = c("sample_name"),
                           theta = c(7)))

patient_prim <-
    qs::qread(
        str_c(
            "output/seurat_objects/final_tumor_vs_stroma/",
            "patient_prim_cancer_cells",
            ".qs"
        ))

patient_mets <-
    qs::qread(
        str_c(
            "output/seurat_objects/final_tumor_vs_stroma/",
            "patient_mets_cancer_cells",
            ".qs"
        ))

object_list <-
    tribble(~group,                         ~res_value,
            "patient_prim_cancer_cells",    0.15,
            "patient_mets_cancer_cells",    0.2,
            "mm_prim_cancer_cells",         0.4,
            "mm_mets_cancer_cells",         0.25,
            "xeno_prim_human",              0.15,
            "xeno_mets_human",              0.15,
            "dogs_prim_cancer_cells",       0.1,
            "dogs_mets_cancer_cells",       0.1)



for (i in seq_len(nrow(object_list))) {
    group <- object_list$group[i]
    res_value <- object_list$res_value[i]

    object <-
        qs::qread(
            str_c(
                "output/seurat_objects/final_tumor_vs_stroma/",
                group,
                ".qs"
            )
        ) %>%
        FindClusters(resolution = res_value)
    
    species <- object$organism[1]

    if (species == "mouse") {
        object1 <-
            mouse_to_human_setup(object,
                                harmony_params = )
    }
    else if (species == "dogs") {
        object1 <-
            dog_to_human_setup(object)
    } else {
        object1 <- object
    }

    if (group == "mm_prim_cancer_cells" || group == "xeno_prim_human"
        || group == "dogs_prim_cancer_cells") {
        ref_lung <- 
            SingleR::SingleR(test = as.SingleCellExperiment(object1),
                            ref = GetAssayData(patient_prim),
                            labels = patient_prim$Ann_Level3,
                            aggr.ref = TRUE)
    } else {
        ref_lung <- 
            SingleR::SingleR(test = as.SingleCellExperiment(object1),
                            ref = GetAssayData(patient_mets),
                            labels = patient_mets$Ann_Level3,
                            aggr.ref = TRUE)
    }
    object$Ann_Level3 <- ref_lung$labels


}

```