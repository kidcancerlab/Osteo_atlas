## Loading in Spatial Data

This analysis will go along with the cellchat analysis. I'll weigh the interactions by the amount of cells in proximity to each other.

This will also serve as practice for me to get more familiar with analyzing single-spot spatial transcriptomics.

```{r load-spatial}
#| cache.vars: [sobj_names, size_factors]
size_factors <- list(
    "OS1_Seurat" = 1500,
    "OS2_Seurat" = 1400,
    "OS3_Seurat" = 2700,
    "OS4_Seurat" = 1700,
    "OS5_Seurat" = 650,
    "OS6_Seurat" = 3000,
    "OS7_Seurat" = 2500,
    "OS8_Seurat" = 1300
)

spatial_path <-
    "/home/gdrobertslab/lab/ExternalData/McEachron_lab/spatial_data/rdata/"

spatial_list <-
    sapply(paste0(spatial_path, list.files(spatial_path)), readr::read_rds)
names(spatial_list) <-
    str_remove(
        string = list.files(spatial_path),
        pattern = ".rds"
    )

# Remove pathway columns in metadata
for (ob_name in names(spatial_list)) {
    x <- spatial_list[[ob_name]]

    x@meta.data <- x@meta.data[, !str_detect(
        colnames(x@meta.data),
        "^GOBP|^REACTOME|^HALLMARK"
    )]
    x$sample_name <- ob_name
    spatial_list[[ob_name]] <- x
}

sobj_names <- names(spatial_list)

qs::qsave(spatial_list, "output/spatial_objects/unannotated_spatial_list.qs")
```

## Label Cell Types Using Spacexr

We'll be using RCTD on full mode to perform cell-type annotation

### Read in Atlas Object Object

I need to create a reference object. This object is created using the RCTD constructor function, which requires a counts matrix, cell types, and nUMI

```{r}
#| cache.vars: cell_groups
patient_mets <-
    qs::qread("output/seurat_objects/final_tumor_vs_stroma/patient_mets.qs")

cell_groups <-
    sapply(
        unique(patient_mets$Ann_Level1),
        function(x) {
            patient_mets@meta.data %>%
                filter(Ann_Level1 == x) %>%
                pull(Ann_Level3) %>%
                unique()
        }
    )

qs::qsave(cell_groups, "output/spacexr/granular_references/cell_groups.qs")

dimplot_better(
    patient_mets,
    group = c(paste0("Ann_Level", 1:3)),
    raster = FALSE
)
```

### Run RCTD on Spatial Data


#### Different Granularities

Inspired by the section above using the myeloid_tumor reference, I'm going to repeat this exercise, but keep Ann_Level2 instead of Ann_Level1. Likewise, I'm going to repeat it for each Ann_Level1 compartment.

I'm going to save off a table to use as input for an array job submission.

This table will have the name of the reference we are using (from the names of `output/spacexr/granular_references/ref_list.qs`)

```{r}
data.frame(
    obs = rep(sobj_names, 5),
    ref = rep(names(cell_groups), 8)
) %>%
    write.table(
        "misc/rctd_input.txt",
        quote = FALSE,
        row.names = FALSE,
        col.names = FALSE
    )

# next I'm going to make the folders in which I'll keep the output
for (celltype in names(cell_groups)) {
    dir.create(
        paste0("output/figures/spatial/spacexr/granular_", celltype),
        showWarnings = FALSE
    )
    dir.create(
        paste0("output/spacexr/granular_references/", celltype),
        showWarnings = FALSE
    )
}

# make spacex reference objects
ref_list <- list()
for (celltype in unique(patient_mets$Ann_Level1)) {
    tmp <- patient_mets
    tmp$new_anns <- ifelse(
        patient_mets$Ann_Level1 == celltype,
        patient_mets$Ann_Level3,
        patient_mets$Ann_Level2
    )
    ref_list[[celltype]] <- spacexr::Reference(
        GetAssayData(tmp, layer = "counts"),
        as.factor(tmp$new_anns),
        n_max_cells = 2000
    )
}

qs::qsave(ref_list, "output/spacexr/granular_references/ref_list.qs")
```

Now I call the shell scripts to run RCTD on these objects.

```{bash}
sbatch rctd_scripts/rctd_array.sh
```

## Add the RCTD results back into the seurat objects and save them
Since we ran spacexr with different references for each cell compartment, we need to put the results in by compartment. We keep only the cell types within that compartment and toss the lvl2 annotations as these will be shared across multiple references and would overwrite each other.

One thing to keep in mind moving forward with these results, it's ok to do things like plotting or correlation between cell types, but since they were done using different references we cannot directly compare the values across cell types. Just because one cell type has a higher value than another does not mean that there are more of that cell type in that spot (unless you compare within a compartment).
```{r spatial_load_add_deconv}
spatial_list <- qs::qread("output/spatial_objects/unannotated_spatial_list.qs")

for (ob_name in sobj_names) {
    for (compartment in names(cell_groups)) {
        tmp_rctd <- qs::qread(
            paste0(
                "output/spacexr/granular_references/",
                compartment,
                "/",
                ob_name,
                ".qs"
            )
        )

        norm_weights <-
            spacexr::normalize_weights(tmp_rctd@results$weights) %>%
            as.data.frame() %>%
            select(all_of(cell_groups[[compartment]]))

        spatial_list[[ob_name]] <-
            AddMetaData(spatial_list[[ob_name]], norm_weights)
    }

    # Add in total for tumor
    spatial_list[[ob_name]]$Tumor_Cumulative <-
        spatial_list[[ob_name]]$Basal_Progenitor +
        spatial_list[[ob_name]]$Fibrogenic +
        spatial_list[[ob_name]]$Interactive +
        spatial_list[[ob_name]]$MP_Progenitor +
        spatial_list[[ob_name]]$Proliferative +
        spatial_list[[ob_name]]$COMA
}

qs::qsave(
    spatial_list,
    "output/spatial_objects/spatial_list_level3_annotations.qs"
)
```


Now I create figures for these objects

```{r}
for (compartment in names(ref_list)) {
    for (ob_name in names(spatial_list)) {
        tmp_rctd <- qs::qread(
            paste0(
                "output/spacexr/granular_references/",
                compartment,
                "/",
                ob_name,
                ".qs"
            )
        )
        save_deconv_plots(
            ob = spatial_list[[ob_name]],
            ob_name = ob_name,
            rctd_res = tmp_rctd,
            fig_dir = paste0(
                "output/figures/spatial/spacexr/granular_", compartment
            )
        )
    }
}
rm(spatial_list)
```

## Make Panel Plots

### Tumor Panel Plots

I want to make a figure where each column is a tumor type, and each row is a sample.

```{r}
spatial_list <-
    qs::qread("output/spatial_objects/spatial_list_level3_annotations.qs")

tumor_types <- c(
    "Basal_Progenitor",
    "Fibrogenic",
    "Interactive",
    "MP_Progenitor",
    "Proliferative",
    "COMA"
)

pdf("output/figures/spatial/spacexr/tumor_level_3.pdf", width = 35)
for (ob in names(spatial_list)) {
    hne <- SpatialDimPlot(spatial_list[[ob]], pt.size.factor = 0) +
        NoLegend()
    plts <- list("h_and_e" = hne)
    for (celltype in tumor_types) {
        # max_score <- max(spatial_list[[ob]]@meta.data[, ct])
        plts[[celltype]] <-
            SpatialFeaturePlot(
                spatial_list[[ob]],
                features = celltype,
                pt.size.factor = size_factors[[ob]],
                image.alpha = 0
            )
    }
    grid.arrange(grobs = plts, nrow = 1)
}
dev.off()

# !!!!!!!!!!!!!!!!!!!!!!!! This is never created in the current version of the code !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
spatial_list <- qs::qread("output/spatial_objects/spatial_list_level2_annotations.qs")
pdf("output/figures/spatial/spacexr/tumor_level2.pdf", width = 35)
for (ob in names(spatial_list)) {
    hne <- SpatialDimPlot(spatial_list[[ob]], pt.size.factor = 0) +
        NoLegend()
    plts <- list("h_and_e" = hne)
    for (celltype in tumor_types) {
        plts[[celltype]] <-
            SpatialFeaturePlot(
                spatial_list[[ob]],
                features = celltype,
                pt.size.factor = size_factors[[ob]],
                image.alpha = 0
            )
    }
    grid.arrange(grobs = plts, nrow = 1)
}
dev.off()

# !!!!!!!!!!!!!!!!!!!!!!!! This is never created in the current version of the code !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
spatial_list <- qs::qread("output/spatial_objects/spatial_list_myeloid_tumor.qs")
pdf("output/figures/spatial/spacexr/myeloid_tumor/tumor_panel.pdf", width = 35)
for (ob in names(spatial_list)) {
    spatial_list[[ob]]$COMA <- spatial_list[[ob]]$Stressed
    hne <- SpatialDimPlot(spatial_list[[ob]], pt.size.factor = 0) +
        NoLegend()
    plts <- list("h_and_e" = hne)
    for (celltype in tumor_types) {
        plts[[celltype]] <-
            SpatialFeaturePlot(
                spatial_list[[ob]],
                features = celltype,
                pt.size.factor = size_factors[[ob]],
                image.alpha = 0
            )
    }
    grid.arrange(grobs = plts, nrow = 1)
}
dev.off()
```


### TAM Panel Plots

#### Ann_Level3

```{r}
tam_types <- grep("TAM", colnames(spatial_list[[1]]@meta.data), value = TRUE)

pdf("output/figures/spatial/spacexr/tam_subpopulations.pdf", width = 35)
for (ob in names(spatial_list)) {
    hne <- SpatialDimPlot(spatial_list[[ob]], pt.size.factor = 0) +
        NoLegend()
    plts <- list("h_and_e" = hne)
    for (tam in tam_types) {
        plts[[tam]] <-
            SpatialFeaturePlot(
                spatial_list[[ob]],
                features = tam,
                pt.size.factor = size_factors[[ob]],
                image.alpha = 0
            )
    }
    grid.arrange(grobs = plts, nrow = 1)
}
dev.off()
```

#### myeloid_tumor

```{r}
spatial_list <- qs::qread("output/spatial_objects/unannotated_spatial_list.qs")
tam_types <- unique(grep("TAM", patient_mets$Ann_Level3, value = TRUE))

pdf("output/figures/spatial/spacexr/myeloid_tumor/tam_panel.pdf", width = 35)
for (ob in names(spatial_list)) {
    res <- qs::qread(paste0("output/spacexr/myeloid_tumor/rctd_myeloid_tumor_", ob, ".qs"))
    res <- spacexr::normalize_weights(res@results$weights)
    tmp <- AddMetaData(spatial_list[[ob]], res)
    hne <- SpatialDimPlot(tmp, pt.size.factor = 0) +
        NoLegend()
    plts <- list("h_and_e" = hne)
    for (tam in tam_types) {
        plts[[tam]] <-
            SpatialFeaturePlot(
                tmp,
                features = tam,
                pt.size.factor = size_factors[[ob]],
                image.alpha = 0
            )
    }
    grid.arrange(grobs = plts, nrow = 1)
}
dev.off()
```

#### tam_specific

```{r}
tam_rctd <- qs::qread("output/spacexr/tam_specific/rctd_res.qs")
pdf("output/figures/spatial/spacexr/tam_specific/tam_panel.pdf", width = 35)
for (ob in names(spatial_list)) {
    tmp_res <- spacexr::normalize_weights(tam_rctd[[ob]]@results$weights)
    tmp_ob <- AddMetaData(spatial_list[[ob]], tmp_res)
    hne <- SpatialDimPlot(tmp_ob, pt.size.factor = 0) +
        NoLegend()
    plts <- list("h_and_e" = hne)
    for (tam in tam_types) {
        plts[[tam]] <-
            SpatialFeaturePlot(
                tmp_ob,
                features = tam,
                pt.size.factor = size_factors[[ob]],
                image.alpha = 0
            )
    }
    grid.arrange(grobs = plts, nrow = 1)
}
dev.off()
```