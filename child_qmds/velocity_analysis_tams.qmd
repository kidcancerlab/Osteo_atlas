In order to analyze the data, we need to save a table of cell-level metadata, including barcodes, seurat clusters, and annotations. We also need to subset to just TAMs in order to analyze them individually.

First we need to read in our objects for this. I'm using the objects from TAMs_objects.

```{r}
yogi_prefix <- "/home/gdrobertslab/lab/Analysis/Yogesh/CellTypeAnnRefs/"
obj_names <- list.files(paste0(yogi_prefix, "output/seurat_objects/TAMs_objects"))

#get only fdl files
obj_names <- str_replace_all(obj_names,
                             ".qs",
                             "")

tam_list <- list()
for (ob_name in obj_names) {
    tam_list[[ob_name]] <-
        qs::qread(paste0("/home/gdrobertslab/lab/Analysis/Yogesh/CellTypeAnnRefs/output/seurat_objects/TAMs_objects/", ob_name, ".qs"))
}
```

```{r}
#run fdl
parallel::detectCores()
tam_list <- parallel::mclapply(tam_list, FUN = run_fdl, mc.cores = (parallel::detectCores() - 8))

qs::qsave(tam_list, "output/seurat_objects/tam_list_05_22.qs")

fdl_plt <- lapply(tam_list, dimplot_better, group = "Ann_Level3", reduction = "fdl")

grid.arrange(grobs = fdl_plt)

# now I'm going to remove the single nucleus cells
tam_list <- lapply(tam_list, subset, method == "single_cell")

```

Next I need to write off the metadata for these cells. The metadata will be kept in the folder `loom_output/tam_metadata/`

```{r write-off-md}
dir.create("loom_output/tam_metadata")

lapply(names(tam_list), function(obj_name) {
    write_off_md(sobj = tam_list[[obj_name]],
                 id_col = "sample_name",
                 output_dir = paste0("loom_output/tam_metadata/",
                                     obj_name),
                 vars_to_keep = c("sample_name",
                                  "seurat_clusters",
                                  "Ann_Level1",
                                  "Ann_Level2",
                                  "Ann_Level3"),
                 handle_n_of_1 = FALSE)
})
```

## Analyze Velocity in TAMs

```{python}
#import libraries
import anndata
import scvelo as scv
import pandas as pd
import numpy as np
import matplotlib as plt
import igraph
plt.use('Agg')
from matplotlib import pyplot
from matplotlib.colors import ListedColormap
import scanpy as sc
import os
import re
```

### Make AnnData Objects

I'm going to make anndata objects for the TAM datasets and write them off after calculating velocity so I don't have to re-run that.

```{python make-tam-anndata}
ob_names = os.listdir("loom_output/tam_metadata")
for ob in ob_names:
    print("starting on " + ob)
    merged_ad = loom_to_an(
        obj_name = ob,
        loom_dir = "loom_output/samples",
        metadata_dir = "loom_output/tam_metadata")
    print("made " + ob + " , now calculating velocity")
    calc_velo(merged_ad)
    merged_ad.write(filename = "loom_output/tam_anndata/" + ob + ".ad")
    print("finished " + ob)

```

### Make Velocity Plots

```{python}
color_mapping = {"Osteoclast_TAMs": "#D43F3AFF",
                 "TAMs": "#EEA236FF",
                 "Scar_TAMs": "#357EBDFF",
                 "Inflam_TAMs": "#5CB85CFF",
                 "Prolif_TAMs": "#B8B8B8FF",
                 "IFN_TAMs": "#9632B8FF",
                 "Monocytes": "#46B8DAFF",
                 "Alv_TAMs": "#90302DFF"}


for ob in ob_names:
    ad_ob = anndata.read("loom_output/tam_anndata/" + ob + ".ad")
    scv.pl.velocity_embedding_stream(
        ad_ob,
        basis = "umap",
        color = "Ann_Level3",
        show = False,
        palette = color_mapping,
        sort_order = False)
    pyplot.savefig("figures/scvelo/tams/" + ob + "_umap.png")
    scv.pl.velocity_embedding_stream(
        ad_ob,
        basis = "fdl",
        color = "Ann_Level3",
        show = False,
        palette = color_mapping,
        sort_order = False)
    pyplot.savefig("figures/scvelo/tams/" + ob + "_fdl.png")



```