Label potential tumor cell and then split the seurat object into cancer cells and
normal cells. The silhouette score was used to cluster the normal cells and 0.1
resolution was used to cluster the cancer cells (to reduce the excessive)
clustering.
It might be a worthwile to annotate or re run SCEVAN in the cancer cells to filter
out any normal cells that might have been group as cancer cells.

## Pull in cancer cell annotation from all the methods we attempted
Put all the labels into the metadata so we can use them to label the cells
We will make these column names have the format "cancer_lable_{method_name}" so we can select them easily for plotting and doing an ensemble labeling

```{r read_cancer_labels_and_plot}
#| fig.align: center
#| echo: FALSE
#| dependson: [annotate_celltypes, read_metadata]

#parallel::mclapply(unique(all_samples_csv$unique), function(group)
for (group in c("patient_prim", "patient_mets",
                "mm_prim", "mm_mets",
                "dogs_prim", "dogs_mets")) {
    object <-
        qs::qread(str_c("output/seurat_objects/harmony_sobjs_annot/",
                        group,
                        ".qs"))

    # Pull in cancer cell annotation from all the methods we attempted and add them to the metadata
    for (method_used in c("SCEVAN", "scATOMIC", "celltype", "snv_calling")) {
        cancer_label_file <- 
            str_c("output/id_tumor/",
                method_used,
                "/",
                group,
                "_metadata.tsv")

        if (file.exists(cancer_label_file)) {
            cancer_label <- 
                readr::read_tsv(cancer_label_file) %>%
                dplyr::filter(cell %in% colnames(object)) %>%
                dplyr::distinct(cell, .keep_all = TRUE) %>%
                tibble::column_to_rownames("cell")

            object <- 
                object %>%
                AddMetaData(metadata = cancer_label)
        }
    }

    directory <-
        "output/seurat_objects/final_combined_sobjs/"
    if (!dir.exists(directory)) {
        dir.create(directory, recursive = TRUE)
    }
    #save the seurat object size
    qs::qsave(object, 
            str_c("output/seurat_objects/final_combined_sobjs/",
                    group,
                    ".qs"))

    #plot for the cancer normal cells, mouse do not have scatomic tumor call
    if ("scatomic_tumor_call" %in% colnames(object@meta.data)){
        combineplot1 <-
            dimplot_better(object,
                           group_by = "scatomic_tumor_call") +
            NoLegend() +
            theme(plot.title = element_text(size = 7))
    } else {
        combineplot1 <- 
            ggplot(data = NULL) +
            aes(x = as.factor(1), y = as.factor(1)) +
            geom_text(aes(label = str_c("scatomic_tumor_call not present for ", group)))
    }
    if ("scevan_tumor_call" %in% colnames(object@meta.data)){
        combineplot2 <-
            dimplot_better(object,
                           group_by = "scevan_tumor_call") +
            NoLegend() +
            theme(plot.title = element_text(size = 7))
    } else {
        combineplot2 <- 
            ggplot(data = NULL) +
            aes(x = as.factor(1), y = as.factor(1)) +
            geom_text(aes(label = str_c("scevan_tumor_call not present for ", group)))
    }
    if ("final_snv_call" %in% colnames(object@meta.data)){
        combineplot3 <-
            dimplot_better(object,
                           group_by = "final_snv_call") +
            NoLegend() +
            theme(plot.title = element_text(size = 7))
    } else {
        combineplot3 <- 
            ggplot(data = NULL) +
            aes(x = as.factor(1), y = as.factor(1)) +
            geom_text(aes(label = str_c("snv_call not present for ", group)))
    }
    combineplot4 <-
        dimplot_better(object,
                       group_by = "celltype_tumor_call") +
            NoLegend() +
            theme(plot.title = element_text(size = 7))
    combineplot5 <-
        dimplot_better(object,
                       group_by = "new_annot_clust") +
            NoLegend() +
            theme(plot.title = element_text(size = 7))
    combineplot6 <-
        dimplot_better(object,
                       group_by = "sample_name") +
            NoLegend() +
            theme(plot.title = element_text(size = 7))

    # use patchwork to combine the plots
    combined_plots <- 
        patchwork::wrap_plots(combineplot6,
                            combineplot5,
                            combineplot1,
                            combineplot2,
                            combineplot3,
                            combineplot4,
                            ncol = 3,
                            widths = 21,
                            heights = 14) +
            patchwork::plot_annotation(title = group) +
            theme(plot.title = element_text(size = 10))

    directory <-
        str_c("output/figures/combined_plots/", group)
    if (!dir.exists(directory)) {
        dir.create(directory, recursive = TRUE)
    }
    #save the combined plots
    ggsave(str_c("output/figures/combined_plots/",
                 group,
                 "/",
                 "combined_plots.png"),
           plot = combined_plots,
           width = 21,
           height = 14)
    # save the plot as qs object
     ggsave(str_c("output/figures/combined_plots/",
                 group,
                 "/",
                 "combined_plots.pdf"),
           plot = combined_plots,
           width = 21,
           height = 14)
}

#make feature plots for all the groups
for (group in c("patient_prim", "patient_mets",
                "mm_prim", "mm_mets",
                "dogs_prim", "dogs_mets")) {
    object <-
        qs::qread(str_c("output/seurat_objects/final_combined_sobjs/",
                        group,
                        ".qs"))
    # plot feature plots
    if (object$organism[1] == "human" | object$organism[1] == "dog") {
        # tumor features for human
        featureplot1_tumor <-
            FeaturePlot(object,
                        features = c("COL1A1", "COL1A2", "FBLN1",
                                     "SATB2", "RUNX2", "SOX9"),
                        ncol = 3)
        # Tcell=CD3E, Neutrophil=CD4, Macrophase=CD68,CD14, Bcells=MS4A1 or CD20, Endotthelial=ESAM, Epithelial=MUC1
        featureplot2_immune <-
            FeaturePlot(object,
                        features = c("CD3E", "CD4", "CD68",
                                     "MUC1", "MS4A1", "ESAM"),
                        ncol = 3)
    } else {
        # plots for mouse
        featureplot1_tumor <-
            FeaturePlot(object,
                        features = c("Col1a1", "Col1a2", "Fbln1",
                                     "Satb2", "Runx2", "Sox9"),
                        ncol = 3) 

        featureplot2_immune <-
            FeaturePlot(object,
                        features = c("Cd3e", "Cd4", "Cd68",
                                     "Muc1", "Ms4a1", "Esam"),
                        ncol = 3) 
    }
    ggsave(str_c("output/figures/combined_plots/",
                 group,
                 "/",
                 "tumor_featureplots.png"),
           plot = featureplot1_tumor,
           width = 21,
           height = 14)

    ggsave(str_c("output/figures/combined_plots/",
                 group,
                 "/",
                 "tumor_featureplots.pdf"),
           plot = featureplot1_tumor,
           width = 21,
           height = 14)

    ggsave(str_c("output/figures/combined_plots/",
                 group,
                 "/",
                 "immune_featureplots.png"),
           plot = featureplot2_immune,
           width = 21,
           height = 14)

    ggsave(str_c("output/figures/combined_plots/",
                 group,
                 "/",
                 "immune_featureplots.pdf"),
           plot = featureplot2_immune,
           width = 21,
           height = 14)
}
```


## Just split the tumor and stroma for ids cleaning
```{r ids_cleaning_tumor_stroma}

#Harmony parameters for the split
harmony_params <-
    list(patient_prim = list(group_by = c("sample_name",
                                          "method",
                                          "data_source"),
                             theta = c(1, 5, 5),
                             lambda = c(0.5, 0.5, 0.5)),
        patient_mets = list(group_by = c("sample_name",
                                         "method",
                                         "data_source"),
                            theta = c(7, 7, 7),
                            lambda = c(0.1, 0.1, 0.1)),
        xeno_prim_human = list(group_by = c("sample_name",
                                            "location",
                                            "data_source"),
                               theta = c(12, 12, 12),
                               lambda = c(0.1, 0.1, 0.1)),
        xeno_mets_human = list(group_by = c("sample_name",
                                            "method",
                                            "data_source"),
                               theta = c(2, 7, 15),
                               lambda = c(0.7, 0.1, 0.1)),
        xeno_prim_mouse = list(group_by = c("sample_name",
                                            "data_source"),
                                theta = c(7, 7),
                                lambda = c(0.5, 0.5)),
        xeno_mets_mouse = list(group_by = c("sample_name",
                                            "method",
                                            "data_source"),
                               theta = c(7, 7, 7),
                               lambda = c(0.5, 0.5, 0.5)),
        mm_prim = list(group_by = c("sample_name",
                                    "model"),
                       theta = c(12, 12),
                       lambda = c(0.1, 0.1)),
        mm_mets = list(group_by = c("sample_name",
                                    "model"),
                       theta = c(12, 12),
                       lambda = c(0.1, 0.1)),
        dogs_prim = list(group_by = c("sample_name",
                                       "data_source",
                                       "location"),
                          theta = c(7, 7, 7),
                          lambda = c(0.5, 0.5, 0.5)),
        dogs_mets = list(group_by = c("sample_name",
                                       "data_source",
                                       "location"),
                          theta = c(7, 7, 7),
                          lambda = c(0.5, 0.5, 0.5)),
        normal_bone = list(group_by = c("sample_name"),
                           theta = c(7)))

count <- list()
for (group in c("patient_prim", "patient_mets",
                "mm_prim", "mm_mets",
                "dogs_prim", "dogs_mets"
                )) {
    object <-
        qs::qread(str_c("output/seurat_objects/final_combined_sobjs/",
                        group,
                        ".qs"))
    #dimplot_better(object, group_by = "celltype_tumor_call") + NoLegend()
    if (any(c("S0200", "S0201") %in% object$sample_name)) {
        object <- 
            subset(object,
                   sample_name != "S0200" & sample_name != "S0201")
    }

    for (cell_group_name in c("cancer_cells", "normal_cells")) {
        sub_group <- str_c(group, "_", cell_group_name)

        s_obj <-
            subset(x = object,
                    celltype_tumor_call == cell_group_name) %>%
            process_seurat()
        # add the filter genes that are present in less than 1% of cells
        min_prop_cells_expressing <- 0.01
        n_cells_in_data <- length(Cells(s_obj))
        cells_expressing_genes <-
            rowSums(
                GetAssayData(s_obj, layer = "counts") > 0
            ) > min_prop_cells_expressing * n_cells_in_data

        set.seed(199820)
        if (cell_group_name == "normal_cells") {
            s_obj <-
                s_obj[cells_expressing_genes, ] %>%
                process_seurat() %>%
                RunHarmony(group.by.vars = harmony_params[[group]]$group_by) %>%
                process_seurat(reduction = "harmony")
        } else {
            s_obj <- 
                s_obj[cells_expressing_genes, ] %>%
                process_seurat() %>%
                RunHarmony(group.by.vars = harmony_params[[group]]$group_by,
                            theta = harmony_params[[group]]$theta,
                            lambda = harmony_params[[group]]$lambda) %>%
                process_seurat(reduction = "harmony")
        }
        directory <-
            str_c("output/seurat_objects/pre_clean_tumor_vs_stroma/")
        if (!dir.exists(directory)) {
            dir.create(directory, recursive = TRUE)
        }
        #save the seurat object size
        qs::qsave(s_obj, str_c("output/seurat_objects/pre_clean_tumor_vs_stroma/",
                                group, "_", cell_group_name,
                                ".qs"))
    }
}
#dimplot_better(s_obj, group_by = "celltype_tumor_call") + NoLegend()
xy <- s_obj
```


### Recluster each cluster from the tumor and look closer at the clusters
```{r, recluster_tumor_clusters, echo = FALSE}

object_list <-
    tribble(~group,                         ~res_value,
            # "patient_prim_cancer_cells",    0.5,
            # "patient_mets_cancer_cells",    0.5,
            # "mm_prim_cancer_cells",         0.3,
            # "mm_mets_cancer_cells",         0.3,
            "dogs_prim_cancer_cells",         0.3,
            "dogs_mets_cancer_cells",         0.3)

annotation_type <- 
    list(
        patient_prim_cancer_cells = list("human", TRUE),
        patient_mets_cancer_cells = list("human_lung", TRUE),
        mm_prim_cancer_cells = list("mouse", TRUE),
        mm_mets_cancer_cells = list("mouse_lung", TRUE),
        dogs_prim_cancer_cells = list("human", TRUE),
        dogs_mets_cancer_cells = list("human_lung", TRUE))

for (i in seq_len(nrow(object_list))) {
    group <- object_list$group[i]
    res_value <- object_list$res_value[i]
    stromal_metadata <- list()
    tumor_metadata <- list()

    sobj <-
        qs::qread(
            str_c(
                "output/seurat_objects/pre_clean_tumor_vs_stroma/",
                group,
                ".qs"
            )
        ) %>%
        FindClusters(resolution = res_value)
    #dimplot_better(sobj, group_by = "new_annot_clust") + NoLegend()
    sobj$prev_annotations <- sobj$annotations
    sobj$prev_new_annot_clust <- sobj$new_annot_clust
    sobj$prev_re_cluster <- sobj$re_cluster
    sobj$prev_cell_scores <- sobj$cell_scores

    for (clusters in unique(sobj$seurat_clusters)) {
        sub_obj <- 
            subset(sobj,
                    subset = seurat_clusters == clusters)

        species <-
            sub_obj$organism[1]
        #dimplot_better(sub_obj, group_by = "seurat_clusters") + NoLegend()
        if (species == "dog") {
            sub_obj <- 
                dog_to_human_setup(object = sub_obj,
                                    harm_vars = c("sample_name"),
                                    theta = c(7)) %>%
                FindClusters(resolution = 0.1)
        } else {
               sub_obj <- sub_obj
        }
        print("done 1")

        ann_obj <-
            annotate_celltypes(sobject = sub_obj,
                                species = annotation_type[[group]][[1]],
                                with_tumor = TRUE,
                                aggr_ref = TRUE)

        ann_obj <-
            clusterbased_annot(s_obj = ann_obj)
        #dimplot_better(ann_obj, group_by = "new_annot_clust") + NoLegend()
        if (length(unique(ann_obj$sample_name)) > 1 && ncol(ann_obj) > 50) {
            ann_obj <- 
                ann_obj %>%
                process_seurat(resolution=0.05) %>%
                RunHarmony(group.by.vars = "sample_name",
                            theta = 7) %>%
                process_seurat(reduction = "harmony",
                                resolution = 0.1)
            # dimplot_better(ann_obj, group_by = "seurat_clusters") + NoLegend()
        } else {
            ann_obj <- ann_obj
        }

        print("done 2")

        if (sub_obj$organism[1] == "dog") {
            sub_obj <- 
                subset(sobj,
                       subset = seurat_clusters == clusters)
            if (length(unique(sub_obj$sample_name)) > 1 && ncol(sub_obj) > 50) {
                sub_obj <- 
                    sub_obj %>%
                    process_seurat(resolution=0.05) %>%
                    RunHarmony(group.by.vars = "sample_name",
                                theta = 7) %>%
                    process_seurat(reduction = "harmony",
                                    resolution = 0.05)
            } else {
                sub_obj <- sub_obj
            }
            obj_i_want <- ann_obj
            sub_obj$annotations <- obj_i_want$annotations
            sub_obj$cell_scores <- obj_i_want$cell_scores
            sub_obj$new_annot_clust <- obj_i_want$new_annot_clust
            ann_obj <- sub_obj
        }
        print("done 3")
        dimplot1 <-
            dimplot_better(ann_obj,
                    group_by = "seurat_clusters") + 
                NoLegend() +
                ggtitle(clusters)

        dimplot2 <-
            dimplot_better(ann_obj,
                    group_by = "annotations") + 
                NoLegend() +
                ggtitle(str_c("annotations ", clusters))

        dimplot3 <-
            dimplot_better(ann_obj,
                    group_by = "sample_name") + 
                NoLegend() +
                ggtitle(str_c("sample_name ", clusters))

        dimplot4 <-
            dimplot_better(ann_obj,
                    group_by = "new_annot_clust") + 
                NoLegend() +
                ggtitle(str_c("new_annot_clust ", clusters))
        if ("scATOMIC_pred" %in% colnames(ann_obj@meta.data)) {
            dimplot5 <-
                dimplot_better(ann_obj,
                    group_by = "scATOMIC_pred") + 
                    NoLegend() +
                    ggtitle(str_c("scATOMIC_pred ", clusters))
        } else {
            dimplot5 <- 
                ggplot(data = NULL) +
                    aes(x = as.factor(1), y = as.factor(1)) +
                    geom_text(aes(label = str_c("scATOMIC_pred not present for ", group)))
        }

        if ("CNV_status" %in% colnames(ann_obj@meta.data)) {
            dimplot6 <-
                dimplot_better(ann_obj,
                    group_by = "CNV_status") + 
                    NoLegend() +
                    ggtitle(str_c("CNV_status ", clusters))
        } else {
            dimplot6 <- 
                ggplot(data = NULL) +
                    aes(x = as.factor(1), y = as.factor(1)) +
                    geom_text(aes(label = str_c("CNV_status not present for ", group)))
        }

        if ("scatomic_tumor_call" %in% colnames(ann_obj@meta.data)) {
            dimplot7 <-
                dimplot_better(ann_obj,
                    group_by = "scatomic_tumor_call") + 
                    NoLegend() +
                    ggtitle(str_c("scatomic_tumor_call ", clusters))
        } else {
            dimplot7 <- 
                ggplot(data = NULL) +
                    aes(x = as.factor(1), y = as.factor(1)) +
                    geom_text(aes(label = str_c("scatomic_tumor_call not present for ", group)))
        }

        if ("class" %in% colnames(ann_obj@meta.data)) {
            dimplot8 <-
                dimplot_better(ann_obj,
                    group_by = "class") + 
                    NoLegend() +
                    ggtitle(str_c("class ", clusters))
        } else {
            dimplot8 <- 
                ggplot(data = NULL) +
                    aes(x = as.factor(1), y = as.factor(1)) +
                    geom_text(aes(label = str_c("class not present for ", group)))
        }

        plot_c <-
            patchwork::wrap_plots(dimplot1, dimplot2, dimplot3,
                                dimplot4, dimplot5, dimplot6,
                                dimplot7, dimplot8,
                                ncol = 2) +
            patchwork::plot_annotation(title = str_c("Cluster ", clusters))

        if (!dir.exists(str_c("output/figures/reclustering_tumors/", group))) {
            dir.create(str_c("output/figures/reclustering_tumors/", group),
                        recursive = TRUE)
        }

        ggsave(filename = str_c("output/figures/reclustering_tumors/", group, "/cluster_",
                            clusters,
                            ".png"),
                plot = plot_c,
                width = 14,
                height = 28,
                limitsize = FALSE,
                bg = "white")

        # save the ids
        normal_ids <-
            ann_obj@meta.data %>%
            filter(annotations != "Tumor_cells") %>%
            rownames_to_column("cell_ids") %>%
            select(cell_ids)

        tumor_ids <-
            ann_obj@meta.data %>%
            filter(annotations == "Tumor_cells") %>%
            rownames_to_column("cell_ids") %>%
            select(cell_ids)

        # save the metadata
        if (length(normal_ids$cell_ids) > 0) {
            stromal_metadata[[clusters]] <- normal_ids
        }
        if (length(tumor_ids$cell_ids) > 0) {
            tumor_metadata[[clusters]] <- tumor_ids
        }
    }
    # save the metadata
    directory <-
        str_c("output/metadata/reclustering_tumors/", group)
    if (!dir.exists(directory)) {
        dir.create(directory, recursive = TRUE)
    }
    timestamp <- format(Sys.time(), "%Y%m%d_%H%M%S")

    bind_rows(stromal_metadata) %>%
        write_tsv(str_c(directory,
                        "/normal_ids_",
                        timestamp,
                        ".tsv"))
    bind_rows(tumor_metadata) %>%
        write_tsv(str_c(directory,
                        "/tumor_ids_",
                        timestamp,
                        ".tsv"))
}

```

# optimize intergation
try all the potential parameters for harmony and save the results as a list of plots
```{r harmony_optimization_brute_force, echo = FALSE}
# run harmony on the tumor cells and optimize the parameters
for (group in c("patient_prim", "patient_mets",
                "mm_prim", "mm_mets",
                "dogs_prim", "dogs_mets")) {
    object <-
        qs::qread(str_c("output/seurat_objects/final_combined_sobjs/",
                        group,
                        ".qs"))

    if (any(c("S0200", "S0201") %in% object$sample_name)) {
        object <- 
            subset(object,
                   sample_name != "S0200" & sample_name != "S0201")
    }

    # read the recent tumor ids
    filename <-
        system(paste0(
            "ls output/metadata/reclustering_tumors/",
            group, "_cancer_cells",
            "/tumor_ids",
            "_* | tail -n 1"),
            intern = TRUE)

    tumor_ids <- 
        read_tsv(filename,
        guess_max = Inf,
        show_col_types = FALSE)

    set.seed(199820)
    s_obj <-
        subset(x = object,
                cells = tumor_ids$cell_ids) %>% 
        process_seurat()
    # dimplot_better(s_obj, group_by = "celltype_tumor_call") + NoLegend()
    # add the filter genes that are present in less than 1% of cells
    min_prop_cells_expressing <- 0.01
    n_cells_in_data <- length(Cells(s_obj))
    cells_expressing_genes <-
        rowSums(
            GetAssayData(s_obj, layer = "counts") > 0
        ) > min_prop_cells_expressing * n_cells_in_data
    set.seed(199820)
    s_obj <- 
        s_obj[cells_expressing_genes, ] %>%
        process_seurat()

    hopts <-
        tibble(theta = c(0.5, 1, 2, 4, 8),
                sigma = c(.01, .03, .1, .3, 1),
                lambda = c(.1, .3, 1, 3, 10))

    hopts <- 
        expand.grid(hopts$theta, hopts$sigma, hopts$lambda) %>%
        setNames(colnames(hopts))
    # parallel::mclapply is used to run the harmony optimization in parallel
    results <- parallel::mclapply(1:nrow(hopts), function(i) {
        sobj <-
            s_obj %>%
            harmony::RunHarmony("sample_name",
                                dims.use = 1:50,
                                theta = hopts$theta[i],
                                sigma = hopts$sigma[i],
                                lambda = hopts$lambda[i]) %>%
                                RunUMAP(dims = 1:50, reduction = "harmony") %>%
                                FindNeighbors(reduction = "harmony") %>%
                                FindClusters(resolution = 0.4)
        return(r_dim_plot(sobj, 
                        group.by = "sample_name",
                        order = TRUE) +
            ggtitle(paste0("The ",
                hopts$theta[i],
                ", Sig ",
                hopts$sigma[i],
                ", Lam ",
                hopts$lambda[i])) +
            theme(plot.title = element_text(size = 8)) +
            theme_void() +
            NoLegend())
    }, mc.cores = parallelly::availableCores())
  
    if (!dir.exists(paste0("output/figures/harmony_optimization", group))) {
        dir.create(paste0("output/figures/harmony_optimization", group), recursive = TRUE)
    }
    # save the results as a list of plots
    plot1 <-
        patchwork::wrap_plots(results[1:25], ncol = 3) +
        patchwork::plot_annotation(title = group) +
        theme(plot.title = element_text(size = 10))
    # save the plot as png
    ggsave(str_c("output/figures/harmony_optimization/",
                 group,
                 "/",
                 "HO_1_25.png"),
           plot = plot1,
           width = 14,
           height = 63)
    # save the plot as pdf
    plot2 <-
        patchwork::wrap_plots(results[26:50], ncol = 3) +
        patchwork::plot_annotation(title = group) +
        theme(plot.title = element_text(size = 10))
    # save the plot as png
    ggsave(str_c("output/figures/harmony_optimization/",
                 group,
                 "/",
                 "HO_26_50.png"),
           plot = plot2,
           width = 14,
           height = 63)
    # save the plot as pdf
    plot3 <-
        patchwork::wrap_plots(results[51:75], ncol = 3) +
        patchwork::plot_annotation(title = group) +
        theme(plot.title = element_text(size = 10))
    # save the plot as png
    ggsave(str_c("output/figures/harmony_optimization/",
                 group,
                 "/",
                 "HO_51_75.png"),
           plot = plot3,
           width = 14,
           height = 63)
    # save the plot as pdf
    plot4 <-
        patchwork::wrap_plots(results[76:100], ncol = 3) +
        patchwork::plot_annotation(title = group) +
        theme(plot.title = element_text(size = 10))
    # save the plot as png
    ggsave(str_c("output/figures/harmony_optimization/",
                 group,
                 "/",
                 "HO_76_100.png"),
           plot = plot4,
           width = 14,
           height = 63)
    # save the plot as pdf
    plot5 <-
        patchwork::wrap_plots(results[101:125], ncol = 3) +
        patchwork::plot_annotation(title = group) +
        theme(plot.title = element_text(size = 10))
    # save the plot as png
    ggsave(str_c("output/figures/harmony_optimization/",
                 group,
                 "/",
                 "HO_101_125.png"),
           plot = plot5,
           width = 14,
           height = 63)
}

```
## Split by clustering with right resolution as found by clustree

```{r split_tumor_stromal_main}
#| cache.vars: Annotation_cleanup
#| dependson: [dog_human_orthologs_function, annotate_celltypes]

# Annotation cleanup
Annotation_cleanup <-
    qs::qread("misc/Annotation_cleanup.qs")

# load the tsv for human_dog gene orthologs
orthologs <-
    read_tsv("input/downloads/dog_human_gene_orthologs.txt")

#Harmony parameters for the split
harmony_params <-
    list(patient_prim = list(group_by = c("sample_name",
                                          "method",
                                          "data_source"),
                             theta = c(1, 5, 5),
                             lambda = c(0.5, 0.5, 0.5)),
        patient_mets = list(group_by = c("sample_name",
                                            "method",
                                            "data_source"),
                            theta = c(1, 7, 7),
                            lambda = c(0.5, 0.5, 0.5)),
        xeno_prim_human = list(group_by = c("sample_name",
                                            "location",
                                            "data_source"),
                               theta = c(12, 12, 12),
                               lambda = c(0.1, 0.1, 0.1)),
        xeno_mets_human = list(group_by = c("sample_name",
                                            "method",
                                            "data_source"),
                               theta = c(2, 7, 15),
                               lambda = c(0.7, 0.1, 0.1)),
        xeno_prim_mouse = list(group_by = c("sample_name",
                                            "data_source"),
                                theta = c(7, 7),
                                lambda = c(0.5, 0.5)),
        xeno_mets_mouse = list(group_by = c("sample_name",
                                            "method",
                                            "data_source"),
                               theta = c(7, 7, 7),
                               lambda = c(0.5, 0.5, 0.5)),
        mm_prim = list(group_by = c("sample_name",
                                    "model"),
                       theta = c(12, 12),
                       lambda = c(0.1, 0.1)),
        mm_mets = list(group_by = c("sample_name",
                                    "model"),
                       theta = c(12, 12),
                       lambda = c(0.1, 0.1)),
        dogs_prim = list(group_by = c("sample_name",
                                       "data_source",
                                       "location"),
                          theta = c(7, 7, 7),
                          lambda = c(0.5, 0.5, 0.5)),
        dogs_mets = list(group_by = c("sample_name",
                                    "location",
                                    "data_source"),
                          theta = c(7, 12, 12),
                          lambda = c(0.1, 0.1, 0.1)),
        normal_bone = list(group_by = c("sample_name"),
                           theta = c(7)))

#reference for annotating mets
annotation_type <- list(patient_prim_normal_cells = list("human", FALSE),
                        patient_mets_normal_cells = list("human_lung", FALSE),
                        mm_prim_normal_cells = list("mouse", FALSE),
                        mm_mets_normal_cells = list("mouse_lung", FALSE),
                        dogs_prim_normal_cells = list("human", FALSE),
                        dogs_mets_normal_cells = list("human_lung", FALSE))

for (group in c("patient_prim", "patient_mets",
                "mm_prim", "mm_mets",
                "dogs_prim", "dogs_mets")) {
    object <-
        qs::qread(str_c("output/seurat_objects/final_combined_sobjs/",
                        group,
                        ".qs"))

    if (any(c("S0200", "S0201") %in% object$sample_name)) {
        object <- 
            subset(object,
                   sample_name != "S0200" & sample_name != "S0201")
    }

    for (cell_group_name in c("cancer_cells", "normal_cells")) {
        sub_group <- str_c(group, "_", cell_group_name)
        # read the recent tumor ids
        filename <-
            system(paste0(
                "ls output/metadata/reclustering_tumors/",
                group, "_cancer_cells",
                "/tumor_ids",
                "_* | tail -n 1"),
                intern = TRUE)
    
        tumor_ids <- 
            read_tsv(filename,
            guess_max = Inf,
            show_col_types = FALSE) 

        if  (cell_group_name == "normal_cells") {
            set.seed(199820)
            s_obj <-
                subset(x = object,
                        cells = setdiff(colnames(object), tumor_ids$cell_ids)) %>%
                process_seurat()
            # add the filter genes that are present in less than 1% of cells
            min_prop_cells_expressing <- 0.01
            n_cells_in_data <- length(Cells(s_obj))
            cells_expressing_genes <-
                rowSums(
                    GetAssayData(s_obj, layer = "counts") > 0
                ) > min_prop_cells_expressing * n_cells_in_data

            set.seed(199820)
            s_obj <-
                s_obj[cells_expressing_genes, ] %>%
                process_seurat() %>%
                RunHarmony(group.by.vars = harmony_params[[group]]$group_by) %>%
                process_seurat(reduction = "harmony")
            
            # change the dog genes to human genes for annotation for normal cells
            set.seed(199820)
            if (sub_group == "dogs_prim_normal_cells" | sub_group == "dogs_mets_normal_cells") {
                s_obj <- 
                    dog_to_human_setup(object = s_obj)
            }

            # annotate the normal cells
            s_obj <-
                annotate_celltypes(sobject = s_obj,
                                species = annotation_type[[sub_group]][[1]],
                                with_tumor = FALSE,
                                aggr_ref = TRUE)

            s_obj <-
                clusterbased_annot(s_obj)

            if (sub_group == "dogs_prim_normal_cells" | sub_group == "dogs_mets_normal_cells") {
                normal_cell_ids <- colnames(s_obj)
                dog_stroma_whuman_genes <- s_obj
                set.seed(199820)
                s_obj <-
                    subset(x = object,
                          cells = normal_cell_ids) %>%
                    process_seurat() %>%
                    RunHarmony(group.by.vars = harmony_params[[group]]$group_by) %>%
                    process_seurat(reduction = "harmony")
                s_obj$annotations <- dog_stroma_whuman_genes$annotations
                s_obj$new_annot_clust <- dog_stroma_whuman_genes$new_annot_clust
                s_obj$cell_scores <- dog_stroma_whuman_genes$cell_scores
            }

        } else {
            set.seed(199820)
            s_obj <-
                subset(x = object,
                        cells = tumor_ids$cell_ids) %>% 
                process_seurat()
            # add the filter genes that are present in less than 1% of cells
            min_prop_cells_expressing <- 0.01
            n_cells_in_data <- length(Cells(s_obj))
            cells_expressing_genes <-
                rowSums(
                    GetAssayData(s_obj, layer = "counts") > 0
                ) > min_prop_cells_expressing * n_cells_in_data
            set.seed(199820)
            s_obj <- 
                s_obj[cells_expressing_genes, ] %>%
                process_seurat() %>%
                RunHarmony(group.by.vars = harmony_params[[group]]$group_by,
                            theta = harmony_params[[group]]$theta,
                            lambda = harmony_params[[group]]$lambda) %>%
                process_seurat(reduction = "harmony")
        }

        s_obj$SingleR_Ann3 <-
            stringr::str_replace_all(s_obj$new_annot_clust,
                                    Annotation_cleanup$SingleR_Ann3_label)

        s_obj$SingleR_Ann2 <-
            stringr::str_replace_all(s_obj$SingleR_Ann3,
                                    Annotation_cleanup$SingleR_Ann2_label)

        s_obj$SingleR_Ann1 <-
            stringr::str_replace_all(s_obj$SingleR_Ann2,
                                    Annotation_cleanup$SingleR_Ann1_label)
        #dimplot_better(s_obj, group_by = "SingleR_Ann1")

        dimplot1 <- 
            dimplot_better(s_obj,
                        group_by = "seurat_clusters") +
                NoLegend() +
                theme(plot.title = element_text(size = 7))

        dimplot2 <- 
            dimplot_better(s_obj,
                        group_by = "new_annot_clust") +
                NoLegend() +
                theme(plot.title = element_text(size = 7))

        dimplot3 <- 
            dimplot_better(s_obj,
                        group_by = "sample_name") +
                NoLegend() +
                theme(plot.title = element_text(size = 7))

        dimplot4 <- 
            dimplot_better(s_obj,
                        group_by = "data_source") +
                NoLegend() +
                theme(plot.title = element_text(size = 7))
        
        if ("scATOMIC_pred" %in% colnames(s_obj@meta.data)) {
            scAtomic_call <-
                dimplot_better(s_obj,
                            group_by = "scATOMIC_pred") +
                    ggtitle(str_c("SCATOMIC_celltype")) +
                    NoLegend()
        } else {
            scAtomic_call <- 
                ggplot(data = NULL) +
                    aes(x = as.factor(1), y = as.factor(1)) +
                    geom_text(aes(label = str_c("scatomic_tumor_call not present for ", group)))
        }

        if ("CNV_status" %in% colnames(s_obj@meta.data)){
            dimplot_CNV <-
                dimplot_better(s_obj,
                            group_by = "CNV_status") +
                    NoLegend() +
                    theme(plot.title = element_text(size = 7))
        } else {
            dimplot_CNV <- 
                ggplot(data = NULL) +
                    aes(x = as.factor(1), y = as.factor(1)) +
                    geom_text(aes(label = str_c("scatomic_tumor_call not present for ", group)))
        }

        all_dimplots <- 
            patchwork::wrap_plots(dimplot1,
                                  dimplot2,
                                  dimplot3,
                                  dimplot4,
                                  scAtomic_call,
                                  dimplot_CNV,
                                  ncol = 2,
                                  widths = 14,
                                  heights = 21) +
            patchwork::plot_annotation(title = str_c(group, " ", cell_group_name)) +
            theme(plot.title = element_text(size = 10))

        directory <-
            str_c("output/figures/tumor_vs_stroma/", group)
        if (!dir.exists(directory)) {
            dir.create(directory, recursive = TRUE)
        }
        #save the plot
        ggsave(str_c("output/figures/tumor_vs_stroma/",
                    group,
                    "/",
                    cell_group_name,
                    "_dimplot.png"),
                plot = all_dimplots,
                width = 14,
                height = 14)

        #save as qs
        ggsave(str_c("output/figures/tumor_vs_stroma/",
                    group,
                    "/",
                    cell_group_name,
                    "_dimplot.pdf"),
                plot = all_dimplots,
                width = 14,
                height = 14)

        if (object$organism[1] == "human" | object$organism[1] == "dog") {
            tumor_featureplot <- 
                FeaturePlot(s_obj,
                            features = c("COL1A1", "COL1A2", "FBLN1",
                                        "SATB2", "RUNX2", "SOX9"),
                            ncol = 3)
            immune_featureplot <- 
                FeaturePlot(s_obj,
                            features = c("CD3E", "CD4", "CD68",
                                        "MUC1", "MS4A1", "ESAM"),
                            ncol = 3)
        } else {
            tumor_featureplot <- 
                FeaturePlot(s_obj,
                            features = c("Col1a1", "Col1a2", "Fbln1",
                                        "Satb2", "Runx2", "Sox9"),
                            ncol = 3)
            immune_featureplot <-
                FeaturePlot(s_obj,
                            features = c("Cd3e", "Cd4", "Cd68",
                                        "Muc1", "Ms4a1", "Esam"),
                            ncol = 3)
        }
        ggsave(str_c("output/figures/tumor_vs_stroma/",
                    group,
                    "/",
                    cell_group_name,
                    "_tumor_featureplot.png"),
                plot = tumor_featureplot,
                width = 21,
                height = 21)

        #save as qs
        ggsave(str_c("output/figures/tumor_vs_stroma/",
                    group,
                    "/",
                    cell_group_name,
                    "_tumor_featureplot.pdf"),
                plot = tumor_featureplot,
                width = 21,
                height = 21)


        ggsave(str_c("output/figures/tumor_vs_stroma/",
                    group,
                    "/",
                    cell_group_name,
                    "_immune_featureplot.png"),
                plot = immune_featureplot,
                width = 21,
                height = 21)
        
        #save as qs
        ggsave(str_c("output/figures/tumor_vs_stroma/",
                    group,
                    "/",
                    cell_group_name,
                    "_immune_featureplot.pdf"),
                plot = immune_featureplot,
                width = 21,
                height = 21)

        directory <-
            str_c("output/seurat_objects/tumor_vs_stroma/")
        if (!dir.exists(directory)) {
            dir.create(directory, recursive = TRUE)
        }
        qs::qsave(s_obj, str_c("output/seurat_objects/tumor_vs_stroma/",  #nolint
                                group, "_",
                                cell_group_name,
                                ".qs"))
    }
    print(str_c(group, " labelled with cancer_vs_normal cells and subsetted and saved"))
}


#save the xenograft objects
for (group in c("xeno_prim_human",
                "xeno_prim_mouse",
                "xeno_mets_human",
                "xeno_mets_mouse")) {
    object <-
        qs::qread(str_c("output/seurat_objects/harmony_sobjs_annot/",
                        group,
                        ".qs"))
    # add the filter genes that are present in less than 1% of cells
    min_prop_cells_expressing <- 0.01
    n_cells_in_data <- length(Cells(object))
    cells_expressing_genes <-
        rowSums(
            GetAssayData(object, layer = "counts") > 0
        ) > min_prop_cells_expressing * n_cells_in_data
    set.seed(199820)
    object <-
        object[cells_expressing_genes, ] %>%
        process_seurat() %>%
        RunHarmony(group.by.vars = harmony_params[[group]]$group_by,
                    theta = harmony_params[[group]]$theta,
                    lambda = harmony_params[[group]]$lambda) %>%
        process_seurat(reduction = "harmony")

    object$SingleR_Ann3 <-
        stringr::str_replace_all(object$annotations,
                                Annotation_cleanup$SingleR_Ann3_label)

    object$SingleR_Ann2 <-
        stringr::str_replace_all(object$SingleR_Ann3,
                                Annotation_cleanup$SingleR_Ann2_label)

    object$SingleR_Ann1 <-
        stringr::str_replace_all(object$SingleR_Ann2,
                                Annotation_cleanup$SingleR_Ann1_label)

    dimplot1 <- 
        dimplot_better(object,
                group_by = "seurat_clusters") +
            NoLegend() +
            theme(plot.title = element_text(size = 7))

    dimplot2 <-
        dimplot_better(object,
                    group_by = "new_annot_clust") +
            NoLegend() +
            theme(plot.title = element_text(size = 7))

    dimplot3 <- 
        dimplot_better(object,
                    group_by = "sample_name") +
            NoLegend() +
            theme(plot.title = element_text(size = 7))

    dimplot4 <- 
        dimplot_better(object,
                    group_by = "data_source") +
            NoLegend() +
            theme(plot.title = element_text(size = 7))
    
    if ("scATOMIC_pred" %in% colnames(object@meta.data)) {
        scAtomic_call <-
            dimplot_better(object,
                        group_by = "scATOMIC_pred") +
                ggtitle(str_c("SCATOMIC_celltype")) +
                NoLegend()
    } else {
        scAtomic_call <- 
            ggplot(data = NULL) +
                aes(x = as.factor(1), y = as.factor(1)) +
                geom_text(aes(label = str_c("scatomic_tumor_call not present for ", group)))
    }

    if ("CNV_status" %in% colnames(object@meta.data)){
        dimplot_CNV <-
            dimplot_better(object,
                        group_by = "CNV_status") +
                NoLegend() +
                theme(plot.title = element_text(size = 7))
    } else {
        dimplot_CNV <- 
            ggplot(data = NULL) +
                aes(x = as.factor(1), y = as.factor(1)) +
                geom_text(aes(label = str_c("scatomic_tumor_call not present for ", group)))
    }

    all_dimplots <- 
        patchwork::wrap_plots(dimplot1,
                            dimplot2,
                            dimplot3,
                            dimplot4,
                            scAtomic_call,
                            dimplot_CNV,
                            ncol = 2,
                            widths = 14,
                            heights = 14) +
        patchwork::plot_annotation(title = group,
                                   theme = theme(plot.title = element_text(size = 10)))

    directory <-
        str_c("output/figures/tumor_vs_stroma/", group)
    if (!dir.exists(directory)) {
        dir.create(directory, recursive = TRUE)
    }

    ggsave(str_c("output/figures/tumor_vs_stroma/",
                group,
                "/",
                "dimplot.png"),
            plot = all_dimplots,
            width = 14,
            height = 14)
    
    # save as qs
    qs::qsave(all_dimplots,
              str_c("output/figures/tumor_vs_stroma/",
                    group,
                    "/",
                    "dimplot.qs"))

    if (object$organism[1] == "human") {
        tumor_featureplot <- 
            FeaturePlot(object,
                        features = c("COL1A1", "COL1A2", "FBLN1",
                                    "SATB2", "RUNX2", "SOX9"),
                        ncol = 3)
        immune_featureplot <- 
            FeaturePlot(object,
                        features = c("CD3E", "CD4", "CD68",
                                    "MUC1", "MS4A1", "ESAM"),
                        ncol = 3)
    } else {
        tumor_featureplot <- 
            FeaturePlot(object,
                        features = c("Col1a1", "Col1a2", "Fbln1",
                                    "Satb2", "Runx2", "Sox9"),
                        ncol = 3) 
        immune_featureplot <- 
            FeaturePlot(object,
                        features = c("Cd3e", "Cd4", "Cd68",
                                    "Muc1", "Ms4a1", "Esam"),
                        ncol = 3)
    }
    ggsave(str_c("output/figures/tumor_vs_stroma/",
                group,
                "/",
                "tumor_featureplot.png"),
            plot = tumor_featureplot,
            width = 21,
            height = 21)

    #save as qs
    qs::qsave(tumor_featureplot,
              str_c("output/figures/tumor_vs_stroma/",
                    group,
                    "/",
                    "tumor_featureplot.qs"))

    ggsave(str_c("output/figures/tumor_vs_stroma/",
                group,
                "/",
                "immune_featureplot.png"),
            plot = immune_featureplot,
            width = 21,
            height = 21)

    #save as qs
    qs::qsave(immune_featureplot,
              str_c("output/figures/tumor_vs_stroma/",
                    group,
                    "/",
                    "immune_featureplot.qs"))

    qs::qsave(object, str_c("output/seurat_objects/tumor_vs_stroma/",
                            group,
                            ".qs"))
}

```


