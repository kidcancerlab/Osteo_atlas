Label potential tumor cell and then split the seurat object into cancer cells and
normal cells. The silhouette score was used to cluster the normal cells and 0.1
resolution was used to cluster the cancer cells (to reduce the excessive)
clustering.
It might be a worthwile to annotate or re run SCEVAN in the cancer cells to filter
out any normal cells that might have been group as cancer cells.

## Pull in cancer cell annotation from all the methods we attempted
Put all the labels into the metadata so we can use them to label the cells
We will make these column names have the format "cancer_lable_{method_name}" so we can select them easily for plotting and doing an ensemble labeling

```{r read_cancer_labels_and_plot}
#| fig.align: center
#| echo: FALSE
#| eval: FALSE

#parallel::mclapply(unique(all_samples_csv$unique), function(group)
for (group in c("patient_prim", "patient_mets", "mm_prim", "mm_mets")) {
    object <-
        qs::qread(str_c("output/seurat_objects/harmony_sobjs_annot/",
                        group,
                        ".qs"))

    # Pull in cancer cell annotation from all the methods we attempted and add them to the metadata
    for (method_used in c("SCEVAN", "scATOMIC", "celltype", "snv_calling")) {
        cancer_label_file <- str_c("output/id_tumor/",
                       method_used,
                       "/",
                       group,
                       "_metadata.tsv")

        if (file.exists(cancer_label_file)) {
            cancer_label <- readr::read_tsv(cancer_label_file) %>%
                filter(cell %in% colnames(object)) %>%
                column_to_rownames("cell")
        }
        object <- object %>%
            AddMetaData(metadata = cancer_label)
    }

    #save the seurat object.size
    qs::qsave(object, str_c("output/seurat_objects/final_combined_sobjs/",
                            group,
                            ".qs"))

    #plot for the cancer normal cells, mouse do not have scatomic tumor call
    if ("scatomic_tumor_call" %in% colnames(object@meta.data)){
        combinedplot1 <-
            dimplot_better(object,
                           group_by = "scatomic_tumor_call") +
                NoLegend() +
                theme(plot.title = element_text(size = 7))
    } else {
        combinedplot1 <- ggplot(data = NULL) +
                            aes(x = as.factor(1), y = as.factor(1)) +
                            geom_text(aes(label = str_c("scatomic_tumor_call not present for ", group)))
    }
    combineplot2 <-
        dimplot_better(object,
                       group_by = "scevan_tumor_call") +
            NoLegend() +
            theme(plot.title = element_text(size = 7))
    combineplot3 <-
        dimplot_better(object,
                       group_by = "final_snv_call") +
            NoLegend() +
            theme(plot.title = element_text(size = 7))
    combineplot4 <-
        dimplot_better(object,
                       group_by = "celltype_tumor_call") +
            NoLegend() +
            theme(plot.title = element_text(size = 7))
    combineplot5 <-
        dimplot_better(object,
                       group_by = "new_annot_clust") +
            NoLegend() +
            theme(plot.title = element_text(size = 7))
    combineplot6 <-
        dimplot_better(object,
                       group_by = "sample_name") +
            NoLegend() +
            theme(plot.title = element_text(size = 7))

    # use patchwork to combine the plots
    combined_plots <- 
        patchwork::wrap_plots(combinedplot1,
                            combineplot2,
                            combineplot3,
                            combineplot4,
                            combineplot5,
                            combineplot6,
                            ncol = 3,
                            widths = 21,
                            heights = 14) +
            patchwork::plot_annotation(title = group) +
            theme(plot.title = element_text(size = 10))

    #save the combined plots
    ggsave(str_c("output/figures/combined_plots/",
                 group,
                 "/",
                 "combined_plots.png"),
           plot = combined_plots,
           width = 21,
           height = 14)

    # save the plot as qs object
    qs::qsave(combined_plots,
              str_c("output/figures/combined_plots/",
                    group,
                    "/",
                    "combined_plots.qs"))
}

#make feature plots for all the groups
for (group in c("patient_prim", "patient_mets", "mm_prim", "mm_mets")) {
    object <-
        qs::qread(str_c("output/seurat_objects/final_combined_sobjs/",
                        group,
                        ".qs"))
    # plot feature plots
    if (object$organism[1] == "human") {
        # tumor features for human
        featureplot1_tumor <-
            FeaturePlot(object,
                        features = c("COL1A1", "COL1A2", "FBLN1",
                                     "SATB2", "RUNX2", "SOX9"),
                        ncol = 3)
        # Tcell=CD3E, Neutrophil=CD4, Macrophase=CD68,CD14, Bcells=MS4A1 or CD20, Endotthelial=ESAM, Epithelial=MUC1
        featureplot2_immune <-
            FeaturePlot(object,
                        features = c("CD3E", "CD4", "CD68",
                                     "MUC1", "MS4A1", "ESAM"),
                        ncol = 3)
    } else {
        # plots for mouse
        featureplot1_tumor <-
            FeaturePlot(object,
                        features = c("Col1a1", "Col1a2", "Fbln1",
                                     "Satb2", "Runx2", "Sox9"),
                        ncol = 3) 

        featureplot2_immune <-
            FeaturePlot(object,
                        features = c("Cd3e", "Cd4", "Cd68",
                                     "Muc1", "Ms4a1", "Esam"),
                        ncol = 3) 
    }
    ggsave(str_c("output/figures/combined_plots/",
                 group,
                 "/",
                 "tumor_featureplots.png"),
           plot = featureplot1_tumor,
           width = 21,
           height = 14)

    qs::qsave(featureplot1_tumor,
              str_c("output/figures/combined_plots/",
                    group,
                    "/",
                    "tumor_featureplots.qs"))

    ggsave(str_c("output/figures/combined_plots/",
                 group,
                 "/",
                 "immune_featureplots.png"),
           plot = featureplot2_immune,
           width = 21,
           height = 14)

    qs::qsave(featureplot2_immune,
              str_c("output/figures/combined_plots/",
                    group,
                    "/",
                    "immune_featureplots.qs"))
}
```


## Split by clustering with right resolution as found by clustree

```{r split_tumor_stromal_main}
# Annotation cleanup
Annotation_cleanup <-
    qs::qread("misc/Annotation_cleanup.qs")

#Harmony parameters for the split
harmony_params <-
    list(patient_prim = list(group_by = c("sample_name",
                                          "method",
                                          "data_source"),
                             theta = c(5, 5, 5),
                             lambda = c(0.5, 0.5, 0.5)),
        patient_mets = list(group_by = c("sample_name",
                                         "method",
                                         "data_source"),
                            theta = c(7, 7, 7),
                            lambda = c(0.5, 0.5, 0.5)),
        xeno_prim_human = list(group_by = c("sample_name",
                                            "method",
                                            "data_source"),
                               theta = c(7, 7, 7)),
        xeno_mets_human = list(group_by = c("sample_name",
                                            "method",
                                            "data_source"),
                               theta = c(7, 7, 7)),
        xeno_prim_mouse = list(group_by = c("sample_name",
                                            "data_source"),
                                theta = c(7, 7)),
        xeno_mets_mouse = list(group_by = c("sample_name",
                                            "method",
                                            "data_source"),
                               theta = c(7, 7, 7)),
        mm_prim = list(group_by = c("sample_name",
                                    "model"),
                       theta = c(12, 12),
                       lambda = c(0.1, 0.1)),
        mm_mets = list(group_by = c("sample_name",
                                    "model"),
                       theta = c(7, 7),
                       lambda = c(0.1, 0.1)),
        normal_bone = list(group_by = c("sample_name"),
                           theta = c(7)))


#reference for annotating mets
human_lung_ref <-
    qs::qread("input/downloads/ds_human_lung_atlas.qs") %>%
    subset(free_annotation != "Lymphatic_EC_differentiating")

mets_ref <- list(GetAssayData(human_lung_ref), hpca)
mets_label <- list(human_lung_ref$free_annotation, hpca$label.fine)

mouse_lung_ref_new <- qs::qread("input/downloads/normal_mouselung.qs")

mouse_lung_ref_new$CellType <-
            str_replace_all(mouse_lung_ref_new$free_annotation,
                            c("/" = "_",
                              "\\+" = "_plus",
                              "-" = "_",
                              " " = "_",
                              "^Alveolar_Epithelial_Type_2$" = "Alveolar_Epithelial"))


for (group in c("patient_prim", "patient_mets", "mm_prim", "mm_mets")) {
    object <-
        qs::qread(str_c("output/seurat_objects/final_combined_sobjs/",
                        group,
                        ".qs"))

    if (any(c("S0200", "S0201") %in% object$sample_name)) {
        object <- subset(object,
                         sample_name != "S0200" & sample_name != "S0201")
    }

    for (cell_group_name in c("cancer_cells", "normal_cells")) {
        sub_group <- str_c(group, "_", cell_group_name)

        if  (cell_group_name == "normal_cells") {
            s_obj <-
                subset(x = object,
                        celltype_tumor_call == cell_group_name) %>%
                process_seurat() %>%
                RunHarmony(group.by.vars = harmony_params[[group]]$group_by) %>%
                process_seurat(reduction = "harmony")

            set.seed(199820)
            if (sub_group == "patient_mets_normal_cells") {
                set.seed(199820)
                ref_lung <- 
                    SingleR::SingleR(test = as.SingleCellExperiment(s_obj),
                                    ref = GetAssayData(human_lung_ref),
                                    labels = human_lung_ref$free_annotation,
                                    aggr.ref = TRUE)
            } else if (sub_group == "patient_prim_normal_cells") {
                set.seed(199820)
                ref_lung <- 
                    SingleR::SingleR(test = as.SingleCellExperiment(s_obj),
                                    ref = list(hpca, huim),
                                    labels = list(hpca$label.fine, huim$label.fine),
                                    aggr.ref = TRUE)
            } else if (sub_group == "mm_mets_normal_cells") {
                set.seed(199820)
                ref_lung <- 
                    SingleR::SingleR(test = as.SingleCellExperiment(s_obj),
                                    ref = GetAssayData(mouse_lung_ref_new),
                                    labels = mouse_lung_ref_new$CellType,
                                    aggr.ref = TRUE)
            } else {
                set.seed(199820)
                ref_lung <- 
                    SingleR::SingleR(test = as.SingleCellExperiment(s_obj),
                                    ref = list(moim, mord),
                                    labels = list(moim$label.fine, mord$label.fine),
                                    aggr.ref = TRUE)
            }
            s_obj$annotations <- ref_lung$labels

            Idents(s_obj) <- s_obj$seurat_clusters
            clust_info <- tibble()
            for (cluster in unique(s_obj$seurat_clusters)) {
                subset_object <- subset(s_obj, ident = cluster) %>%
                    FindVariableFeatures() %>%
                    ScaleData() %>%
                    # don't ask for more PCs than there are cells
                    RunPCA(npcs = min(50,
                                    sum(s_obj$seurat_clusters == cluster) - 1))

                if (length(unique(subset_object$sample_name)) > 1 &&
                    ncol(subset_object) > 50) {
                    subset_object <- RunHarmony(subset_object,
                                                group.by.vars = "sample_name") %>%
                        process_seurat(reduction = "harmony")
                } else {
                    subset_object <- subset_object
                }

                subset_object$re_cluster <- str_c(cluster,
                                                ".",
                                                subset_object$seurat_clusters)

                print(str_c("Done reclustering ", group, " ", cluster))
                clust_info <- subset_object@meta.data %>%
                        as.data.frame() %>%
                        select(re_cluster) %>%
                        rbind(clust_info)
            }

            s_obj <- AddMetaData(s_obj, metadata = clust_info)
            s_obj$new_annot_clust <- s_obj$re_cluster

            cluster_celltypes <-
                table(s_obj$re_cluster, s_obj$annotations) %>%
                as.data.frame() %>%
                group_by(Var1) %>%
                arrange(desc(Freq), .by_group = TRUE) %>%
                slice_head(n = 1)

            for (i in seq_len(nrow(cluster_celltypes))) {
                seurat_clust <- str_c("^", cluster_celltypes$Var1[i], "$") %>%
                    as.character()

                celltype <- cluster_celltypes$Var2[i] %>%
                    as.character()

                s_obj$new_annot_clust <-
                    str_replace_all(string = s_obj$new_annot_clust,
                                    pattern = seurat_clust,
                                    replacement = celltype)
            }
        } else {
            s_obj <-
                subset(x = object,
                        celltype_tumor_call == cell_group_name) %>% 
                process_seurat() %>%
                RunHarmony(group.by.vars = harmony_params[[group]]$group_by,
                            theta = harmony_params[[group]]$theta,
                            lambda = harmony_params[[group]]$lambda) %>%
                process_seurat(reduction = "harmony")
        }
        s_obj$SingleR_Ann3 <-
            stringr::str_replace_all(s_obj$new_annot_clust,
                                    Annotation_cleanup$SingleR_Ann3_label)

        s_obj$SingleR_Ann2 <-
            stringr::str_replace_all(s_obj$SingleR_Ann3,
                                    Annotation_cleanup$SingleR_Ann2_label)

        s_obj$SingleR_Ann1 <-
            stringr::str_replace_all(s_obj$SingleR_Ann2,
                                    Annotation_cleanup$SingleR_Ann1_label)  

        dimplot1 <- 
            dimplot_better(s_obj,
                        group_by = "seurat_clusters") +
                NoLegend() +
                theme(plot.title = element_text(size = 7))


        dimplot2 <- 
            dimplot_better(s_obj,
                        group_by = "new_annot_clust") +
                NoLegend() +
                theme(plot.title = element_text(size = 7))

        dimplot3 <- 
            dimplot_better(s_obj,
                        group_by = "sample_name") +
                NoLegend() +
                theme(plot.title = element_text(size = 7))

        dimplot4 <- 
            dimplot_better(s_obj,
                        group_by = "data_source") +
                NoLegend() +
                theme(plot.title = element_text(size = 7))

        all_dimplots <- 
            patchwork::wrap_plots(dimplot1,
                                  dimplot2,
                                  dimplot3,
                                  dimplot4,
                                  ncol = 2,
                                  widths = 14,
                                  heights = 14) +
            patchwork::plot_annotation(title = str_c(group, " ", cell_group_name)) +
            theme(plot.title = element_text(size = 10))

        ggsave(str_c("output/figures/tumor_vs_stroma/",
                    group,
                    "/",
                    cell_group_name,
                    "_dimplot.png"),
                plot = all_dimplots,
                width = 14,
                height = 14)

        #save as qs
        qs::qsave(all_dimplots,
                  str_c("output/figures/tumor_vs_stroma/",
                        group,
                        "/",
                        cell_group_name,
                        "_dimplot.qs"))

        if (object$organism[1] == "human") {
            tumor_featureplot <- 
                FeaturePlot(s_obj,
                            features = c("COL1A1", "COL1A2", "FBLN1",
                                        "SATB2", "RUNX2", "SOX9"),
                            ncol = 3)
            immune_featureplot <- 
                FeaturePlot(s_obj,
                            features = c("CD3E", "CD4", "CD68",
                                        "MUC1", "MS4A1", "ESAM"),
                            ncol = 3)
        } else {
            tumor_featureplot <- 
                FeaturePlot(s_obj,
                            features = c("Col1a1", "Col1a2", "Fbln1",
                                        "Satb2", "Runx2", "Sox9"),
                            ncol = 3)
            immune_featureplot <-
                FeaturePlot(s_obj,
                            features = c("Cd3e", "Cd4", "Cd68",
                                        "Muc1", "Ms4a1", "Esam"),
                            ncol = 3)
        }
            ggsave(str_c("output/figures/tumor_vs_stroma/",
                        group,
                        "/",
                        cell_group_name,
                        "_tumor_featureplot.png"),
                    plot = tumor_featureplot,
                    width = 21,
                    height = 21)

        #save as qs
        qs::qsave(tumor_featureplot,
                  str_c("output/figures/tumor_vs_stroma/",
                        group,
                        "/",
                        cell_group_name,
                        "_tumor_featureplot.qs"))

        ggsave(str_c("output/figures/tumor_vs_stroma/",
                    group,
                    "/",
                    cell_group_name,
                    "_immune_featureplot.png"),
                plot = immune_featureplot,
                width = 21,
                height = 21)
        
        #save as qs
        qs::qsave(immune_featureplot,
                  str_c("output/figures/tumor_vs_stroma/",
                        group,
                        "/",
                        cell_group_name,
                        "_immune_featureplot.qs"))

        qs::qsave(s_obj, str_c("output/seurat_objects/tumor_vs_stroma/",  #nolint
                                group, "_",
                                cell_group_name,
                                ".qs"))
    }
    print(str_c(group, " labelled with cancer_vs_normal cells and subsetted and saved"))
}

#save the xenograft objects
for (group in c("xeno_prim_human",
                "xeno_prim_mouse",
                "xeno_mets_human",
                "xeno_mets_mouse")) {
    object <-
        qs::qread(str_c("output/seurat_objects/harmony_sobjs_annot/",
                        group,
                        ".qs"))
    if (group == "xeno_prim_human") {
        object <- subset(object, 
                        sample_name != "SJOS030279_X1") %>%
            process_seurat() %>%
            RunHarmony(group.by.vars = c("sample_name", "data_source", "method"),
                        theta = c(7, 7, 7)) %>%
        process_seurat(reduction = "harmony",
                       resolution = 0.15)
    }
    object$SingleR_Ann3 <-
        stringr::str_replace_all(object$annotations,
                                Annotation_cleanup$SingleR_Ann3_label)
                   

    object$SingleR_Ann2 <-
        stringr::str_replace_all(object$SingleR_Ann3,
                                Annotation_cleanup$SingleR_Ann2_label)
                
    object$SingleR_Ann1 <-
        stringr::str_replace_all(object$SingleR_Ann2,
                                Annotation_cleanup$SingleR_Ann1_label)

    dimplot1 <- 
        dimplot_better(object,
                group_by = "seurat_clusters") +
            NoLegend() +
            theme(plot.title = element_text(size = 7))

    dimplot2 <-
        dimplot_better(object,
                    group_by = "new_annot_clust") +
            NoLegend() +
            theme(plot.title = element_text(size = 7))

    dimplot3 <- 
        dimplot_better(object,
                    group_by = "sample_name") +
            NoLegend() +
            theme(plot.title = element_text(size = 7))

    dimplot4 <- 
        dimplot_better(object,
                    group_by = "data_source") +
            NoLegend() +
            theme(plot.title = element_text(size = 7))

    all_dimplots <- 
        patchwork::wrap_plots(dimplot1,
                            dimplot2,
                            dimplot3,
                            dimplot4,
                            ncol = 2,
                            widths = 14,
                            heights = 14) +
        patchwork::plot_annotation(title = group,
                                   theme = theme(plot.title = element_text(size = 10)))
    
    ggsave(str_c("output/figures/tumor_vs_stroma/",
                group,
                "/",
                "dimplot.png"),
            plot = all_dimplots,
            width = 14,
            height = 14)
    
    # save as qs
    qs::qsave(all_dimplots,
              str_c("output/figures/tumor_vs_stroma/",
                    group,
                    "/",
                    "dimplot.qs"))

    if (object$organism[1] == "human") {
        tumor_featureplot <- 
            FeaturePlot(object,
                        features = c("COL1A1", "COL1A2", "FBLN1",
                                    "SATB2", "RUNX2", "SOX9"),
                        ncol = 3)
        immune_featureplot <- 
            FeaturePlot(object,
                        features = c("CD3E", "CD4", "CD68",
                                    "MUC1", "MS4A1", "ESAM"),
                        ncol = 3)
    } else {
        tumor_featureplot <- 
            FeaturePlot(object,
                        features = c("Col1a1", "Col1a2", "Fbln1",
                                    "Satb2", "Runx2", "Sox9"),
                        ncol = 3) 
        immune_featureplot <- 
            FeaturePlot(object,
                        features = c("Cd3e", "Cd4", "Cd68",
                                    "Muc1", "Ms4a1", "Esam"),
                        ncol = 3)
    }
    ggsave(str_c("output/figures/tumor_vs_stroma/",
                group,
                "/",
                "tumor_featureplot.png"),
            plot = tumor_featureplot,
            width = 21,
            height = 21)

    #save as qs
    qs::qsave(tumor_featureplot,
              str_c("output/figures/tumor_vs_stroma/",
                    group,
                    "/",
                    "tumor_featureplot.qs"))

    ggsave(str_c("output/figures/tumor_vs_stroma/",
                group,
                "/",
                "immune_featureplot.png"),
            plot = immune_featureplot,
            width = 21,
            height = 21)

    #save as qs
    qs::qsave(immune_featureplot,
              str_c("output/figures/tumor_vs_stroma/",
                    group,
                    "/",
                    "immune_featureplot.qs"))

    qs::qsave(object, str_c("output/seurat_objects/tumor_vs_stroma/",
                            group,
                            ".qs"))
}

```


## Redoing some of the clustering for the patient_mets_cancer_cells
```{r}
patient_mets_cancer <-
    qs::qread("output/seurat_objects/tumor_vs_stroma/patient_mets_cancer_cells.qs")

Idents(patient_mets_cancer) <- patient_mets_cancer$sample_name

#clean some of the samples that do not harmonize well. 
# Reason being that they are all just quiescent cells and do not have any real signal
sample_names_iwant <-
    unique(patient_mets_cancer$sample_name) %>%
    .[!. %in% c("CCDI0095_7978", "CCDI0097_8978", "CCDI0053_445", "SJOS001105_M1")]

new_subset <-
    patient_mets_cancer %>%
    subset(sample_name %in% sample_names_iwant) %>%
    process_seurat() %>%
    RunHarmony(group.by.vars = c("sample_name",
                                         "method",
                                         "data_source"),
                theta = c(7, 7, 7),
                lambda = c(0.5, 0.5, 0.5)) %>%
    process_seurat(reduction = "harmony") %>%
    FindClusters(resolution = 0.15)

qs::qsave(new_subset,
        file = "output/seurat_objects/tumor_vs_stroma/patient_mets_cancer_cells.qs")
```

