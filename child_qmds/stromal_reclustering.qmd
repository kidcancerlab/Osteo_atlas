Recluster the normal cell types and annotate the types.

## Normal cells reclustering

```{r setup, include=FALSE}

object_list <-
    tribble(~group,                         ~res_value,
            "patient_prim_normal_cells",    0.15,
            "patient_mets_normal_cells",    0.05,
            "xeno_prim_mouse",              0.1,
            "xeno_mets_mouse",              0.1,
            "mm_prim_normal_cells",         0.25,
            "mm_mets_normal_cells",         0.2)

object_list <- list(patient_prim_normal_cells = c("Macrophage",
                                                  "Endothelial_cells",
                                                  "Tcells",
                                                  "NK cells",
                                                  "Monocytes",
                                                  "Dendritic cells",
                                                  "B cells"),
                    patient_mets_normal_cells = c("Macrophage",
                                                  "Endothelial_cells",
                                                  "Tcells",
                                                  "NK cells",
                                                  "Monocytes",
                                                  "Dendritic cells",
                                                  "B cells"),)


mousify <- function(a){
    return(paste0(substr(a,1,1), tolower(substr(a,2, nchar(a)))))
}

genes <- c("CD4", "CD45", "COL1A1", "SATB2")

mouse <- nichenetr::convert_human_to_mouse_symbols(genes)

genes_m <- sapply(genes, mousify)


#https://www.cell.com/trends/immunology/fulltext/S1471-4906(22)00094-1
Macrophages <- list(LA_TAMs = c("APOC1", "APOE", "APC5", "FABP5"),
                   Inflam_TAMs = c("IL1B", "CCL3", "CXCL1", "CXCL2", "CXCL3", "CXCL5"),
                   IFN_TAMs = c("IDO", "ISG15", "CXCL8", "CXCL9", "CXCL10"),
                   Reg_TAMs = c("AGR1", "MRC1", "CD274", "CX3CR1"),
                   Prolif_TAMs = c("MKI67", "CDK1"),
                   RTM_TAMs = c("LYVE1", "HES1", "FOLR2"),
                   Angio_TAMs = c("VEGFA", "ANGPT2", "ANGPTL4", "SSP1"))

#https://www.nature.com/articles/s41467-021-23324-4
#https://www.biocompare.com/Editorial-Articles/569888-A-Guide-to-T-Cell-Markers/
T_cells <- list(CD4_cells = c("CD4", "IL7R", "IL21"),
                CD8_cells = c("CD8A", "CD8B", "GZMK", "GZMB", "PRF1"),
                T_reg = c("FOXP3", "IL2RA", "CTLA4"),
                Exhausted = c("PD1", "TOX", "TIGIT"),
                Prolif_T = c("MKI67", "CDK1", "CDK4"))

#https://www.ncbi.nlm.nih.gov/pmc/articles/PMC9192344/
Fibroblasts <- list(MyoFibroblasts = c("FBLN1", "TAGLN", "ASPN", "MYLK", "WIF1", "ACTA2"),
                    InflamFibroblasts = c("IL6", "IL1B", "CXCL1", "CXCL2", "CXCL3", "CXCL5"),
                    MatrixFibroblasts = c("COL1A1", "COL1A2", "COL3A1", "COL5A1", "COL5A2", "COL6A1"),
                    AngioFibroblasts = c("VEGFA", "ANGPT2", "ANGPTL4", "SSP1"),
                    AdventitialFibroblasts = c("PDGFRB", "SERPINF1", "PI16", "SFRP2"),
                    AlveolarFibroblasts = c("SFTPC", "AQP5", "PDPN", "KRT5"))

# Dan regan paper
Dendritic_cells <- list(PreDC = c("IL3RA", "PGLYRP2", "DDR2"),
                        mregDC = c("IDO1", "IL4I1", "CCR7"),
                        pDC = c("IGF1", "RARRES2", "IGHM", "IGKC"),
                        cDC1 = c("CADM1", "DNASE1L3", "CLEC1B"),
                        cDC2 = c("CD300H", "PID1", "CD1C"))



for (module in names(get(celltypes))) {
    cell_ranks <- AUCell::AUCell_run(subset_sobj[["RNA"]]$counts,
                                     geneSets = get(celltypes)[[module]])
    subset_sobj[[module]] <- AUCell::getAUC(cell_ranks)[1,]

    feature_plot <- FeaturePlot(subset_sobj,
                                module,
                                cols = c("#EEEEEE", "#ae0600"),
                                min.cutoff = 0.15,
                                pt.size = 1,
                                order = TRUE) +
                        coord_fixed() +
                        ggtitle(paste0(celltypes, ": ", module))

    featureplot_list[[module]] <- feature_plot
}








for (item in seq_len(nrow(object_list))) {
    group <- object_list$group[item]
    res_value <- object_list$res_value[item]

    object <- qs::qread(str_c("output/seurat_objects/tumor_vs_stroma/",
                              group,
                              ".qs"))

    object <- 
        FindClusters(object,
                    resolution = res_value)

    dimplot_main <-
        dimplot_better(object,
                      group_by = "new_annot_clust") +
            ggtitle(group) +
            NoLegend()

    for (celltypes in unique(object$new_annot_clust)) {
        subset_sobj <- subset(object,
                              annotations == celltypes) %>%
            process_seurat() %>%
            RunHarmony(group.by.vars = "sample_name")

        sil_val <- optimize_silhouette(sobject = subset_sobj,
                                       test_res = seq(0.05, 0.9, by = 0.05),
                                       summary_plot = FALSE,
                                       reduction = "harmony") %>%
            filter(sil_vals == max(sil_vals)) %>%
            slice_head(n=1) %>%
            dplyr::pull(res_vals)

        subset_sobj <- subset_sobj %>%
            process_seurat(reduction = "harmony",
                           resolution = sil_val)

        #make the dimplot
        dimplot_subset <- 
            dimplot_better(subset_sobj,
                        group_by = "seurat_clusters") +
                ggtitle(celltypes) +
                NoLegend()

        #prepare the matrix for aucell
        matrix <- subset_sobj@assays$RNA$counts

        featureplot_list <- list()

        for (module in names(get(celltypes))) {
            cell_ranks <- AUCell::AUCell_run(exprMat = matrix,
                                            geneSets = get(celltypes)[[module]])
            subset_sobj[[module]] <- AUCell::getAUC(cell_ranks)[1,]

            feature_plot <- FeaturePlot(subset_sobj,
                                        module,
                                        cols = c("#EEEEEE", "#ae0600"),
                                        min.cutoff = 0.15,
                                        pt.size = 1,
                                        order = TRUE) +
                                coord_fixed() +
                                ggtitle(paste0(celltypes, ": ", module))

            featureplot_list[[module]] <- feature_plot
        }

        # Combine all the plots into a panel plot with 
        panel_plot <- cowplot::plot_grid(plotlist = featureplot_list,
                                         ncol = 2)

        # Recluster the cells
        clust_info <- tibble()
        for (clusters in unique(subset_sobj$seurat_clusters)) {
            re_subset_sobj <- subset(subset_sobj,
                                     ident = clusters) %>%
                FindVariableFeatures() %>%
                ScaleData() %>%
                RunPCA(npcs = 50) %>%
                RunUMAP(dims= 1:30)

            if (length(unique(re_subset_sobj$sample_name)) > 1 &&
                ncol(re_subset_sobj) > 50) {
                re_subset_sobj <- RunHarmony(re_subset_sobj,
                                            group.by.vars = "sample_name") %>%
                    process_seurat(reduction = "harmony")
            } else {
                re_subset_sobj <- re_subset_sobj
            }

            re_subset_sobj$rere_cluster <- str_c(clusters,
                                                ".",
                                                re_subset_sobj$seurat_clusters)

            print(str_c("Done reclustering ", group, " ", celltypes, " ", clusters))
            clust_info <- re_subset_sobj@meta.data %>%
                as.data.frame() %>%
                select(rere_cluster) %>%
                rbind(clust_info)
        }

        subset_sobj <- AddMetaData(subset_sobj, metadata = clust_info)
        subset_sobj$seurat_clusters <- subset_sobj$rere_cluster

        # correlation analysis
        correlation_plot <- 
            AverageExpression(subset_sobj,
                              layer = "scale.data",
                              group.by = "seurat_clusters")$RNA %>%
                as.matrix() %>%
                cor() %>%
                pheatmap::pheatmap(display_numbers = TRUE,
                                   silent = TRUE)

        #save the correlation plot
        ggsave(filename = str_c("output/figures/relustering_normals/",
                               group,
                               "/",
                               celltypes,
                               "_correlation.png"),
               plot = correlation_plot,
               width = 14,
               height = 14,
               bg = "white")

        #make the panel plot for degs and GSEA
        make_panel_plot(sobj = subset_sobj,
                        cluster_column = "seurat_clusters",
                        label = celltypes,
                        group = group)

        #Add module scores for each celltypes and features
        module_object <-
            AddModuleScore(subset_sobj,
                        features = get(celltypes),
                        name = paste0(names(get(celltypes)), "@"))

        # Remove numbers from module names in metadata
        colnames(module_object@meta.data) <-
            gsub("@.+", "", names(module_object@meta.data))
        
        #make an empty list for plots
        featureplot_list <- list()

        for (module in names(get(celltypes))) {
            feature_plot <- FeaturePlot(module_object,
                                                      features = module) +
                ggtitle(paste0(celltypes, ": ", module)) +
                coord_fixed()

            featureplot_list[[module]] <- feature_plot
        }
        # Combine all the plots into a panel plot with optimized dimensions
        panel_plot <- cowplot::plot_grid(dimplot_main,
                                         dimplot_subset,
                                         plotlist = featureplot_list,
                                         ncol = 2)
        
        #calcuate height based of the number of features
        length_var <- if (length(featureplot_list) %% 2 == 1) length(featureplot_list) + 1 
            else length(featureplot_list)

        height <- (length_var/2 * 7) + 7

        # save the panel plot
        ggsave(filename = str_c("output/figures/relustering_normals/",
                                       group,
                                       "/",
                                       celltypes,
                                       ".png"),
                       plot = panel_plot,
                       width = 14,
                       height = height,
                       device = "png",
                       bg = "white")
    }
}



```