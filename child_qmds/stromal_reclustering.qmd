Recluster the normal cell types and annotate the types.

## Normal cells reclustering

```{r normal_reclustering, include=FALSE}

#https://www.cell.com/trends/immunology/fulltext/S1471-4906(22)00094-1
Macrophages <- list(LA_TAMs = c("APOC1", "APOE", "APC5", "FABP5"),
                   Inflam_TAMs = c("IL1B", "CCL3", "CXCL1", "CXCL2", "CXCL3", "CXCL5"),
                   IFN_TAMs = c("IDO", "ISG15", "CXCL8", "CXCL9", "CXCL10"),
                   Reg_TAMs = c("AGR1", "MRC1", "CD274", "CX3CR1"),
                   Prolif_TAMs = c("MKI67", "CDK1"),
                   RTM_TAMs = c("LYVE1", "HES1", "FOLR2"),
                   Angio_TAMs = c("VEGFA", "ANGPT2", "ANGPTL4", "SSP1"))
                   
                #    Alveolar_TAMs = c("CD11c", "MARCO", "CD64", "CD169", "CD11c"),
                #    Adventitial_TAMs = c("PDGFRB", "SERPINF1", "PI16", "SFRP2"),
                #    Interstitial_TAMs = c("CD11b", "CD11c", "CD64"),
                #    Pro-inflammatory = c("AZIN1", "CD38","CD86","CXCL10","FPR2","GPR18", "IL12B",
                #                        "IL18","IRF5","NFKBIZ","NOS2","PTGS2","TLR4","TNF"),
                #    Anti-inflammatory = c("ALOX15", "ARG1", "CHIL3", "CHIL4","EGR2", "IL10",
                #                           "IRF4","KLF4","MRC1","MYC","SOCS2","TGM2")
# alveolar macs and int macs?


#https://www.nature.com/articles/s41467-021-23324-4
#https://www.biocompare.com/Editorial-Articles/569888-A-Guide-to-T-Cell-Markers/
#https://www.abcam.com/en-us/technical-resources/research-areas/marker-guides/t-cell-markers
T_cells <-
    list(CD4_cells = c("CD4", "IL7R", "IL21"),
        CD8_cells = c("CD8A", "CD8B", "GZMK", "GZMB", "PRF1"),
        NaÃ¯ve = c("CCR7", "LEF1", "SELL", "TCF7", "CD3", "CD62L", "CD197"),
        Cytotoxic = c("CST7", "GZMA", "GZMB", "IFNG", "PRF1", "TNFSF10"),
        T_reg = c("FOXP3", "IL2RA", "CTLA4", "CD25", "IL4R", "IL7", "TGFB1",
                "TGFB3", "TGFBR1", "CD4", "STAT5", "CD127", "IL12", "IL10"),
        Exhausted = c("PD1", "TOX", "TIGIT", "BTLA", "CTLA4", "HAVCR2", "LAG3", "PDCD1", "TIGIT"),
        Prolif_T = c("MKI67", "CDK1", "CDK4", "TK1", "DIAPH3"),
        IFN_signature = c("CXCL10", "IFI44", "OAS1", "ISG15", "IFI44L", "IFGGB2"))

#https://www.ncbi.nlm.nih.gov/pmc/articles/PMC9192344/
Fibroblasts <- list(MyoFibroblasts = c("FBLN1", "TAGLN", "ASPN", "MYLK", "WIF1", "ACTA2"),
                    InflamFibroblasts = c("IL6", "IL1B", "CXCL1", "CXCL2", "CXCL3", "CXCL5"),
                    MatrixFibroblasts = c("COL1A1", "COL1A2", "COL3A1", "COL5A1", "COL5A2", "COL6A1"),
                    AngioFibroblasts = c("VEGFA", "ANGPT2", "ANGPTL4", "SSP1"),
                    AdventitialFibroblasts = c("PDGFRB", "SERPINF1", "PI16", "SFRP2"),
                    AlveolarFibroblasts = c("SFTPC", "AQP5", "PDPN", "KRT5"))

# Dan regan paper
Dendritic_cells <- list(PreDC = c("IL3RA", "PGLYRP2", "DDR2"),
                        mregDC = c("IDO1", "IL4I1", "CCR7"),
                        pDC = c("IGF1", "RARRES2", "IGHM", "IGKC"),
                        cDC1 = c("CADM1", "DNASE1L3", "CLEC1B"),
                        cDC2 = c("CD300H", "PID1", "CD1C"))

#https://www.abcam.com/en-us/technical-resources/research-areas/marker-guides/b-cell-markers
#panglodb markers
B_cells <- list(Immature_B = c("CD19", "CD20", "CD34", "CD38", "CD45R"),
                Memory_B_cells = c("CD38", "CD80", "CD84", "CD86", "NT5E", "PAX5",
                                "PTPRC", "SPIB", "ADAM28", "AIM2", "ALOX5", "BACH2",
                                "BANK1", "BLK", "CCR6", "CD180", "CD19", "CD1C",
                                "CD22", "CD27", "CD37", "CD69", "CD72", "CD79A",
                                "CD79B", "CLCA3P", "CR2", "CXCR5", "DENND5B", "FCGR2B",
                                "FCRL2", "FRK", "GNG7", "GPR18", "GUSBP11", "HHEX",
                                "HLA-DOB", "IFNA10", "IGHD", "IGHM", "IGKC", "IGLL3P",
                                "IL7", "IRF8", "LTB", "LY86", "MBL2", "MS4A1",
                                "NMBR", "NPIPB15", "P2RX5", "PNOC", "PTPRCAP", "RALGPS2",
                                "RASGRP2", "SIK1", "SIT1", "SLC12A1", "SP140", "STAP1",
                                "TMEM156", "TNFRSF13B", "TNFRSF17", "TRAF4", "VPREB3", "ZBTB32"),
                Plasm_B = c("CD38", "CD138", "IgG", "CD45", "CD184", "TNFRSF17"),
                Regulatory = c("IgM", "CD19", "CD1d", "CD21", "CD5"),
                B_cells_naive <- c("CD19", "CD2", "CD72", "IL2RA", "MME", "ABCB4", "ADAM28",
                                "BACH2", "BANK1", "BCL7A", "BEND5", "BLK", "BRAF", "CD180",
                                "CD1C", "CD22", "CD37", "CD69", "CD79A", "CD79B", "CR2",
                                "CXCR5", "EAF2", "FCER2", "FCGR2B", "FCRL2", "FRK", "GPR18",
                                "GUSBP11", "HHEX", "HLA-DOB", "IGHD", "IGHM", "IGKC",
                                "IGLL3P", "IL4R", "IRF8", "LTB", "LY86", "MEP1A", "MICAL3",
                                "MS4A1", "NMBR", "P2RX5", "P2RY14", "PNOC", "PSG2", "PTPRCAP",
                                "RALGPS2", "RASGRP2", "SELL", "SIK1", "SLC12A1", "SPIB",
                                "STAP1", "TCL1A", "UGT1A8", "VPREB3", "ZNF286A", "TNFSF8",
                                "FOXP1", "MITF", "CD52", "HLA-DQB1", "TNFRSF13C", "LINC00926",
                                "STAG3", "BIRC3", "CD74"))


#https://www.ahajournals.org/doi/10.1161/CIRCULATIONAHA.120.052318
Endothelial_cells <- list(Artery = c("SOX17","BMX", "SEMA3G","HEY1","LTBP4","FBLN5","GJA5","GJA4"),
                        Vein = c("NR2F220", "COUP-TFII", "VCAM1", "ACKR128", "SELP28", "ACKR1",
                                 "FAM174B", "LHX6", "ADAMTS18", "VWF", "IGFBP7", "CLU"),
                        Capillary = c("CA416", "PRX", "RGCC", "SPARC", "SGK1"),
                        Lymphatic = c("LYVE1", "PDPN", "FLT4", "PROX1", "PDPN16", "SEMA3A",
                                      "TBX1", "HOXD3", "NR2F1", "NR2F2", "KDR", "GPR182", "TEK"))

markers_list <-
    read_tsv("input/downloads/PanglaoDB_markers_27_Mar_2020.tsv") %>%
    select(`official gene symbol`, `cell type`) %>% 
    subset(`cell type` %in% c("Alveolar macrophages",
                              "Airway epithelial cells",
                              "B cells",
                              "B cells memory",
                              "B cells naive",
                              "Basal cells",
                              "Basophils",
                              "Cardiomyocytes",
                              "Ciliated cells",
                              "Dendritic cells",
                              "Endothelial cells",
                              "Epithelial cells",
                              "Fibroblasts",
                              "Gamma delta T cells",
                              "Macrophages",
                              "Mast cells",
                              "Megakaryocytes",
                              "Mesotheial cells",
                              "Monocytes",
                              "Myeloid-derived suppressor cells",
                              "Myofibroblasts",
                              "Natural killer T cells",
                              "Neutrophils",
                              "NK cells",
                              "Chondrocytes",
                              "Osteoblasts",
                              "Osteoclasts",
                              "Plasma cells",
                              "Plasmacytoid dendritic cells",
                              "Platelets",
                              "Pulmonary alveolar type I cells",
                              "Pulmonary alveolar type II cells",
                              "Pulmonary vascular smooth muscle cells",
                              "Stromal cells",
                              "T cells",
                              "T cells naive",
                              "T cytotoxic cells",
                              "T follicular helper cells",
                              "T helper cells",
                              "T memory cells",
                              "T regulatory cells",
                              "Vascular smooth muscle cells"))
markers_list1 <- markers_list %>%
    mutate(General_celltypes = str_replace_all(`cell type`,
                                        c("^Alveolar macrophages$" = "Macrophages",
                                          "^B cells$" = "B_cells",
                                          "^B cells memory$" = "B_cells_memory",
                                          "^B cells naive$" = "B_cells_naive",
                                          "^Basal cells$" = "Epithelial_cells",
                                          "^Basophils$" = "Granulocytes",
                                          "^Ciliated cells$" = "Epithelial_cells",
                                          "^Dendritic cells$" = "Dendritic_cells",
                                          "^Endothelial cells$" = "Endothelial_cells",
                                          "^Epithelial cells$" = "Epithelial_cells",
                                          "^Fibroblasts$" = "Fibroblasts",
                                          "^Gamma delta T cells$" = "T_cells",
                                          "^Macrophages$" = "Macrophages",
                                          "^Mast cells$" = "Mast_cells",
                                          "^Megakaryocytes$" = "Megakaryocytes",
                                          "^Mesotheial cells$" = "Mesothelial_cells",
                                          "^Monocytes$" = "Monocytes",
                                          "^Myeloid-derived suppressor cells$" = "Macrophages",
                                          "^Myofibroblasts$" = "Fibroblasts",
                                          "^Natural killer T cells$" = "T_cells",
                                          "^Neutrophils$" = "Granulocytes",
                                          "^NK cells$" = "NK_cells",
                                          "^Chondrocytes$" = "Chondrocytes",
                                          "^Osteoblasts$" = "Osteoblasts",
                                          "^Osteoclasts$" = "Osteoclasts",
                                          "^Plasma cells$" = "B_cells",
                                          "^Plasmacytoid dendritic cells$" = "Dendritic_cells",
                                          "^Platelets$" = "Platelets",
                                          "^Pulmonary alveolar type I cells$" = "Epithelial_cells",
                                          "^Pulmonary alveolar type II cells$" = "Epithelial_cells",
                                          "^Pulmonary vascular smooth muscle cells$" = "Smooth_muscle_cells",
                                          "^Stromal cells$" = "Stromal_cells",
                                          "^T cells$" = "T_cells",
                                          "^T cells naive$" = "T_cells_naive",
                                          "^T cytotoxic cells$" = "T_cells_cytotoxic",
                                          "^T follicular helper cells$" = "Tfhelper_cells",
                                          "^T helper cells$" = "Th_cells",
                                          "^T memory cells$" = "T_cells_memory",
                                          "^T regulatory cells$" = "Treg_cells",
                                          "^Vascular smooth muscle cells$" = "Smooth_muscle_cells"))) %>%
    mutate(cell_types = str_replace_all(`cell type`, " ", "_"))

markers_list_summary <- markers_list1 %>%
    group_by(cell_types) %>%
    summarise(markers_list = list(`official gene symbol`))

my_new_list <- markers_list_summary$markers_list
names(my_new_list) <- markers_list_summary$cell_types


object_list <-
    tribble(~group,                         ~res_value,
            "patient_prim_normal_cells",    0.1,
            "patient_mets_normal_cells",    0.1,
            "xeno_prim_mouse",              0.1,
            "xeno_mets_mouse",              0.1,
            "mm_prim_normal_cells",         0.25,
            "mm_mets_normal_cells",         0.2)


for (item in seq_len(nrow(object_list))) {
    group <- object_list$group[item]
    res_value <- object_list$res_value[item]

    object <- qs::qread(str_c("output/seurat_objects/tumor_vs_stroma/",
                              group,
                              ".qs"))

    dimplot_main <-
        dimplot_better(object,
                      group_by = c("Ann_level3")) +
            ggtitle(group) +
            NoLegend()

    entire_matrix <- object@assays$RNA$counts
    big_featureplot_list <- list()

    for (module in names(my_new_list)) {
        if (grepl("mouse", object$organism[1])) {
            genelist <-
                nichenetr::convert_human_to_mouse_symbols(my_new_list[[module]]) %>%
                na.omit() %>%
                unique()
        } else {
            genelist <- my_new_list[[module]]
        }
        cell_ranks <-
            AUCell::AUCell_run(exprMat = entire_matrix,
                            geneSets = genelist)
        object[[module]] <- AUCell::getAUC(cell_ranks)[1,]

        feature_plot <-
                FeaturePlot(object,
                            module,
                            cols = c("#EEEEEE", "#ae0600"),
                            min.cutoff = 0.15,
                            pt.size = 1,
                            order = TRUE) +
                    coord_fixed() +
                    ggtitle(paste0(group, ": ", module))

        big_featureplot_list[[module]] <- feature_plot
    }
    big_panel_plot <- 
        cowplot::plot_grid(dimplot_main,
                            plotlist = big_featureplot_list,
                            ncol = 2)
    #calcuate height based of the number of features
    length_var <- 
        if (length(big_featureplot_list) %% 2 == 1) {
            length(big_featureplot_list) + 1
        } else {
            length(big_featureplot_list)
        }

    height <- (length_var/2 * 7) + 7

    ggsave(filename = str_c("output/figures/relustering_normals/",
                            group,
                            "/",
                            "big_featureplot_list",
                            ".png"),
            plot = big_panel_plot,
            width = 14,
            height = height,
            limitsize = FALSE)
}




for (item in seq_len(nrow(object_list))) {
    group <- object_list$group[item]
    res_value <- object_list$res_value[item]

    object <- qs::qread(str_c("output/seurat_objects/tumor_vs_stroma/",
                              group,
                              ".qs"))

    object <- 
        FindClusters(object,
                     resolution = res_value)

    qs::qsave(x = object,
              file = str_c("output/seurat_objects/Annotation_level1/",
                           group,
                           ".qs"))

    dimplot_sc <-
        dimplot_better(object,
                      group_by = c("seurat_clusters")) +
            ggtitle(group) +
            NoLegend() +
        ggtitle("Seurat clusters")

    dimplot_ann_level1 <-
        dimplot_better(object,
                      group_by = c("Ann_level1")) +
            ggtitle(group) +
            NoLegend() +
            ggtitle("Annotation level 1")
        

    dimplot_ann_level2 <-
        dimplot_better(object,
                      group_by = c("Ann_level2")) +
            ggtitle(group) +
            NoLegend() +
            ggtitle("Annotation level 2")
    
    dimplot_ann_level3 <-
        dimplot_better(object,
                      group_by = c("Ann_level3")) +
            ggtitle(group) +
            NoLegend() +
            ggtitle("Annotation level 3")

    big_panel_plot <- 
        cowplot::plot_grid(dimplot_sc,
                            dimplot_ann_level1,
                            dimplot_ann_level2,
                            dimplot_ann_level3,
                            ncol = 2)

     ggsave(filename = str_c("output/figures/relustering_normals/",
                            group,
                            "/",
                            "level3_annotation",
                            ".png"),
            plot = big_panel_plot,
            width = 16,
            height = 16,
            limitsize = FALSE,
            bg = "white")
}






human_macs <- 
    qs::qread("/gpfs0/home2/gdrobertslab/lab/Analysis/Ryan/epithelial/output/rdata/human_macs_final.qs")


dimplot_better(human_macs, group_by = "macs_assignment")

obj <- qs::qread("output/seurat_objects/tumor_vs_stroma/patient_mets_normal_cells.qs")

dimplot_better(obj, group_by = "seurat_clusters")


sobj <-
    obj %>%
    subset(Ann_level1 == "Immune_Myeloid") %>%
    process_seurat() %>%
    RunHarmony(group.by.vars = "model") %>%
    process_seurat(reduction = "harmony")

dimplot_better(sobj, group_by = "Ann_level3")


human_lung_ref <-
    qs::qread("input/downloads/ds_human_lung_atlas.qs")
Idents(human_lung_ref) <- human_lung_ref$free_annotation
human_lung_subset <-
    human_lung_ref %>%
    subset(ident = c("Alveolar_macrophages",
                         "DC1",
                         "Classical_monocytes",
                         "DC2",
                         "Interstitial_macrophages",
                         "Mast_cells",
                         "Migratory_DCs",
                         "Non_classical_monocytes"))

human_lung_subset$CellType <-
    str_replace_all(human_lung_subset$free_annotation,
                    c("^Classical_monocytes" = "cMonocyte",
                     "^Non_classical_monocytes$" = "ncMonocyte",
                     "^Alveolar_macrophages$" = "Alveolar",
                     "^Interstitial_macrophages$" = "Interstitial"))
ref <-
    SingleR::SingleR(test = as.SingleCellExperiment(sobj),
                    ref = list(GetAssayData(human_macs), GetAssayData(human_lung_subset)),
                    labels = list(human_macs$macs_assignment, human_lung_subset$CellType),
                    aggr.ref = TRUE)

s_obj <- sobj

s_obj$annotations <- ref$labels

Idents(s_obj) <- s_obj$seurat_clusters
clust_info <- tibble()
for (cluster in unique(s_obj$seurat_clusters)) {
    subset_object <- subset(s_obj, ident = cluster) %>%
        FindVariableFeatures() %>%
        ScaleData() %>%
        # don't ask for more PCs than there are cells
        RunPCA(npcs = min(50,
                        sum(s_obj$seurat_clusters == cluster) - 1))

    if (length(unique(subset_object$sample_name)) > 1 &&
        ncol(subset_object) > 50) {
        subset_object <- RunHarmony(subset_object,
                                    group.by.vars = "sample_name") %>%
            process_seurat(reduction = "harmony")
    } else {
        subset_object <- subset_object
    }

    subset_object$re_cluster <- str_c(cluster,
                                    ".",
                                    subset_object$seurat_clusters)

    clust_info <- subset_object@meta.data %>%
            as.data.frame() %>%
            select(re_cluster) %>%
            rbind(clust_info)
}

s_obj <- AddMetaData(s_obj, metadata = clust_info)
s_obj$new_annot_clust <- s_obj$re_cluster

cluster_celltypes <-
    table(s_obj$re_cluster, s_obj$annotations) %>%
    as.data.frame() %>%
    group_by(Var1) %>%
    arrange(desc(Freq), .by_group = TRUE) %>%
    slice_head(n = 1)

for (i in seq_len(nrow(cluster_celltypes))) {
    seurat_clust <- str_c("^", cluster_celltypes$Var1[i], "$") %>%
        as.character()

    celltype <- cluster_celltypes$Var2[i] %>%
        as.character()

    s_obj$new_annot_clust <-
        str_replace_all(string = s_obj$new_annot_clust,
                        pattern = seurat_clust,
                        replacement = celltype)
}

dimplot_better(s_obj, group_by = "new_annot_clust")














ref <-
    SingleR::SingleR(test = as.SingleCellExperiment(sobj),
                    ref = list(GetAssayData(human_macs), GetAssayData(human_lung_subset)),
                    labels = list(human_macs$macs_assignment, human_lung_subset$CellType),
                    aggr.ref = TRUE)


sobj$macs_assignment <- ref$labels













dimplot1 <- 
    dimplot_better(sobj, group_by = "Ann_level1") +
        NoLegend() +
        ggtitle("Annotation level 1")

dimplot2 <-
    dimplot_better(sobj, group_by = "Ann_level2") +
        NoLegend() +
        ggtitle("Annotation level 2")

dimplot3 <- 
    dimplot_better(sobj, group_by = "Ann_level3") +
        NoLegend() +
        ggtitle("Annotation level 3")

dimplot4 <-
    dimplot_better(sobj, group_by = "macs_assignment") +
        NoLegend()

plot <- 
        cowplot::plot_grid(dimplot1,
                            dimplot2,
                            dimplot3,
                            dimplot4,
                            ncol = 2)

dimplot_better(sobj, group_by = "new_annot_clust") +
        NoLegend()

#load the reference
murine_macs <- 
    qs::qread("/home/gdrobertslab/lab/Analysis/Matt/epithelial/output/rdata/final_murine_macs.qs")

ref <-
    SingleR::SingleR(test = as.SingleCellExperiment(sobj),
                    ref = GetAssayData(murine_macs),
                    labels = murine_macs$macs_assignment,
                    aggr.ref = TRUE)

sobj$macs_assignment <- ref$labels
    
dimplot1 <- 
    dimplot_better(sobj, group_by = "Ann_level1") +
        NoLegend() +
        ggtitle("Annotation level 1")

dimplot2 <-
    dimplot_better(sobj, group_by = "Ann_level2") +
        NoLegend() +
        ggtitle("Annotation level 2")

dimplot3 <- 
    dimplot_better(sobj, group_by = "Ann_level3") +
        NoLegend() +
        ggtitle("Annotation level 3")

dimplot4 <-
    dimplot_better(sobj, group_by = "macs_assignment") +
        NoLegend()

dimplot_better(sobj, group_by=c("macs_assignment", "Ann_level3", "seurat_clusters"), ncol=2)


excel <-
    readxl::read_excel("/gpfs0/home2/gdrobertslab/lab/Analysis/Yogesh/Finalmacrophage_and_monocyte_subsets.xlsx")

mac_marks <- excel %>%
        filter(Species == "Human") %>%
        select(Annotation, ID) %>%
        group_by(Annotation) %>%
        nest() %>%
        as.list()

names(mac_marks$data) <- mac_marks$Annotation
mac_marks <- mac_marks$data

my_new_list <- mac_marks

my_new_list <- list(
    cMonocyte = c("S100a8", "Sell", "Ifitm6"),  # cMonocyte
    ncMonocyte = c("Itgal", "Ace", "Spn"),  # ncMonocyte
    TAMs = c("C1qa"),  # TAMs, Osteoclast-like?, https://doi.org/10.1186/s41232-022-00213-x
    Int_Mac = c("Lyve1", "Mrc1"),  # Tissue resident/interstitial
    Scar_Mac = c("Trem2", "Cd9", "Gpnmb", "Spp1"),  # Scar-associated, see https://doi.org/10.1038/s41586-019-1631-3
    Ifn_TAMs = c("Ifit1", "Ifit2", "Cxcl10"), # IFN-TAMs
    Angio_TAMs = c("Il1a", "Fn1", "Arg1"),  # Angio-TAMs
    LA_TAMs = c("Acp5", "Ctsk"), # LA-TAMs
    Infla_TAMs = c("Fos", "Jun", "Atf3"), # Inflammatory TAMs
    Cycling = c("Top2a", "Hist1h1b", "Birc5"),  # Cycling
    Pre_DC = c("Cd209a", "Ccr7", "Dcstamp"), # Pre-DC
    DC1 = c("H2-Ab1", "Clec9a", "Irf8"),  # DC1
    DC2 = c("Fscn1", "Ccl5")) # DC2


entire_matrix <- GetAssayData(sobj, layer="counts")
object <- sobj

big_featureplot_list<-list()
for (module in names(my_new_list)) {
            genelist <- 
                nichenetr::convert_human_to_mouse_symbols(my_new_list[[module]]) %>%
                na.omit() %>%
                unique()
        cell_ranks <-
            AUCell::AUCell_run(exprMat = entire_matrix,
                            geneSets = genelist)
        object[[module]] <- AUCell::getAUC(cell_ranks)[1,]

        feature_plot <-
                FeaturePlot(object,
                            module,
                            cols = c("#EEEEEE", "#ae0600"),
                            min.cutoff = 0.15,
                            pt.size = 1,
                            order = TRUE) +
                    coord_fixed() +
                    ggtitle(paste0(module))

        big_featureplot_list[[module]] <- feature_plot
}

cowplot::plot_grid(plotlist = big_featureplot_list,
                            ncol = 5)



#reference for annotating mets human
human_lung_ref <-
    qs::qread("input/downloads/ds_human_lung_atlas.qs") %>%
    subset(free_annotation != "Lymphatic_EC_differentiating")

mets_ref <- list(GetAssayData(human_lung_ref), hpca)
mets_label <- list(human_lung_ref$free_annotation, hpca$label.fine)

#mouse lung ref
mouse_lung_ref_new <- qs::qread("input/downloads/normal_mouselung.qs")
mouse_lung_ref_new$CellType <-
            str_replace_all(mouse_lung_ref_new$free_annotation,
                            c("/" = "_",
                              "\\+" = "_plus",
                              "-" = "_",
                              " " = "_"))
Idents(mouse_lung_ref_new) <- mouse_lung_ref_new$CellType

#subset for myeloid immune
#tumor associated DC: https://www.nature.com/articles/s41467-024-44787-1
mouse_lung_subset <-
    mouse_lung_ref_new %>%
    subset(ident = c("Alveolar_Macrophage",
                         "Ccr7_plus_Dendritic",
                         "Classical_Monocyte",
                         "Intermediate_Monocyte",
                         "Interstitial_Macrophage",
                         "Myeloid_Dendritic_Type_1",
                         "Myeloid_Dendritic_Type_2",
                         "Nonclassical_Monocyte",
                         "Plasmacytoid_Dendritic",
                         "Proliferating_Alveolar_Macrophage",
                         "Proliferating_Classical_Monocyte",
                         "Proliferating_Dendritic",
                         "Neutrophil",
                         "Basophil"))

mouse_lung_subset$CellType <-
    str_replace_all(mouse_lung_subset$CellType,
                    c("^Myeloid_Dendritic_Type_1" = "Myeloid_Dendritic",
                     "^Myeloid_Dendritic_Type_2$" = "Myeloid_Dendritic",
                     "^Ccr7_plus_Dendritic$" = "TumorAssociated_Dendritic"))

#load the another reference
murine_macs <- 
    qs::qread("input/downloads/murine_macrophages.qs")

murine_macs$CellType <-
    str_replace_all(murine_macs$macs_assignment,
                    c("^scarMac$" = "Scar_Macrophages",
                      "^IFN-TAM$" = "TumorAssociated_Macrophages",
                      "^TAM$" = "TumorAssociated_Macrophages",
                      "^cMonocyte$" = "Classical_Monocyte",
                      "^ncMonocyte$" = "Nonclassical_Monocyte",
                      "^Interstitial$" = "Interstitial_Macrophage",
                      "^Pre-DC$" = "Myeloid_Dendritic",
                      "^DC1$" = "Dendritic_cells1",
                      "^Cycling$" = "Proliferating_Dendritic"))

#load the object to be annotated
obj <- qs::qread("output/seurat_objects/tumor_vs_stroma/mm_mets_normal_cells.qs")
sobj <-
    obj %>%
    subset(Ann_level1 == "Immune_Myeloid") %>%
    process_seurat() %>%
    RunHarmony(group.by.vars = "model") %>%
    process_seurat(reduction = "harmony")

ref <-
    SingleR::SingleR(test = as.SingleCellExperiment(sobj),
                    ref = list(GetAssayData(murine_macs), GetAssayData(mouse_lung_subset)),
                    labels = list(murine_macs$CellType, mouse_lung_subset$CellType),
                    aggr.ref = TRUE)

sobj$macs_assignment <- ref$labels

dimplot4 <-
    dimplot_better(sobj, group_by=c("macs_assignment")) +NoLegend() +
    ggtitle("Refined assignment")

plot <- 
        cowplot::plot_grid(dimplot1,
                            dimplot2,
                            dimplot3,
                            dimplot4,
                            ncol = 2)

ggsave(filename = str_c("output/figures/relustering_normals/",
                            group,
                            "/",
                            "macrophages_sub",
                            ".png"),
            plot = plot,
            width = 16,
            height = 16,
            limitsize = FALSE,
            bg = "white")



obj1 <-
    qs::qread("output/seurat_objects/tumor_vs_stroma/patient_mets_cancer_cells.qs") %>%
    FindClusters(resolution = 0.05)


obj1$tumor_type <- "patient_mets"

obj2 <- 
    qs::qread("output/seurat_objects/tumor_vs_stroma/patient_prim_cancer_cells.qs")
obj2$tumor_type <- "patient_prim"

combine_sobj2 <-
    merge(x = obj1,
          y = obj2) %>%
    JoinLayers() %>%
    process_seurat() 

harm_obj2 <- combine_sobj2 %>%
    RunHarmony(group.by.vars = c("data_source", "sample_name"),
                theta = c(7,7)) %>%
    process_seurat(reduction = "harmony")

dimplot_better(harm_obj2,
            group_by = c("tumor_type"),
            ncol=3) + NoLegend()

#pseudobulk
pseudobulk <- harm_obj2 %>%
        Seurat::AggregateExpression(
            group.by = c("sample_name", "tumor_type"),
            slot = "counts",
            assay = "RNA")

pseudobulk_new <- pseudobulk[[1]]

pseudobulk_new <- pseudobulk_new %>%
    t() %>%
    as.data.frame()

entire_matrix <- pseudobulk_new %>%
                tibble::rownames_to_column(var = "groups")

runx2_matrix <- entire_matrix[ , c("groups", "SP7", "JUN", "RUNX2", "FOS", "KLF4")]

runx2_matrix$tumor_type <- runx2_matrix$groups %>%
    str_split("_") %>%
    map_chr(2) %>%
    str_replace_all("-", "_")

# runx2_matrix <- runx2_matrix %>%
#     mutate(RUNX2 = scale(RUNX2))


runx2_matrix_long <- runx2_matrix %>%
    pivot_longer(cols = c(SP7, JUN, RUNX2, FOS, KLF4), names_to = "Gene", values_to = "Expression")

patient_based <- ggplot(runx2_matrix_long,
    aes(x = tumor_type,
        y = log2(Expression+1),
        fill = tumor_type)) +
    geom_violin() +
    geom_point(position = position_jitter(width = 0.2), size = 2) +
    facet_wrap(~ Gene, scales = "free_y", nrow = 1) +
    theme_minimal() +
    labs(title = "Expression of Selected Genes by Tumor Type", y = "log2 Expression Level", x = "Tumor Type")

ggsave(filename = "output/figures/allgenes_expression.pdf",
        plot = patient_based,
        width = 16,
        height = 4,
        limitsize = FALSE,
        bg = "white")

patient_tumor_type_based <- 
    ggplot(runx2_matrix,
        aes(x = groups,
            y = SP7,
            fill = interaction(groups, tumor_type))) +
        geom_violin()

ggsave(filename = "output/figures/RUNX2_expression_try.png",
        plot = patient_based,
        width = 14,
        height = 14,
        limitsize = FALSE)



#get assay data
runx2_subset <-
    subset(harm_obj2,
           features = "RUNX2") %>%
    GetAssayData(layer = "data")





entire_matrix <- GetAssayData(harm_obj2,
                              layer="data") %>%
                t() %>%
                as.data.frame()

entire_matrix <- entire_matrix %>%
                tibble::rownames_to_column(var = "cell_ids")


runx2_matrix <- entire_matrix[ , c("cell_ids", "RUNX2")]

runx2_matrix$tumor_type <- combine_sobj2$tumor_type
runx2_matrix$method <- combine_sobj2$method
runx2_matrix$patient <- combine_sobj2$sample_name
runx2_matrix$data_source <- combine_sobj2$data_source

#save as a csv file
write_tsv(runx2_matrix,
          "output/metadata/RUNX2_expression.csv")

overall <- 
    ggplot(runx2_matrix,
        aes(x = tumor_type,
            y = RUNX2,
            fill = tumor_type)) +
        geom_violin() +
        stat_summary(fun.y=median,
                     geom="point",
                     size=2,
                     color="red") +
        geom_boxplot(width=0.1)

patient_based <- 
    ggplot(runx2_matrix,
        aes(x = patient,
            y = RUNX2,
            fill = tumor_type)) +
        geom_violin()

patient_tumor_type_based <- 
    ggplot(runx2_matrix,
        aes(x = patient,
            y = RUNX2,
            fill = interaction(tumor_type, method))) +
        geom_violin()

plots_new <- 
    patchwork::wrap_plots(overall,
                            patient_based,
                            patient_tumor_type_based,
                            ncol = 1)

ggsave(filename = "output/figures/RUNX2_expression_ggplot.png",
        plot = plots_new,
        width = 14,
        height = 35,
        limitsize = FALSE)

#save as a pdf file
ggsave(filename = "output/figures/RUNX2_expression.pdf",
        plot = ggplot(runx2_matrix,
                    aes(x = RUNX2,
                        fill = tumor_type)) +
            geom_density(alpha = 0.5) +
            facet_wrap(~method) +
            ggtitle("RUNX2 expression in patient mets and primary tumors"),
        width = 14,
        height = 14,
        limitsize = FALSE)


feature_plot <-
    FeaturePlot(harm_obj,
            feature = "RUNX2",
            split.by = "tumor_type",
            order = TRUE,
            min.cutoff = 0.5)

vln_plot <-
    VlnPlot(harm_obj,
            features = "RUNX2",
            #split.by = "tumor_type",
            group.by = "tumor_type") +
    ggtitle("Violin plot for RUNX2 all averaged")

patient_based_vln <-
    VlnPlot(harm_obj,
            features = "RUNX2",
            split.by = "tumor_type",
            group.by = "sample_name") +
    ggtitle("Patient based violin plot all together")

nuclear <-
    subset(harm_obj,
           method == "single_nucleus")

patient_based_vln_nuc <-
    VlnPlot(nuclear,
            features = "RUNX2",
            split.by = "tumor_type",
            group.by = "sample_name") +
    ggtitle("Patient based violin plot for single nucleus")

patient_based_vln_sc <-
    VlnPlot(single_cell,
            features = "RUNX2",
            split.by = "tumor_type",
            group.by = "sample_name") +
    ggtitle("Patient based violin plot for single cell")
single_cell <-
    subset(harm_obj,
           method == "single_cell")

violinplot <-
    VlnPlot(nuclear,
            features = "RUNX2",
            group.by = "tumor_type")

final_plot <-
    patchwork::wrap_plots(feature_plot,
                        vln_plot,
                        patient_based_vln,
                        patient_based_vln_nuc,
                        patient_based_vln_sc,
                        ncol = 1)

ggsave(filename = "output/figures/RUNX2_plots.png",
        plot = final_plot,
        width = 14,
        height = 35,
        limitsize = FALSE)

#run the DEGs
one_sample <-
    obj1 %>%
    subset(sample_name == "CCDI0053_445") %>%
    process_seurat() 

# sil_val <-
#     optimize_silhouette(sobject = one_sample,
#                         test_res = seq(0.05, 0.9, by = 0.05),
#                         summary_plot = TRUE,
#                         reduction = "harmony") %>%
#     filter(!is.na(sil_vals)) %>%
#     filter(sil_vals == max(sil_vals)) %>%
#     slice_head(n=1) %>%
#     dplyr::pull(res_vals)


# one_sample <- 
#     FindClusters(one_sample,
#                 resolution = 0.3)

dimplot_better(one_sample,
            group_by = c("seurat_clusters", "annotations"),
            ncol=2)
object <- one_sample
panel_plots <- list()

big_degs_result <- 
    run_degs(sobject = obj1,
            group_by = "seurat_clusters",
            prefix =  "patient_mets_cancer_cells")

for (group in object_list) {
    # object <- qs::qread(str_c("output/seurat_objects/resolution_optimized/",
    #                           group,
    #                           ".qs"))
    # #object <- JoinLayers(object)

    volc_plot <- list()
    gsea_plot <- list()
    gsea_result <- list()

    dimplot <- dimplot_better(object, group_by = "seurat_clusters")

    degs_result <- run_degs(sobject = object,
                            group_by = "seurat_clusters",
                            prefix =  "patient_mets_cancer_cells")

    for (item in names(degs_result)) {
        if (!dir.exists(str_c("output/degs/", group))) {
            dir.create(str_c("output/degs/", group), recursive = TRUE)
        }
        write_tsv(degs_result[[item]],
                 str_c("output/degs/", group, "/", item, "_degs.tsv"))
        logfc_cutoff <- 0.6
        degs_result[[item]]$diffexpressed <- "Not Significant"
        degs_result[[item]]$diffexpressed[degs_result[[item]]$log2FoldChange > logfc_cutoff & degs_result[[item]]$padj < 0.05] <- "Upregulated"
        degs_result[[item]]$diffexpressed[degs_result[[item]]$log2FoldChange < -1 * logfc_cutoff & degs_result[[item]]$padj < 0.05] <- "Downregulated"
#make the volcano plot
        volc_plot[[item]] <- ggplot(data=degs_result[[item]],
                            aes(x=log2FoldChange,
                                y=-log10(pvalue),
                                color = diffexpressed)) + 
            geom_vline(xintercept = c(-1 * logfc_cutoff, logfc_cutoff), col = "gray", linetype = "dashed") + 
            geom_hline(yintercept = c(0.05), col = "gray", linetype = "dashed") +
            geom_point(size = 2) +
            scale_color_manual(values = c(plot_cols[1], "grey", plot_cols[2]),
                               name = "") +
            geom_text_repel(aes(label = gene))
    }
#GSEA analysis for the dotplots
    for (i in seq_len(nrow(cat_tib))){
        category <- cat_tib$category[i]
        subcategory <- cat_tib$subcategory[i]
        cat_expl <- cat_tib$cat_expl[i]
        if (subcategory == "NA") {
            gsea_result <- run_gsea(degs_result = degs_result,
                                    category = category,
                                    species = object$organism[1])
        } else {
            gsea_result <- run_gsea(degs_result = degs_result,
                                    category = category,
                                    subcategory = subcategory,
                                    species = object$organism[1])
        }
        for (item in names(gsea_result)) {
            rows <- gsea_result[[item]] %>% 
                nrow()
            if (rows >= 1) {
                top5up_down <- rbind(gsea_result[[item]] %>%
                                        slice_head(n = 7),
                                    gsea_result[[item]] %>%
                                        slice_tail(n = 7)) %>%
                                dplyr::select(pathway, NES, size, padj) %>%
                                arrange(desc(NES)) %>%
                                mutate(pathway = as.factor(pathway) %>%
                                            str_replace_all("_", " ") %>%
                                            str_wrap(65) %>%
                                            fct_reorder(NES),
                                       sample = item,
                                       order = seq_len(n()),
                                       justify_y = if_else(NES > 0, 1, 0),
                                       y_pos = if_else(NES > 0, -0.1, 0.1))
                gsea_plot[[cat_expl]][[item]] <- 
                    local({cat_expl = cat_expl
                          two_way_dotplot(top5up_down, x_col = "NES") +
                    ggtitle(str_c(cat_expl, " for ", item))})
            } else {
                print(str_c("No Pathways up or down in ", item, " for ", cat_expl))
                gsea_plot[[cat_expl]][[item]] <- 
                local({cat_expl = cat_expl
                      ggplot(data = NULL,
                            aes(x = as.factor(1),
                            y = as.factor(1))) +
                        geom_text(aes(label = str_c("No pathways for ", cat_expl, " in ", item)),
                                  size = 4)})
            }
        }
    }
#make panel plots
    for (clusters in names(volc_plot)) {
        panel_plots[[group]][[clusters]] <- 
            patchwork::wrap_plots(dimplot,
            volc_plot[[clusters]],
            gsea_plot$KEGG[[clusters]],
            gsea_plot$Hallmark_paths[[clusters]] ,
            gsea_plot$Oncogenic_signature[[clusters]],
            gsea_plot$Transcription_factor_targets[[clusters]],
            ncol = 2,
            widths = c(6, 6),
            heights = unit(c(8,8,8), c("cm", "cm", "cm"))) +
            patchwork::plot_annotation(title = clusters)

        ggsave(str_c("output/gsea/test/", group, "/", clusters, ".png"),
                width = 12,
                height = 18,
                plot = panel_plots[[group]][[clusters]])
    }
}










#keep all the genes in scale data
all_sample <-
    qs::qread("output/seurat_objects/tumor_vs_stroma/patient_mets_cancer_cells.qs") %>%
    FindClusters(resolution = 0.1)

all_sample <- all_sample %>%
    FindVariableFeatures(nfeatures = 5000) %>%
    ScaleData()



for (samples in unique(all_sample$sample_name)) {
    if (ncol(subset(all_sample, sample_name == samples)) < 1000) {
        next
    }
    subset_obj <-
        subset(all_sample,
               sample_name == samples) %>%
        process_seurat()

    sil_val <-
        optimize_silhouette(sobject = subset_obj,
                            test_res = seq(0.1, 0.9, by = 0.05),
                            summary_plot = FALSE,
                            reduction = "harmony") %>%
        filter(!is.na(sil_vals)) %>%
        filter(sil_vals == max(sil_vals)) %>%
        slice_head(n=1) %>%
        dplyr::pull(res_vals)

    subset_obj <- 
        FindClusters(subset_obj,
                    resolution = sil_val)

    aver_exp1 <- AverageExpression(one_sample,
                                layer = "scale.data",
                                group.by = "seurat_clusters")$RNA %>%
                as.data.frame() %>%
                rename_with(~str_replace(., "g", "clust")) %>%
                tibble::rownames_to_column(var = "gene")


}




dimplot_better(all_sample,
              group_by = c("seurat_clusters", "sample_name"),
              ncol=2) 

one_sample <-
    all_sample %>%
    subset(sample_name == "CCDI0058_16183") %>%
    process_seurat()


dimplot_better(one_sample,
        group_by = "seurat_clusters")

one_sample <- one_sample %>%
    ScaleData(features = VariableFeatures(all_sample))
sil_val <-
    optimize_silhouette(sobject = one_sample,
                        test_res = seq(0.1, 0.9, by = 0.05),
                        summary_plot = TRUE,
                        reduction = "harmony") %>%
    filter(!is.na(sil_vals)) %>%
    filter(sil_vals == max(sil_vals)) %>%
    slice_head(n=1) %>%
    dplyr::pull(res_vals)

one_sample <-
    FindClusters(one_sample,
                resolution = sil_val)

dimplot_better(one_sample,
            group_by = c("seurat_clusters"))

aver_exp1 <- AverageExpression(one_sample,
                                layer = "scale.data",
                                group.by = "seurat_clusters")$RNA %>%
                as.data.frame() %>%
                rename_with(~str_replace(., "g", "clust")) %>%
                tibble::rownames_to_column(var = "gene")

aver_exp2 <- AverageExpression(all_sample,
                                layer = "scale.data",
                                group.by = "seurat_clusters")$RNA %>%
                as.data.frame() %>%
                tibble::rownames_to_column(var = "gene")

combine_exp <- 
    left_join(aver_exp1, aver_exp2, by = "gene") %>%
    column_to_rownames(var = "gene")

correlation <- tibble::tibble()
for (clusters in colnames(aver_exp1)[-1]) {
    for (cluster_names in colnames(aver_exp2)[-1]) {
        correlation_calc <-
            cor(combine_exp[[clusters]],
            combine_exp[[cluster_names]])

        #append the correlations
        correlation <- 
            tibble::tibble(corr_val = correlation_calc) %>%
            mutate(small_cluster = str_c("single_", clusters),
                   big_cluster = str_c("whole_", cluster_names)) %>%
            rbind(correlation)
    }
}
#make a heatmap
correlation <-
    correlation %>%
    pivot_wider(names_from = big_cluster,
                values_from = corr_val) %>%
    column_to_rownames(var = "small_cluster") %>%
    pheatmap::pheatmap(display_numbers = TRUE)



for (clusters in unique(one_sample$seurat_clusters)) {
    subset_obj <-
        subset(one_sample,
               seurat_clusters == clusters) %>%
               AverageExpression(layer = "scale.data",
                                group.by = "seurat_clusters")

    for (new_clust in unique(all_sample$seurat_clusters)) {
        subset_new <-
            subset(all_sample,
                   seurat_clusters == new_clust)
        correlation <-
            cor(subset_obj@assays$RNA$counts,
                subset_new@assays$RNA$counts)

    }
}

if (length(unique(subset_sobj$seurat_clusters)) > 1) {
                    correlation_plot <- 
                        AverageExpression(subset_sobj,
                                        layer = "scale.data",
                                        group.by = "seurat_clusters")$RNA %>%
                            as.matrix() %>%
                            cor() %>%
                            pheatmap::pheatmap(display_numbers = TRUE,
                                            silent = TRUE)














for (item in seq_len(nrow(object_list))) {
    group <- object_list$group[item]
    res_value <- object_list$res_value[item]

    object <-
        qs::qread(str_c("output/seurat_objects/Annotation_level1/",
                        group,
                        ".qs"))

    dimplot_main <-
        dimplot_better(object,
                      group_by = c("Ann_level1")) +
            ggtitle(group) +
            NoLegend()

    #subset ech celltype for reclustering and labelling the celltypes
    for (celltypes in c("Macrophages", "T_cells", "Fibroblasts",
                        "Dendritic_cells", "B_cells", "Endothelial_cells")) {
        if (celltypes %in% object$Ann_level1) {
            subset_sobj <-
                subset(object,
                       Ann_level1 == celltypes)
            if (length(unique(subset_sobj$sample_name)) > 1 &&
                ncol(subset_sobj) > 50) {
                subset_sobj <- 
                    subset_sobj %>%
                    process_seurat() %>%
                    RunHarmony(group.by.vars = "sample_name")

                sil_val <- 
                    optimize_silhouette(sobject = subset_sobj,
                                        test_res = seq(0.05, 0.9, by = 0.05),
                                        summary_plot = FALSE,
                                        reduction = "harmony") %>%
                    filter(!is.na(sil_vals)) %>%
                    filter(sil_vals == max(sil_vals)) %>%
                    slice_head(n=1) %>%
                    dplyr::pull(res_vals)
            
                if (length(sil_val) != 0) {
                    subset_sobj <- subset_sobj %>%
                        process_seurat(reduction = "harmony",
                                    resolution = sil_val)
                } else {
                    subset_sobj <- subset_sobj %>%
                        process_seurat(reduction = "harmony")
                }

            #make the dimplot
                dimplot_subset <- 
                    dimplot_better(subset_sobj,
                                group_by = "seurat_clusters") +
                        ggtitle(celltypes) +
                        NoLegend()

                #prepare the matrix for aucell
                matrix <- subset_sobj@assays$RNA$counts

                featureplot_list <- list()

                for (module in names(get(celltypes))) {
                    if (grepl("mouse", object$organism[1])) {
                        genelist <- 
                            nichenetr::convert_human_to_mouse_symbols(get(celltypes)[[module]]) %>%
                            na.omit() %>%
                            unique()
                    } else {
                        genelist <- get(celltypes)[[module]]
                    }
                    cell_ranks <- 
                        AUCell::AUCell_run(exprMat = matrix,
                                        geneSets = genelist)
                    subset_sobj[[module]] <- AUCell::getAUC(cell_ranks)[1,]

                    feature_plot <- 
                        FeaturePlot(subset_sobj,
                                    module,
                                    cols = c("#EEEEEE", "#ae0600"),
                                    min.cutoff = 0.15,
                                    pt.size = 1,
                                    order = TRUE) +
                            coord_fixed() +
                            ggtitle(paste0(celltypes, ": ", module))

                    featureplot_list[[module]] <- feature_plot
                }

                # Combine all the plots into a panel plot with 
                panel_plot <- 
                    cowplot::plot_grid(dimplot_main,
                                        dimplot_subset,
                                        plotlist = featureplot_list,
                                        ncol = 2)

                #calcuate height based of the number of features
                length_var <- 
                    if (length(featureplot_list) %% 2 == 1) {
                        length(featureplot_list) + 1
                    } else {
                        length(featureplot_list)
                    }

                height <- (length_var/2 * 7) + 7

                # save the panel plot
                ggsave(filename = str_c("output/figures/relustering_normals/",
                                            group,
                                            "/",
                                            celltypes,
                                            ".png"),
                            plot = panel_plot,
                            width = 14,
                            height = height,
                            device = "png",
                            bg = "white")

                # qs save
                qs::qsave(panel_plot,
                        str_c("output/figures/relustering_normals/",
                                group,
                                "/",
                                celltypes,
                                ".qs"))

                # correlation analysis
                if (length(unique(subset_sobj$seurat_clusters)) > 1) {
                    correlation_plot <- 
                        AverageExpression(subset_sobj,
                                        layer = "scale.data",
                                        group.by = "seurat_clusters")$RNA %>%
                            as.matrix() %>%
                            cor() %>%
                            pheatmap::pheatmap(display_numbers = TRUE,
                                            silent = TRUE)

                #save the correlation plot
                    ggsave(filename = str_c("output/figures/relustering_normals/",
                                        group,
                                        "/",
                                        celltypes,
                                        "_correlation.png"),
                        plot = correlation_plot,
                        width = 14,
                        height = 14,
                        bg = "white")

                    # qs save
                    qs::qsave(correlation_plot,
                            str_c("output/figures/relustering_normals/",
                                    group,
                                    "/",
                                    celltypes,
                                    "_correlation.qs"))

                #make the panel plot for degs and GSEA
                    make_panel_plot(sobj = subset_sobj,
                                    cluster_column = "seurat_clusters",
                                    label = celltypes,
                                    group = group)
                }
            } else {
                print(str_c("Not enough cells for harmony in ", celltypes, " in ", group))
            }
        } else {
            print(str_c(celltypes, " not in ", group))
        }
    print(str_c("Finished ", group, " ", celltypes))
    }
}



```