Recluster the normal cell types and annotate the types.

## Normal cells reclustering

```{r normal_reclustering, include=FALSE}
#panglodb markers
markers_list <-
    read_tsv("input/downloads/PanglaoDB_markers_27_Mar_2020.tsv") %>%
    select(`official gene symbol`, `cell type`) %>% 
    subset(`cell type` %in% c("Alveolar macrophages",
                              "Airway epithelial cells",
                              "B cells",
                              "B cells memory",
                              "B cells naive",
                              "Basal cells",
                              "Basophils",
                              "Cardiomyocytes",
                              "Ciliated cells",
                              "Dendritic cells",
                              "Endothelial cells",
                              "Epithelial cells",
                              "Fibroblasts",
                              "Gamma delta T cells",
                              "Macrophages",
                              "Mast cells",
                              "Megakaryocytes",
                              "Mesotheial cells",
                              "Monocytes",
                              "Myeloid-derived suppressor cells",
                              "Myofibroblasts",
                              "Natural killer T cells",
                              "Neutrophils",
                              "NK cells",
                              "Chondrocytes",
                              "Osteoblasts",
                              "Osteoclasts",
                              "Plasma cells",
                              "Plasmacytoid dendritic cells",
                              "Platelets",
                              "Pulmonary alveolar type I cells",
                              "Pulmonary alveolar type II cells",
                              "Pulmonary vascular smooth muscle cells",
                              "Stromal cells",
                              "T cells",
                              "T cells naive",
                              "T cytotoxic cells",
                              "T follicular helper cells",
                              "T helper cells",
                              "T memory cells",
                              "T regulatory cells",
                              "Vascular smooth muscle cells"))
markers_list1 <- markers_list %>%
    mutate(General_celltypes = str_replace_all(`cell type`,
                                        c("^Alveolar macrophages$" = "Macrophages",
                                          "^B cells$" = "B_cells",
                                          "^B cells memory$" = "B_cells_memory",
                                          "^B cells naive$" = "B_cells_naive",
                                          "^Basal cells$" = "Epithelial_cells",
                                          "^Basophils$" = "Granulocytes",
                                          "^Ciliated cells$" = "Epithelial_cells",
                                          "^Dendritic cells$" = "Dendritic_cells",
                                          "^Endothelial cells$" = "Endothelial_cells",
                                          "^Epithelial cells$" = "Epithelial_cells",
                                          "^Fibroblasts$" = "Fibroblasts",
                                          "^Gamma delta T cells$" = "T_cells",
                                          "^Macrophages$" = "Macrophages",
                                          "^Mast cells$" = "Mast_cells",
                                          "^Megakaryocytes$" = "Megakaryocytes",
                                          "^Mesotheial cells$" = "Mesothelial_cells",
                                          "^Monocytes$" = "Monocytes",
                                          "^Myeloid-derived suppressor cells$" = "Macrophages",
                                          "^Myofibroblasts$" = "Fibroblasts",
                                          "^Natural killer T cells$" = "T_cells",
                                          "^Neutrophils$" = "Granulocytes",
                                          "^NK cells$" = "NK_cells",
                                          "^Chondrocytes$" = "Chondrocytes",
                                          "^Osteoblasts$" = "Osteoblasts",
                                          "^Osteoclasts$" = "Osteoclasts",
                                          "^Plasma cells$" = "B_cells",
                                          "^Plasmacytoid dendritic cells$" = "Dendritic_cells",
                                          "^Platelets$" = "Platelets",
                                          "^Pulmonary alveolar type I cells$" = "Epithelial_cells",
                                          "^Pulmonary alveolar type II cells$" = "Epithelial_cells",
                                          "^Pulmonary vascular smooth muscle cells$" = "Smooth_muscle_cells",
                                          "^Stromal cells$" = "Stromal_cells",
                                          "^T cells$" = "T_cells",
                                          "^T cells naive$" = "T_cells_naive",
                                          "^T cytotoxic cells$" = "T_cells_cytotoxic",
                                          "^T follicular helper cells$" = "Tfhelper_cells",
                                          "^T helper cells$" = "Th_cells",
                                          "^T memory cells$" = "T_cells_memory",
                                          "^T regulatory cells$" = "Treg_cells",
                                          "^Vascular smooth muscle cells$" = "Smooth_muscle_cells"))) %>%
    mutate(cell_types = str_replace_all(`cell type`, " ", "_"))

markers_list_summary <- markers_list1 %>%
    group_by(cell_types) %>%
    summarise(markers_list = list(`official gene symbol`))

my_new_list <- markers_list_summary$markers_list
names(my_new_list) <- markers_list_summary$cell_types


object_list <-
    tribble(~group,                         ~res_value,
            "patient_prim_normal_cells",    0.1,
            "patient_mets_normal_cells",    0.1,
            "xeno_prim_mouse",              0.1,
            "xeno_mets_mouse",              0.1,
            "mm_prim_normal_cells",         0.25,
            "mm_mets_normal_cells",         0.2)


for (item in seq_len(nrow(object_list))) {
    group <- object_list$group[item]
    res_value <- object_list$res_value[item]

    object <- qs::qread(str_c("output/seurat_objects/tumor_vs_stroma/",
                              group,
                              ".qs"))

    dimplot_main <-
        dimplot_better(object,
                      group_by = c("Ann_level3")) +
            ggtitle(group) +
            NoLegend()

    entire_matrix <- object@assays$RNA$counts
    big_featureplot_list <- list()

    for (module in names(my_new_list)) {
        if (grepl("mouse", object$organism[1])) {
            genelist <-
                nichenetr::convert_human_to_mouse_symbols(my_new_list[[module]]) %>%
                na.omit() %>%
                unique()
        } else {
            genelist <- my_new_list[[module]]
        }
        cell_ranks <-
            AUCell::AUCell_run(exprMat = entire_matrix,
                            geneSets = genelist)
        object[[module]] <- AUCell::getAUC(cell_ranks)[1,]

        feature_plot <-
                FeaturePlot(object,
                            module,
                            cols = c("#EEEEEE", "#ae0600"),
                            min.cutoff = 0.15,
                            pt.size = 1,
                            order = TRUE) +
                    coord_fixed() +
                    ggtitle(paste0(group, ": ", module))

        big_featureplot_list[[module]] <- feature_plot
    }
    big_panel_plot <- 
        cowplot::plot_grid(dimplot_main,
                            plotlist = big_featureplot_list,
                            ncol = 2)
    #calcuate height based of the number of features
    length_var <- 
        if (length(big_featureplot_list) %% 2 == 1) {
            length(big_featureplot_list) + 1
        } else {
            length(big_featureplot_list)
        }

    height <- (length_var/2 * 7) + 7

    ggsave(filename = str_c("output/figures/relustering_normals/",
                            group,
                            "/",
                            "big_featureplot_list",
                            ".png"),
            plot = big_panel_plot,
            width = 14,
            height = height,
            limitsize = FALSE)
}




for (item in seq_len(nrow(object_list))) {
    group <- object_list$group[item]
    res_value <- object_list$res_value[item]

    object <- qs::qread(str_c("output/seurat_objects/tumor_vs_stroma/",
                              group,
                              ".qs"))

    object <- 
        FindClusters(object,
                     resolution = res_value)

    qs::qsave(x = object,
              file = str_c("output/seurat_objects/Annotation_level1/",
                           group,
                           ".qs"))

    dimplot_sc <-
        dimplot_better(object,
                      group_by = c("seurat_clusters")) +
            ggtitle(group) +
            NoLegend() +
        ggtitle("Seurat clusters")

    dimplot_ann_level1 <-
        dimplot_better(object,
                      group_by = c("Ann_level1")) +
            ggtitle(group) +
            NoLegend() +
            ggtitle("Annotation level 1")
        

    dimplot_ann_level2 <-
        dimplot_better(object,
                      group_by = c("Ann_level2")) +
            ggtitle(group) +
            NoLegend() +
            ggtitle("Annotation level 2")
    
    dimplot_ann_level3 <-
        dimplot_better(object,
                      group_by = c("Ann_level3")) +
            ggtitle(group) +
            NoLegend() +
            ggtitle("Annotation level 3")

    big_panel_plot <- 
        cowplot::plot_grid(dimplot_sc,
                            dimplot_ann_level1,
                            dimplot_ann_level2,
                            dimplot_ann_level3,
                            ncol = 2)

     ggsave(filename = str_c("output/figures/relustering_normals/",
                            group,
                            "/",
                            "level3_annotation",
                            ".png"),
            plot = big_panel_plot,
            width = 16,
            height = 16,
            limitsize = FALSE,
            bg = "white")
}



```


## Using the markers to annotate
```{r Use_markers_celltypes, include=FALSE}
#https://www.cell.com/trends/immunology/fulltext/S1471-4906(22)00094-1
#https://www.nature.com/articles/s41467-021-23324-4
#https://www.biocompare.com/Editorial-Articles/569888-A-Guide-to-T-Cell-Markers/
#https://www.abcam.com/en-us/technical-resources/research-areas/marker-guides/t-cell-markers
#https://www.ncbi.nlm.nih.gov/pmc/articles/PMC9192344/
# Dan regan paper
#https://www.abcam.com/en-us/technical-resources/research-areas/marker-guides/b-cell-markers
#https://www.ahajournals.org/doi/10.1161/CIRCULATIONAHA.120.052318


#Markers
Immune_Myeloid <- 
    list(LA_TAMs = c("APOC1", "APOE", "APC5", "FABP5"),
        Inflam_TAMs = c("IL1B", "CCL3", "CXCL1", "CXCL2", "CXCL3", "CXCL5"),
        IFN_TAMs = c("IDO", "ISG15", "CXCL8", "CXCL9", "CXCL10"),
        Reg_TAMs = c("AGR1", "MRC1", "CD274", "CX3CR1"),
        Prolif_TAMs = c("MKI67", "CDK1"),
        RTM_TAMs = c("LYVE1", "HES1", "FOLR2"),
        Angio_TAMs = c("VEGFA", "ANGPT2", "ANGPTL4", "SSP1"),
        Osteoclast_TAMs = c("MMP9", "CTSK", "CKB", "CST3"),
        Scar_Macs = c("CD9", "SPP1", "TREM2", "GPNMB"),
        TAMs = c("MERTK", "FOLR2", "SELENOP"),
        IFN_TAMs = c("CXCL10", "IFIT2"),
        Inflammatory_TIMs = c("IL1B", "CXCL8"),
        cMonocyte = c("S100A12", "CCR2", "CD14", "LYZ"),
        Monocyte = c("S100A8", "S100A9"),
        ncMonocyte = c("FCGR3A", "NR4A1", "CX3CR1"),
        DC1 = c("CD1C", "CADM1", "CLEC1B", "DNASE1L3"),
        DC2 = c("FCER1A", "CD1C", "FCER1A", "HLA-DRA", "HLA-DPB1", "HLA-DPA1"),
        preDC = c("FLT3", "IDO1", "CLEC9A"),  #myeloid DC
        Alveolar_Mac = c("MARCO", "TNFAIP2", "OLR1", "MCEMP1"),
        Interstitial_Mac = c("SELENOP", "SPARC", "LYVE1", "FABP5", "CXCL10"),
        plasmocytoid_DC = c("CLEC4C", "IRF7", "PTPRS", "TLR7", "TLR9", 
                            "GZMB", "LILRA4", "IRF8", "IDO1"),
        Mast_cells = c("TPSAB1", "KIT", "CPA3", "MS4A2", "IL1RL1"),
        Mast_cells1 = c("ASIC4", "C1RL", "HGF", "CDK15", "GRAP2", "CADPS", "C2CD5"),
        Basophils = c("CD123", "CD203c", "FCER1A", "IL-4", "IL-13", "MPO",
                            "KIT", "CD34", "CD45", "CD49d"),
        Neutrophils = c("CD66b", "CD16", "CD11b", "CD18", "MPO", "NE",
                        "CXCR1", "CXCR2", "IL-8", "S100A8"))

Immune_Lymphoid <- 
    list(CD4_cells = c("CD4", "IL7R", "IL21"),
        CD8_cells = c("CD8A", "CD8B", "GZMK", "GZMB", "PRF1"),
        Naïve = c("CCR7", "LEF1", "SELL", "TCF7", "CD3", "CD62L", "CD197"),
        Cytotoxic = c("CST7", "GZMA", "GZMB", "IFNG", "PRF1", "TNFSF10"),
        T_reg = c("FOXP3", "IL2RA", "CTLA4", "CD25", "IL4R", "IL7", "TGFB1",
                "TGFB3", "TGFBR1", "CD4", "STAT5", "CD127", "IL12", "IL10"),
        Exhausted = c("PD1", "TOX", "TIGIT", "BTLA", "CTLA4", "HAVCR2", "LAG3",
                        "PDCD1", "TIGIT"),
        Prolif_T = c("MKI67", "CDK1", "CDK4", "TK1", "DIAPH3"),
        IFN_signature = c("CXCL10", "IFI44", "OAS1", "ISG15", "IFI44L", "IFGGB2"),
        Memory_B_cells = c("PAX5", "CD86", "ADAM28", "AIM2", "BANK1", "BLK",
                        "CD19", "CD37", "CD22", "CD79A", "MS4A1"),
        Plasma_B_Cells = c("DENND5B", "IGKC", "IGHM", "EAF2", "CD38"),
        B_cells_naive = c("CD19", "BACH2", "CD79A", "CD79B", "CR2", "IL4R", "IRF8",
                        "MICAL3", "RALGPS2", "RASGRP2", "SELL",  "SPIB", "CD74"),
        NK_cells = c("ITGAX", "KLRD1", "GNLY", "GZMB", "KLRF1", "KLRC1", "KLRC2",
                    "KLRC3", "KLRC4", "KLRD1", "KLRK1", "KLRL1", "KLRB1", "KLRD1", "NCAM1"))

Mesenchymal <- 
    list(Subpleural_fibroblasts = c("MFAP5", "COL6A3", "COL1A1", "PDGFRA", "MMP2",
                                "SPARC", "THY1", "FAP", "LOX", "TNC"),
        Smooth_muscle = c("ACTA2", "MYH11", "TAGLN", "CNN1", "DES", "MYLK",
                            "CALD1", "CAV1", "LMOD1", "SMTN"),
        Alveolar_fibroblasts = c("COL1A1", "COL3A1", "FN1", "PDGFRA", "VIM",
                                "TGFBR2", "MMP2", "CTGF", "SPARC", "THY1",
                                "SFTPC", "AQP5", "PDPN", "KRT5", "MMP2", "VIM"),
        Peribronchial_fibroblasts = c("MGP", "ELN", "FBLN1", "PDGFRA", "COL14A1",
                                    "LUM", "VCAN", "COL5A1", "DPT", "DCN"),
        Myofibroblasts = c("ACTA2", "TAGLN", "POSTN", "PDGFRA", "CNN1", "COL1A1",
                            "TGFBR1", "THY1", "FAP", "SERPINE1",
                            "FBLN1", "TAGLN", "ASPN", "MYLK", "WIF1", "ACTA2"),
        SM_activated_stress_response = c("HSPA1A", "DNAJB1", "HSPB1", "ATF3",
                            "HSPA6", "HSPE1", "DDIT3", "HSP90AA1", "HSPA8", "XBP1"),
        Pericytes = c("PDGFRB", "RGS5", "MCAM", "ACTA2", "CD146", "NG2", "NOTCH3",
                        "ANGPT2", "VEGFA", "CXCL12"),
        Osteoblast = c("RUNX2", "OSX", "ALPL", "COL1A1", "SOST", "BGLAP",
                                "IBSP", "SPP1", "WNT1"),
        Osteoclast = c("ACP5", "CSTK", "CTSK", "CALCR", "CATHK", "TRAP", "DCSTAMP", "MMP9"),
        CA_fibroblasts = c("ACTA2", "FAP", "PDPN", "POSTN", "COL1A1", "PDGFRB", "SPARC",
                "THY1", "MMP2", "MMP9", "CTHRC1", "FN1", "CXCL12", "S100A4", "IL6", "COL3A1",
                "S100A4", "WNT5A"),
        Normal_fibroblasts = c("PTEN", "TP53", "CAV1", "LMNA", "FBN1", "PDGFRA", "VIM",
                                "PRRX1", "CD34", "GREM1", "BCL2", "IGFBP7", "TGFBR3",
                                "ADAMTS1", "LUM"),
        Cardiomyocytes = c("TNNT2", "ACTC1", "MYH6", "MYH7", "NKX2-5", "GATA4", "TTN", "MYL2"),
        Adipocytes = c("FABP4", "ADIPOQ", "LEP", "PLIN1", "CAV1", "PPARG", "SCD", "FASN", 
                        "LPL", "ADRB3", "CD36", "HSL", "UCP1", "FAT", "FATP1"))

Epithelial_Endothelial <-
    list(Capillary_EC = c("CD31", "VEGFA", "VEGFR2", "CD34", "PLVAP", "CLDN5",
                    "ESM1", "ICAM1", "ANGPT2", "ADGRL4"),
        Arterial_EC = c("KDR", "NOTCH1", "CD34", "VEGFA",
                        "ICAM1", "EGR1", "CAV1", "ANGPT1", "CD146",
                        "EFNB2", "HEY2", "NRP1", "JAG1", "DLL4", "SOX17"),
        Venous_EC = c("VWF", "NRP1", "EphB4", "CD31", "ICAM1",
                    "ADGRL4", "TIE2", "KDR", "VEGFR2"),
        Lymphatic_EC = c("LYVE1", "PROX1", "VEGFR3", "MRC1", "FLT4",
                        "LYVE1", "FSTL1", "CCL21", "VEGFC", "ITGA9", "NRP2"),
        AlvEpithelial_T1 = c("ICAM1", "SEMA3B", "SCNN1B", "SEMA3E", "CLIC5",
                    "GPRC5A", "CLDN18", "AGER", "EMP2", "VEGFA", "KRT7", "PDPN"),
         AlvEpithelial_T2 = c("NKX2-1", "MUC1", "SFTPB", "SLC34A2", "LAMP3",
                            "ADGRF5", "ABCD3", "LPCAT1", "NAPSA", "ABCA3", "CXCL2"),
         Bronchial_Epithelial = c("CK14", "CK5", "CK7", "MUC5AC", "MUC5B",
                                    "TP63", "FOXJ1", "KRT19", "SCGB1A1", "CCSP"),
         Club_Cells = c("SCGB1A1", "CCSP", "MUC5B", "TP63", "KRT19", "SFTPA1", "MMP7",
                            "ABCA3", "MUC1", "GSTA1"),
         Ciliated_Cells = c("FOXJ1", "DNAI1", "DNAI2", "TP63", "KRT5", "KRT13",
                            "MUC5AC", "RSPH1", "RSPH9", "TUBA1A", "CCDC17", "CCDC39", "CCDC181"),
        Tuft_Cells = c("TRPM5", "DCLK1", "CLCA1", "TFF3"))

clusterbased_annot <- function(s_obj) {
    Idents(s_obj) <- s_obj$seurat_clusters
    clust_info <- tibble()
    for (cluster in unique(s_obj$seurat_clusters)) {
        subset_object <- subset(s_obj, ident = cluster) %>%
            FindVariableFeatures() %>%
            ScaleData() %>%
            # don't ask for more PCs than there are cells
            RunPCA(npcs = min(50,
                            sum(s_obj$seurat_clusters == cluster) - 1))

        if (length(unique(subset_object$sample_name)) > 1 &&
            ncol(subset_object) > 50) {
            subset_object <- RunHarmony(subset_object,
                                        group.by.vars = "sample_name") %>%
                process_seurat(reduction = "harmony")
        } else {
            subset_object <- subset_object
        }

        subset_object$re_cluster <- str_c(cluster,
                                        ".",
                                        subset_object$seurat_clusters)

        clust_info <- subset_object@meta.data %>%
                as.data.frame() %>%
                select(re_cluster) %>%
                rbind(clust_info)
    }

    s_obj <- AddMetaData(s_obj, metadata = clust_info)
    s_obj$new_annot_clust <- s_obj$re_cluster

    cluster_celltypes <-
        table(s_obj$re_cluster, s_obj$annotations) %>%
        as.data.frame() %>%
        group_by(Var1) %>%
        arrange(desc(Freq), .by_group = TRUE) %>%
        slice_head(n = 1)

    for (i in seq_len(nrow(cluster_celltypes))) {
        seurat_clust <- str_c("^", cluster_celltypes$Var1[i], "$") %>%
            as.character()

        celltype <- cluster_celltypes$Var2[i] %>%
            as.character()

        s_obj$new_annot_clust <-
            str_replace_all(string = s_obj$new_annot_clust,
                            pattern = seurat_clust,
                            replacement = celltype)
    }
    return(s_obj)
}

object_list <-
    tribble(~group,                         ~res_value,
            "patient_prim_normal_cells",    0.1,
            "patient_mets_normal_cells",    0.1,
            "xeno_prim_mouse",              0.1,
            "xeno_mets_mouse",              0.1,
            "mm_prim_normal_cells",         0.25,
            "mm_mets_normal_cells",         0.2)



for (item in seq_len(nrow(object_list))) {
    group <- object_list$group[item]
    res_value <- object_list$res_value[item]

    object <- qs::qread(str_c("output/seurat_objects/tumor_vs_stroma/",
                              group,
                              ".qs"))
    species <- object$organism[1]

    object$Ann_level1 <-
        str_replace_all(object$Ann_level1,
                        c("Endothelial_cells" = "Epithelial_Endothelial",
                          "Epithelial_cells" = "Epithelial_Endothelial",
                          "Stroma" = "Mesenchymal"))

    for (cell_type in unique(object$Ann_level1)) {
        s_obj <-
            object %>%
            subset(Ann_level1 == cell_type) %>%
            process_seurat() %>%
            RunHarmony(group.by.vars = "model") %>%
            process_seurat(reduction = "harmony")

        dimplot_seurat <-
            dimplot_better(s_obj,
                          group_by = "seurat_clusters") +
                ggtitle(str_c("Res=", sil_val)) +
                NoLegend()

        s_obj <- clusterbased_annot(s_obj)

        dimplot_celltype <-
            dimplot_better(s_obj,
                          group_by = "new_annot_clust") +
                ggtitle(str_c("new_annot_clust")) +
                NoLegend()

        if ("scATOMIC_pred" %in% colnames(s_obj@meta.data)) {
            scAtomic_call <-
                dimplot_better(s_obj,
                            group_by = "scATOMIC_pred") +
                    ggtitle(str_c("SCATOMIC_celltype")) +
                    NoLegend()
        } else {
            scAtomic_call <- 
                ggplot(data = NULL) +
                    aes(x = as.factor(1), y = as.factor(1)) +
                    geom_text(aes(label = str_c("scatomic_tumor_call not present for ", group)))
        }

        if ("CNV_status" %in% colnames(s_obj@meta.data)){
            dimplot_CNV <-
                dimplot_better(s_obj,
                            group_by = "CNV_status") +
                    NoLegend() +
                    theme(plot.title = element_text(size = 7))
        } else {
            dimplot_CNV <- 
                ggplot(data = NULL) +
                    aes(x = as.factor(1), y = as.factor(1)) +
                    geom_text(aes(label = str_c("scatomic_tumor_call not present for ", group)))
        }
        dimplot_sample <-
            dimplot_better(s_obj,
                          group_by = "sample_name") +
                ggtitle(str_c("sample_name")) +
                NoLegend()

        entire_matrix <- s_obj@assays$RNA$counts

        big_featureplot_list <- list()

        for (module in names(get(cell_type))) {
            genelist <- get(cell_type)[[module]]
            if(species == "mouse") {
                genelist <- 
                    nichenetr::convert_human_to_mouse_symbols(genelist) %>%
                    na.omit() %>%
                    unique()
            }
            cell_ranks <-
                AUCell::AUCell_run(exprMat = entire_matrix,
                                geneSets = genelist)

            s_obj[[module]] <- AUCell::getAUC(cell_ranks)[1,]

            feature_plot <-
                    FeaturePlot(s_obj,
                                module,
                                cols = c("#EEEEEE", "#ae0600"),
                                min.cutoff = 0.15,
                                pt.size = 1,
                                order = TRUE) +
                        coord_fixed() +
                        ggtitle(module)

            big_featureplot_list[[module]] <- feature_plot
        }
        big_panel_plot <- 
        cowplot::plot_grid(dimplot_seurat,
                            dimplot_celltype,
                            scAtomic_call,
                            dimplot_CNV,
                            dimplot_sample,
                            plotlist = big_featureplot_list,
                            ncol = 2)

    #calculate height and length
        length_var <- 
            if (length(big_featureplot_list) %% 2 == 1) {
                length(big_featureplot_list) + 1
            } else {
                length(big_featureplot_list)
            }

        height <- (length_var/2 * 7) + 14

        ggsave(filename = str_c("output/figures/relustering_normals/",
                                group,
                                "/",
                                cell_type,
                                "_group_plots.png"),
                plot = big_panel_plot,
                width = 16,
                height = height,
                limitsize = FALSE,
                bg = "white")
    }
}  

```


## Manual annotation of each celltypes
```{r manual_annotation_celltypes, include=FALSE}

object_list <-
    tribble(~group,                         ~res_value,
            "patient_prim_normal_cells",    0.1,
            "patient_mets_normal_cells",    0.1,
            "xeno_prim_mouse",              0.1,
            "xeno_mets_mouse",              0.1,
            "mm_prim_normal_cells",         0.25,
            "mm_mets_normal_cells",         0.2)

# went over the aucell plots for manual annotations
celltype_list <-
    list(patient_prim_normal_cells = list(Mesenchymal = c("^0$" = "Smooth_muscle",
                                                          "^1$" = "Normal_Fibroblasts",
                                                          "^2$" ="CAF",
                                                          "^3$"= "Normal_Fibroblasts",
                                                          "^4$"= "EC_blood_vessel",
                                                          "^5$"= "TAMs"),
                                         Immune_Lymphoid = c("^0$" = "CD8_T",
                                                            "^1$" = "CD4_T",
                                                            "^2$" = "Naive_T",
                                                            "^3$" = "NK_cells",
                                                            "^4$" = "Plasma_B",
                                                            "^5$" = "Memory_B",
                                                            "^6$" = "Regulatory_T",
                                                            "^7$" = "Proliferating_T",
                                                            "^8$" = "CD8_T",
                                                            "^9$" = "CD8_T",
                                                            "^10$" = "NK_cells",
                                                            "^11$" = "Angio_TAMs",
                                                            "^12$" = "Plasma_B"),
                                         Immune_Myeloid = c("^0$" = "Inflammatory",
                                                            "^1$" = "Osteoclast_TAMs",
                                                            "^2$" = "TAMs",
                                                            "^3$" = "TAMs",
                                                            "^4$" = "Prolif_TAMs",
                                                            "^5$" = "Angio_TAMs",
                                                            "^6$" = "Monocyte",
                                                            "^7$" = "IFN_TAMs",
                                                            "^8$" = "TAMs",
                                                            "^9$" = "DC",
                                                            "^10$" = "Osteoclast_TAMs",
                                                            "^11$" = "TIMs",
                                                            "^12$" = "TAMs",
                                                            "^13$" = "TAMs",
                                                            "^14$" = "Mast",
                                                            "^15$" = "Plasmocytoid_DC"),
                                         Epithelial_Endothelial = c("^0$" = "EC_Blood",
                                                                    "^1$" = "EC_Lymphatic",
                                                                    "^2$" = "EC_Lymphatic",
                                                                    "^3$" = "EC_Blood",
                                                                    "^4$" = "EC_Lymphatic",
                                                                    "^5$" = "EC_Lymphatic",
                                                                    "^6$" = "EC_Lymphatic",
                                                                    "^7$" = "EC_Blood",
                                                                    "^8$" = "EC_Lymphatic",
                                                                    "^9$" = "EC_Blood",
                                                                    "^10$" = "EC_Blood")),
        patient_mets_normal_cells = list(Mesenchymal = c("^0$" = "Pericytes",            # not very sure about the 2,5,6
                                                          "^1$" = "EC_Blood",
                                                          "^2$" ="Normal_Fibroblasts",
                                                          "^3$"= "Alv_Fibroblasts",
                                                          "^4$"= "CAF",
                                                          "^5$"= "TAMs",
                                                          "^6$"= "Normal_Fibroblasts",
                                                          "^7$"= "Tumor",
                                                          "^8$"= "Osteoclast_TAMs",
                                                          "^9$"= "EC_Blood",
                                                          "^10$"= "Alv_Fibroblasts",
                                                          "^11$"= "Pericytes",
                                                          "^12$"= "Pericytes"),
                                         Immune_Lymphoid = c("^0$" = "CD4_T",
                                                            "^1$" = "CD8_T",
                                                            "^2$" = "Regulatory_T",
                                                            "^3$" = "CD4_T",
                                                            "^4$" = "NK_cells",
                                                            "^5$" = "CD8_T",
                                                            "^6$" = "NK_cells",
                                                            "^7$" = "Plasma_B",
                                                            "^8$" = "NK_cells",
                                                            "^9$" = "CD4_T",
                                                            "^10$" = "Memory_B",
                                                            "^11$" = "CD4_T",
                                                            "^12$" = "CD8_T",
                                                            "^13$" = "Proliferating_T",
                                                            "^14$" = "CD8_T"),
                                         Immune_Myeloid = c("^0$" = "TAMs",
                                                            "^1$" = "Interstitial_Mac",
                                                            "^2$" = "LA_TAMs",
                                                            "^3$" = "TAMs",
                                                            "^4$" = "TAMs",
                                                            "^5$" = "Prolif_TAMs",
                                                            "^6$" = "CAF",
                                                            "^7$" = "Inflam_TAMs",
                                                            "^8$" = "Osteoclast_TAMs",
                                                            "^9$" = "DC",
                                                            "^10$" = "TAMs",
                                                            "^11$" = "Alveolar_Mac",
                                                            "^12$" = "Mast",
                                                            "^13$" = "Proliferating_T",      #cluster13 not sure
                                                            "^14$" = "TAMs",
                                                            "^15$" = "Scar_TAMs",
                                                            "^16$" = "Monocyte",
                                                            "^17$" = "Scar_TAMs",
                                                            "^18$" = "EC_Blood",
                                                            "^19$" = "Mast",
                                                            "^20$" = "PreDC",
                                                            "^21$" = "Scar_TAMs",
                                                            "^22$" = "Plasmocytoid_DC"),
                                         Epithelial_Endothelial = c("^0$" = "Alv_EpithelialT1",
                                                                    "^1$" = "EC_Blood",
                                                                    "^2$" = "Alv_EpithelialT2",
                                                                    "^3$" = "Alv_Fibroblasts",
                                                                    "^4$" = "EC_Blood",
                                                                    "^5$" = "Stromal_cells",  #not sure
                                                                    "^6$" = "Transitional_Epithelial",
                                                                    "^7$" = "EC_Blood",
                                                                    "^8$" = "EC_Blood",
                                                                    "^9$" = "EC_Blood",
                                                                    "^10$" = "EC_Lymphatic",
                                                                    "^11$" = "Ciliated_Cells",
                                                                    "^12$" = "EC_Blood",
                                                                    "^13$" = "EC_Blood",
                                                                    "^14$" = "Tuft_Cells",
                                                                    "^15$" = "EC_Blood")),
        xeno_prim_mouse = list(Mesenchymal = c("^0$" = "Osteoblast",
                                                "^1$" = "Normal_Fibroblasts",
                                                "^2$" ="CAF",
                                                "^3$"= "Normal_Fibroblasts",
                                                "^4$"= "EC_blood_vessel",
                                                "^5$"= "TAMs"),
                            Immune_Lymphoid = c("^0$" = "CD8_T",
                                                "^1$" = "CD4_T",
                                                "^2$" = "Naive_T",
                                                "^3$" = "NK_cells",
                                                "^4$" = "Plasma_B",
                                                "^5$" = "Memory_B",
                                                "^6$" = "Regulatory_T",
                                                "^7$" = "Proliferating_T",
                                                "^8$" = "CD8_T",
                                                "^9$" = "CD8_T",
                                                "^10$" = "NK_cells",
                                                "^11$" = "Angio_TAMs",
                                                "^12$" = "Plasma_B"),
                            Immune_Myeloid = c("^0$" = "Inflammatory",
                                                "^1$" = "Osteoclast_TAMs",
                                                "^2$" = "TAMs",
                                                "^3$" = "TAMs",
                                                "^4$" = "Prolif_TAMs",
                                                "^5$" = "Angio_TAMs",
                                                "^6$" = "Monocyte",
                                                "^7$" = "IFN_TAMs",
                                                "^8$" = "TAMs",
                                                "^9$" = "DC",
                                                "^10$" = "Osteoclast_TAMs",
                                                "^11$" = "TIMs",
                                                "^12$" = "TAMs",
                                                "^13$" = "TAMs",
                                                "^14$" = "Mast",
                                                "^15$" = "Plasmocytoid_DC"),
                            Epithelial_Endothelial = c("^0$" = "EC_Blood",
                                                        "^1$" = "EC_Lymphatic",
                                                        "^2$" = "EC_Lymphatic",
                                                        "^3$" = "EC_Blood",
                                                        "^4$" = "EC_Lymphatic",
                                                        "^5$" = "EC_Lymphatic",
                                                        "^6$" = "EC_Lymphatic",
                                                        "^7$" = "EC_Blood",
                                                        "^8$" = "EC_Lymphatic",
                                                        "^9$" = "EC_Blood",
                                                        "^10$" = "EC_Blood")))
                              

## need to run the aucell again because i have added a lot of celltypes, at least for mouse and xenografts
for (item in seq_len(nrow(object_list))) {
    group <- object_list$group[item]
    res_value <- object_list$res_value[item]

    object <- qs::qread(str_c("output/seurat_objects/tumor_vs_stroma/",
                              group,
                              ".qs"))
    species <- object$organism[1]

    object$Ann_level1 <-
        str_replace_all(object$Ann_level1,
                        c("Endothelial_cells" = "Epithelial_Endothelial",
                          "Epithelial_cells" = "Epithelial_Endothelial",
                          "Stroma" = "Mesenchymal"))

    for (cell_type in unique(object$Ann_level1)) {
        s_obj <-
            object %>%
            subset(Ann_level1 == cell_type) %>%
            process_seurat() %>%
            RunHarmony(group.by.vars = "model") %>%
            process_seurat(reduction = "harmony")

        if (cell_type == "Immune_Myeloid") {
            s_obj <-
                FindClusters(s_obj,
                            resolution = 0.8)
        }

        s_obj$Ann_Level3 <-
            str_replace_all(s_obj$seurat_clusters,
                            celltype_list[[group]][[cell_type]])

        qs::qsave(x = s_obj,
                  file = str_c("output/seurat_objects/stromal_subtypes/",
                               group, "/",
                                cell_type,
                               ".qs"))
    
        timestamp <- format(Sys.time(), "%Y%m%d_%H%M%S")
        
        filename <- str_c("output/metadata/celltype_stroma/",
                            group, "/",
                            cell_type, "_",
                            timestamp,
                            ".tsv")
        write_tsv(x = s_obj@meta.data, file = filename)
    }
}

dimplot_better(s_obj,
                  group_by = "seurat_clusters") +
                  NoLegend()
                  

dimplot_better(s_obj,
                  group_by = "Ann_Level3") 

features <-
    nichenetr::convert_human_to_mouse_symbols(Normal_fibroblasts) %>%
                    na.omit() %>%
                    unique()
FeaturePlot(s_obj, features = unique_normal_fibroblast_genes)



```








## Using built in reference from lab

```{r}


human_macs <- 
    qs::qread("/gpfs0/home2/gdrobertslab/lab/Analysis/Ryan/epithelial/output/rdata/human_macs_final.qs")


dimplot_better(human_macs, group_by = "macs_assignment")

obj <- qs::qread("output/seurat_objects/tumor_vs_stroma/patient_mets_normal_cells.qs")

dimplot_better(obj, group_by = "seurat_clusters")


sobj <-
    obj %>%
    subset(Ann_level1 == "Immune_Myeloid") %>%
    process_seurat() %>%
    RunHarmony(group.by.vars = "model") %>%
    process_seurat(reduction = "harmony")

dimplot_better(sobj, group_by = "Ann_level3")


human_lung_ref <-
    qs::qread("input/downloads/ds_human_lung_atlas.qs")
Idents(human_lung_ref) <- human_lung_ref$free_annotation
human_lung_subset <-
    human_lung_ref %>%
    subset(ident = c("Alveolar_macrophages",
                         "DC1",
                         "Classical_monocytes",
                         "DC2",
                         "Interstitial_macrophages",
                         "Mast_cells",
                         "Migratory_DCs",
                         "Non_classical_monocytes"))

human_lung_subset$CellType <-
    str_replace_all(human_lung_subset$free_annotation,
                    c("^Classical_monocytes" = "cMonocyte",
                     "^Non_classical_monocytes$" = "ncMonocyte",
                     "^Alveolar_macrophages$" = "Alveolar",
                     "^Interstitial_macrophages$" = "Interstitial"))
ref <-
    SingleR::SingleR(test = as.SingleCellExperiment(sobj),
                    ref = list(GetAssayData(human_macs), GetAssayData(human_lung_subset)),
                    labels = list(human_macs$macs_assignment, human_lung_subset$CellType),
                    aggr.ref = TRUE)

s_obj <- sobj

s_obj$annotations <- ref$labels

Idents(s_obj) <- s_obj$seurat_clusters
clust_info <- tibble()
for (cluster in unique(s_obj$seurat_clusters)) {
    subset_object <- subset(s_obj, ident = cluster) %>%
        FindVariableFeatures() %>%
        ScaleData() %>%
        # don't ask for more PCs than there are cells
        RunPCA(npcs = min(50,
                        sum(s_obj$seurat_clusters == cluster) - 1))

    if (length(unique(subset_object$sample_name)) > 1 &&
        ncol(subset_object) > 50) {
        subset_object <- RunHarmony(subset_object,
                                    group.by.vars = "sample_name") %>%
            process_seurat(reduction = "harmony")
    } else {
        subset_object <- subset_object
    }

    subset_object$re_cluster <- str_c(cluster,
                                    ".",
                                    subset_object$seurat_clusters)

    clust_info <- subset_object@meta.data %>%
            as.data.frame() %>%
            select(re_cluster) %>%
            rbind(clust_info)
}

s_obj <- AddMetaData(s_obj, metadata = clust_info)
s_obj$new_annot_clust <- s_obj$re_cluster

cluster_celltypes <-
    table(s_obj$re_cluster, s_obj$annotations) %>%
    as.data.frame() %>%
    group_by(Var1) %>%
    arrange(desc(Freq), .by_group = TRUE) %>%
    slice_head(n = 1)

for (i in seq_len(nrow(cluster_celltypes))) {
    seurat_clust <- str_c("^", cluster_celltypes$Var1[i], "$") %>%
        as.character()

    celltype <- cluster_celltypes$Var2[i] %>%
        as.character()

    s_obj$new_annot_clust <-
        str_replace_all(string = s_obj$new_annot_clust,
                        pattern = seurat_clust,
                        replacement = celltype)
}

dimplot_better(s_obj, group_by = "new_annot_clust")














ref <-
    SingleR::SingleR(test = as.SingleCellExperiment(sobj),
                    ref = list(GetAssayData(human_macs), GetAssayData(human_lung_subset)),
                    labels = list(human_macs$macs_assignment, human_lung_subset$CellType),
                    aggr.ref = TRUE)


sobj$macs_assignment <- ref$labels













dimplot1 <- 
    dimplot_better(sobj, group_by = "Ann_level1") +
        NoLegend() +
        ggtitle("Annotation level 1")

dimplot2 <-
    dimplot_better(sobj, group_by = "Ann_level2") +
        NoLegend() +
        ggtitle("Annotation level 2")

dimplot3 <- 
    dimplot_better(sobj, group_by = "Ann_level3") +
        NoLegend() +
        ggtitle("Annotation level 3")

dimplot4 <-
    dimplot_better(sobj, group_by = "macs_assignment") +
        NoLegend()

plot <- 
        cowplot::plot_grid(dimplot1,
                            dimplot2,
                            dimplot3,
                            dimplot4,
                            ncol = 2)

dimplot_better(sobj, group_by = "new_annot_clust") +
        NoLegend()

#load the reference
murine_macs <- 
    qs::qread("/home/gdrobertslab/lab/Analysis/Matt/epithelial/output/rdata/final_murine_macs.qs")

ref <-
    SingleR::SingleR(test = as.SingleCellExperiment(sobj),
                    ref = GetAssayData(murine_macs),
                    labels = murine_macs$macs_assignment,
                    aggr.ref = TRUE)

sobj$macs_assignment <- ref$labels
    
dimplot1 <- 
    dimplot_better(sobj, group_by = "Ann_level1") +
        NoLegend() +
        ggtitle("Annotation level 1")

dimplot2 <-
    dimplot_better(sobj, group_by = "Ann_level2") +
        NoLegend() +
        ggtitle("Annotation level 2")

dimplot3 <- 
    dimplot_better(sobj, group_by = "Ann_level3") +
        NoLegend() +
        ggtitle("Annotation level 3")

dimplot4 <-
    dimplot_better(sobj, group_by = "macs_assignment") +
        NoLegend()

dimplot_better(sobj, group_by=c("macs_assignment", "Ann_level3", "seurat_clusters"), ncol=2)


excel <-
    readxl::read_excel("/gpfs0/home2/gdrobertslab/lab/Analysis/Yogesh/Finalmacrophage_and_monocyte_subsets.xlsx")

mac_marks <- excel %>%
        filter(Species == "Human") %>%
        select(Annotation, ID) %>%
        group_by(Annotation) %>%
        nest() %>%
        as.list()

names(mac_marks$data) <- mac_marks$Annotation
mac_marks <- mac_marks$data

my_new_list <- mac_marks

my_new_list <- list(
    cMonocyte = c("S100a8", "Sell", "Ifitm6"),  # cMonocyte
    ncMonocyte = c("Itgal", "Ace", "Spn"),  # ncMonocyte
    TAMs = c("C1qa"),  # TAMs, Osteoclast-like?, https://doi.org/10.1186/s41232-022-00213-x
    Int_Mac = c("Lyve1", "Mrc1"),  # Tissue resident/interstitial
    Scar_Mac = c("Trem2", "Cd9", "Gpnmb", "Spp1"),  # Scar-associated, see https://doi.org/10.1038/s41586-019-1631-3
    Ifn_TAMs = c("Ifit1", "Ifit2", "Cxcl10"), # IFN-TAMs
    Angio_TAMs = c("Il1a", "Fn1", "Arg1"),  # Angio-TAMs
    LA_TAMs = c("Acp5", "Ctsk"), # LA-TAMs
    Infla_TAMs = c("Fos", "Jun", "Atf3"), # Inflammatory TAMs
    Cycling = c("Top2a", "Hist1h1b", "Birc5"),  # Cycling
    Pre_DC = c("Cd209a", "Ccr7", "Dcstamp"), # Pre-DC
    DC1 = c("H2-Ab1", "Clec9a", "Irf8"),  # DC1
    DC2 = c("Fscn1", "Ccl5")) # DC2


entire_matrix <- GetAssayData(sobj, layer="counts")
object <- sobj

big_featureplot_list<-list()
for (module in names(my_new_list)) {
            genelist <- 
                nichenetr::convert_human_to_mouse_symbols(my_new_list[[module]]) %>%
                na.omit() %>%
                unique()
        cell_ranks <-
            AUCell::AUCell_run(exprMat = entire_matrix,
                            geneSets = genelist)
        object[[module]] <- AUCell::getAUC(cell_ranks)[1,]

        feature_plot <-
                FeaturePlot(object,
                            module,
                            cols = c("#EEEEEE", "#ae0600"),
                            min.cutoff = 0.15,
                            pt.size = 1,
                            order = TRUE) +
                    coord_fixed() +
                    ggtitle(paste0(module))

        big_featureplot_list[[module]] <- feature_plot
}

cowplot::plot_grid(plotlist = big_featureplot_list,
                            ncol = 5)



#reference for annotating mets human
human_lung_ref <-
    qs::qread("input/downloads/ds_human_lung_atlas.qs") %>%
    subset(free_annotation != "Lymphatic_EC_differentiating")

mets_ref <- list(GetAssayData(human_lung_ref), hpca)
mets_label <- list(human_lung_ref$free_annotation, hpca$label.fine)

#mouse lung ref
mouse_lung_ref_new <- qs::qread("input/downloads/normal_mouselung.qs")
mouse_lung_ref_new$CellType <-
            str_replace_all(mouse_lung_ref_new$free_annotation,
                            c("/" = "_",
                              "\\+" = "_plus",
                              "-" = "_",
                              " " = "_"))
Idents(mouse_lung_ref_new) <- mouse_lung_ref_new$CellType

#subset for myeloid immune
#tumor associated DC: https://www.nature.com/articles/s41467-024-44787-1
mouse_lung_subset <-
    mouse_lung_ref_new %>%
    subset(ident = c("Alveolar_Macrophage",
                         "Ccr7_plus_Dendritic",
                         "Classical_Monocyte",
                         "Intermediate_Monocyte",
                         "Interstitial_Macrophage",
                         "Myeloid_Dendritic_Type_1",
                         "Myeloid_Dendritic_Type_2",
                         "Nonclassical_Monocyte",
                         "Plasmacytoid_Dendritic",
                         "Proliferating_Alveolar_Macrophage",
                         "Proliferating_Classical_Monocyte",
                         "Proliferating_Dendritic",
                         "Neutrophil",
                         "Basophil"))

mouse_lung_subset$CellType <-
    str_replace_all(mouse_lung_subset$CellType,
                    c("^Myeloid_Dendritic_Type_1" = "Myeloid_Dendritic",
                     "^Myeloid_Dendritic_Type_2$" = "Myeloid_Dendritic",
                     "^Ccr7_plus_Dendritic$" = "TumorAssociated_Dendritic"))

#load the another reference
murine_macs <- 
    qs::qread("input/downloads/murine_macrophages.qs")

murine_macs$CellType <-
    str_replace_all(murine_macs$macs_assignment,
                    c("^scarMac$" = "Scar_Macrophages",
                      "^IFN-TAM$" = "TumorAssociated_Macrophages",
                      "^TAM$" = "TumorAssociated_Macrophages",
                      "^cMonocyte$" = "Classical_Monocyte",
                      "^ncMonocyte$" = "Nonclassical_Monocyte",
                      "^Interstitial$" = "Interstitial_Macrophage",
                      "^Pre-DC$" = "Myeloid_Dendritic",
                      "^DC1$" = "Dendritic_cells1",
                      "^Cycling$" = "Proliferating_Dendritic"))

#load the object to be annotated
obj <- qs::qread("output/seurat_objects/tumor_vs_stroma/mm_mets_normal_cells.qs")
sobj <-
    obj %>%
    subset(Ann_level1 == "Immune_Myeloid") %>%
    process_seurat() %>%
    RunHarmony(group.by.vars = "model") %>%
    process_seurat(reduction = "harmony")

ref <-
    SingleR::SingleR(test = as.SingleCellExperiment(sobj),
                    ref = list(GetAssayData(murine_macs), GetAssayData(mouse_lung_subset)),
                    labels = list(murine_macs$CellType, mouse_lung_subset$CellType),
                    aggr.ref = TRUE)

sobj$macs_assignment <- ref$labels

dimplot4 <-
    dimplot_better(sobj, group_by=c("macs_assignment")) +NoLegend() +
    ggtitle("Refined assignment")

plot <- 
        cowplot::plot_grid(dimplot1,
                            dimplot2,
                            dimplot3,
                            dimplot4,
                            ncol = 2)

ggsave(filename = str_c("output/figures/relustering_normals/",
                            group,
                            "/",
                            "macrophages_sub",
                            ".png"),
            plot = plot,
            width = 16,
            height = 16,
            limitsize = FALSE,
            bg = "white")




#run the DEGs
one_sample <-
    obj1 %>%
    subset(sample_name == "CCDI0053_445") %>%
    process_seurat() 

# sil_val <-
#     optimize_silhouette(sobject = one_sample,
#                         test_res = seq(0.05, 0.9, by = 0.05),
#                         summary_plot = TRUE,
#                         reduction = "harmony") %>%
#     filter(!is.na(sil_vals)) %>%
#     filter(sil_vals == max(sil_vals)) %>%
#     slice_head(n=1) %>%
#     dplyr::pull(res_vals)


# one_sample <- 
#     FindClusters(one_sample,
#                 resolution = 0.3)

dimplot_better(one_sample,
            group_by = c("seurat_clusters", "annotations"),
            ncol=2)
object <- one_sample
panel_plots <- list()

big_degs_result <- 
    run_degs(sobject = obj1,
            group_by = "seurat_clusters",
            prefix =  "patient_mets_cancer_cells")

for (group in object_list) {
    # object <- qs::qread(str_c("output/seurat_objects/resolution_optimized/",
    #                           group,
    #                           ".qs"))
    # #object <- JoinLayers(object)

    volc_plot <- list()
    gsea_plot <- list()
    gsea_result <- list()

    dimplot <- dimplot_better(object, group_by = "seurat_clusters")

    degs_result <- run_degs(sobject = object,
                            group_by = "seurat_clusters",
                            prefix =  "patient_mets_cancer_cells")

    for (item in names(degs_result)) {
        if (!dir.exists(str_c("output/degs/", group))) {
            dir.create(str_c("output/degs/", group), recursive = TRUE)
        }
        write_tsv(degs_result[[item]],
                 str_c("output/degs/", group, "/", item, "_degs.tsv"))
        logfc_cutoff <- 0.6
        degs_result[[item]]$diffexpressed <- "Not Significant"
        degs_result[[item]]$diffexpressed[degs_result[[item]]$log2FoldChange > logfc_cutoff & degs_result[[item]]$padj < 0.05] <- "Upregulated"
        degs_result[[item]]$diffexpressed[degs_result[[item]]$log2FoldChange < -1 * logfc_cutoff & degs_result[[item]]$padj < 0.05] <- "Downregulated"
#make the volcano plot
        volc_plot[[item]] <- ggplot(data=degs_result[[item]],
                            aes(x=log2FoldChange,
                                y=-log10(pvalue),
                                color = diffexpressed)) + 
            geom_vline(xintercept = c(-1 * logfc_cutoff, logfc_cutoff), col = "gray", linetype = "dashed") + 
            geom_hline(yintercept = c(0.05), col = "gray", linetype = "dashed") +
            geom_point(size = 2) +
            scale_color_manual(values = c(plot_cols[1], "grey", plot_cols[2]),
                               name = "") +
            geom_text_repel(aes(label = gene))
    }
#GSEA analysis for the dotplots
    for (i in seq_len(nrow(cat_tib))){
        category <- cat_tib$category[i]
        subcategory <- cat_tib$subcategory[i]
        cat_expl <- cat_tib$cat_expl[i]
        if (subcategory == "NA") {
            gsea_result <- run_gsea(degs_result = degs_result,
                                    category = category,
                                    species = object$organism[1])
        } else {
            gsea_result <- run_gsea(degs_result = degs_result,
                                    category = category,
                                    subcategory = subcategory,
                                    species = object$organism[1])
        }
        for (item in names(gsea_result)) {
            rows <- gsea_result[[item]] %>% 
                nrow()
            if (rows >= 1) {
                top5up_down <- rbind(gsea_result[[item]] %>%
                                        slice_head(n = 7),
                                    gsea_result[[item]] %>%
                                        slice_tail(n = 7)) %>%
                                dplyr::select(pathway, NES, size, padj) %>%
                                arrange(desc(NES)) %>%
                                mutate(pathway = as.factor(pathway) %>%
                                            str_replace_all("_", " ") %>%
                                            str_wrap(65) %>%
                                            fct_reorder(NES),
                                       sample = item,
                                       order = seq_len(n()),
                                       justify_y = if_else(NES > 0, 1, 0),
                                       y_pos = if_else(NES > 0, -0.1, 0.1))
                gsea_plot[[cat_expl]][[item]] <- 
                    local({cat_expl = cat_expl
                          two_way_dotplot(top5up_down, x_col = "NES") +
                    ggtitle(str_c(cat_expl, " for ", item))})
            } else {
                print(str_c("No Pathways up or down in ", item, " for ", cat_expl))
                gsea_plot[[cat_expl]][[item]] <- 
                local({cat_expl = cat_expl
                      ggplot(data = NULL,
                            aes(x = as.factor(1),
                            y = as.factor(1))) +
                        geom_text(aes(label = str_c("No pathways for ", cat_expl, " in ", item)),
                                  size = 4)})
            }
        }
    }
#make panel plots
    for (clusters in names(volc_plot)) {
        panel_plots[[group]][[clusters]] <- 
            patchwork::wrap_plots(dimplot,
            volc_plot[[clusters]],
            gsea_plot$KEGG[[clusters]],
            gsea_plot$Hallmark_paths[[clusters]] ,
            gsea_plot$Oncogenic_signature[[clusters]],
            gsea_plot$Transcription_factor_targets[[clusters]],
            ncol = 2,
            widths = c(6, 6),
            heights = unit(c(8,8,8), c("cm", "cm", "cm"))) +
            patchwork::plot_annotation(title = clusters)

        ggsave(str_c("output/gsea/test/", group, "/", clusters, ".png"),
                width = 12,
                height = 18,
                plot = panel_plots[[group]][[clusters]])
    }
}










#keep all the genes in scale data
all_sample <-
    qs::qread("output/seurat_objects/tumor_vs_stroma/patient_mets_cancer_cells.qs") %>%
    FindClusters(resolution = 0.1)

all_sample <- all_sample %>%
    FindVariableFeatures(nfeatures = 5000) %>%
    ScaleData()



for (samples in unique(all_sample$sample_name)) {
    if (ncol(subset(all_sample, sample_name == samples)) < 1000) {
        next
    }
    subset_obj <-
        subset(all_sample,
               sample_name == samples) %>%
        process_seurat()

    sil_val <-
        optimize_silhouette(sobject = subset_obj,
                            test_res = seq(0.1, 0.9, by = 0.05),
                            summary_plot = FALSE,
                            reduction = "harmony") %>%
        filter(!is.na(sil_vals)) %>%
        filter(sil_vals == max(sil_vals)) %>%
        slice_head(n=1) %>%
        dplyr::pull(res_vals)

    subset_obj <- 
        FindClusters(subset_obj,
                    resolution = sil_val)

    aver_exp1 <- AverageExpression(one_sample,
                                layer = "scale.data",
                                group.by = "seurat_clusters")$RNA %>%
                as.data.frame() %>%
                rename_with(~str_replace(., "g", "clust")) %>%
                tibble::rownames_to_column(var = "gene")


}




dimplot_better(all_sample,
              group_by = c("seurat_clusters", "sample_name"),
              ncol=2) 

one_sample <-
    all_sample %>%
    subset(sample_name == "CCDI0058_16183") %>%
    process_seurat()


dimplot_better(one_sample,
        group_by = "seurat_clusters")

one_sample <- one_sample %>%
    ScaleData(features = VariableFeatures(all_sample))
sil_val <-
    optimize_silhouette(sobject = one_sample,
                        test_res = seq(0.1, 0.9, by = 0.05),
                        summary_plot = TRUE,
                        reduction = "harmony") %>%
    filter(!is.na(sil_vals)) %>%
    filter(sil_vals == max(sil_vals)) %>%
    slice_head(n=1) %>%
    dplyr::pull(res_vals)

one_sample <-
    FindClusters(one_sample,
                resolution = sil_val)

dimplot_better(one_sample,
            group_by = c("seurat_clusters"))

aver_exp1 <- AverageExpression(one_sample,
                                layer = "scale.data",
                                group.by = "seurat_clusters")$RNA %>%
                as.data.frame() %>%
                rename_with(~str_replace(., "g", "clust")) %>%
                tibble::rownames_to_column(var = "gene")

aver_exp2 <- AverageExpression(all_sample,
                                layer = "scale.data",
                                group.by = "seurat_clusters")$RNA %>%
                as.data.frame() %>%
                tibble::rownames_to_column(var = "gene")

combine_exp <- 
    left_join(aver_exp1, aver_exp2, by = "gene") %>%
    column_to_rownames(var = "gene")

correlation <- tibble::tibble()
for (clusters in colnames(aver_exp1)[-1]) {
    for (cluster_names in colnames(aver_exp2)[-1]) {
        correlation_calc <-
            cor(combine_exp[[clusters]],
            combine_exp[[cluster_names]])

        #append the correlations
        correlation <- 
            tibble::tibble(corr_val = correlation_calc) %>%
            mutate(small_cluster = str_c("single_", clusters),
                   big_cluster = str_c("whole_", cluster_names)) %>%
            rbind(correlation)
    }
}
#make a heatmap
correlation <-
    correlation %>%
    pivot_wider(names_from = big_cluster,
                values_from = corr_val) %>%
    column_to_rownames(var = "small_cluster") %>%
    pheatmap::pheatmap(display_numbers = TRUE)



for (clusters in unique(one_sample$seurat_clusters)) {
    subset_obj <-
        subset(one_sample,
               seurat_clusters == clusters) %>%
               AverageExpression(layer = "scale.data",
                                group.by = "seurat_clusters")

    for (new_clust in unique(all_sample$seurat_clusters)) {
        subset_new <-
            subset(all_sample,
                   seurat_clusters == new_clust)
        correlation <-
            cor(subset_obj@assays$RNA$counts,
                subset_new@assays$RNA$counts)

    }
}

if (length(unique(subset_sobj$seurat_clusters)) > 1) {
                    correlation_plot <- 
                        AverageExpression(subset_sobj,
                                        layer = "scale.data",
                                        group.by = "seurat_clusters")$RNA %>%
                            as.matrix() %>%
                            cor() %>%
                            pheatmap::pheatmap(display_numbers = TRUE,
                                            silent = TRUE)














for (item in seq_len(nrow(object_list))) {
    group <- object_list$group[item]
    res_value <- object_list$res_value[item]

    object <-
        qs::qread(str_c("output/seurat_objects/Annotation_level1/",
                        group,
                        ".qs"))

    dimplot_main <-
        dimplot_better(object,
                      group_by = c("Ann_level1")) +
            ggtitle(group) +
            NoLegend()

    #subset ech celltype for reclustering and labelling the celltypes
    for (celltypes in c("Macrophages", "T_cells", "Fibroblasts",
                        "Dendritic_cells", "B_cells", "Endothelial_cells")) {
        if (celltypes %in% object$Ann_level1) {
            subset_sobj <-
                subset(object,
                       Ann_level1 == celltypes)
            if (length(unique(subset_sobj$sample_name)) > 1 &&
                ncol(subset_sobj) > 50) {
                subset_sobj <- 
                    subset_sobj %>%
                    process_seurat() %>%
                    RunHarmony(group.by.vars = "sample_name")

                sil_val <- 
                    optimize_silhouette(sobject = subset_sobj,
                                        test_res = seq(0.05, 0.9, by = 0.05),
                                        summary_plot = FALSE,
                                        reduction = "harmony") %>%
                    filter(!is.na(sil_vals)) %>%
                    filter(sil_vals == max(sil_vals)) %>%
                    slice_head(n=1) %>%
                    dplyr::pull(res_vals)
            
                if (length(sil_val) != 0) {
                    subset_sobj <- subset_sobj %>%
                        process_seurat(reduction = "harmony",
                                    resolution = sil_val)
                } else {
                    subset_sobj <- subset_sobj %>%
                        process_seurat(reduction = "harmony")
                }

            #make the dimplot
                dimplot_subset <- 
                    dimplot_better(subset_sobj,
                                group_by = "seurat_clusters") +
                        ggtitle(celltypes) +
                        NoLegend()

                #prepare the matrix for aucell
                matrix <- subset_sobj@assays$RNA$counts

                featureplot_list <- list()

                for (module in names(get(celltypes))) {
                    if (grepl("mouse", object$organism[1])) {
                        genelist <- 
                            nichenetr::convert_human_to_mouse_symbols(get(celltypes)[[module]]) %>%
                            na.omit() %>%
                            unique()
                    } else {
                        genelist <- get(celltypes)[[module]]
                    }
                    cell_ranks <- 
                        AUCell::AUCell_run(exprMat = matrix,
                                        geneSets = genelist)
                    subset_sobj[[module]] <- AUCell::getAUC(cell_ranks)[1,]

                    feature_plot <- 
                        FeaturePlot(subset_sobj,
                                    module,
                                    cols = c("#EEEEEE", "#ae0600"),
                                    min.cutoff = 0.15,
                                    pt.size = 1,
                                    order = TRUE) +
                            coord_fixed() +
                            ggtitle(paste0(celltypes, ": ", module))

                    featureplot_list[[module]] <- feature_plot
                }

                # Combine all the plots into a panel plot with 
                panel_plot <- 
                    cowplot::plot_grid(dimplot_main,
                                        dimplot_subset,
                                        plotlist = featureplot_list,
                                        ncol = 2)

                #calcuate height based of the number of features
                length_var <- 
                    if (length(featureplot_list) %% 2 == 1) {
                        length(featureplot_list) + 1
                    } else {
                        length(featureplot_list)
                    }

                height <- (length_var/2 * 7) + 7

                # save the panel plot
                ggsave(filename = str_c("output/figures/relustering_normals/",
                                            group,
                                            "/",
                                            celltypes,
                                            ".png"),
                            plot = panel_plot,
                            width = 14,
                            height = height,
                            device = "png",
                            bg = "white")

                # qs save
                qs::qsave(panel_plot,
                        str_c("output/figures/relustering_normals/",
                                group,
                                "/",
                                celltypes,
                                ".qs"))

                # correlation analysis
                if (length(unique(subset_sobj$seurat_clusters)) > 1) {
                    correlation_plot <- 
                        AverageExpression(subset_sobj,
                                        layer = "scale.data",
                                        group.by = "seurat_clusters")$RNA %>%
                            as.matrix() %>%
                            cor() %>%
                            pheatmap::pheatmap(display_numbers = TRUE,
                                            silent = TRUE)

                #save the correlation plot
                    ggsave(filename = str_c("output/figures/relustering_normals/",
                                        group,
                                        "/",
                                        celltypes,
                                        "_correlation.png"),
                        plot = correlation_plot,
                        width = 14,
                        height = 14,
                        bg = "white")

                    # qs save
                    qs::qsave(correlation_plot,
                            str_c("output/figures/relustering_normals/",
                                    group,
                                    "/",
                                    celltypes,
                                    "_correlation.qs"))

                #make the panel plot for degs and GSEA
                    make_panel_plot(sobj = subset_sobj,
                                    cluster_column = "seurat_clusters",
                                    label = celltypes,
                                    group = group)
                }
            } else {
                print(str_c("Not enough cells for harmony in ", celltypes, " in ", group))
            }
        } else {
            print(str_c(celltypes, " not in ", group))
        }
    print(str_c("Finished ", group, " ", celltypes))
    }
}



```