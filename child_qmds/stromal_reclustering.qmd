Recluster the normal cell types and annotate the types.

## Normal cells reclustering

```{r setup, include=FALSE}

object_list <-
    tribble(~group,                         ~res_value,
            "patient_prim_normal_cells",    0.15,
            "patient_mets_normal_cells",    0.05,
            "xeno_prim_mouse",              0.1,
            "xeno_mets_mouse",              0.1,
            "mm_prim_normal_cells",         0.25,
            "mm_mets_normal_cells",         0.2)

object_list <- list(patient_prim_normal_cells = c("Macrophage",
                                                  "Endothelial_cells",
                                                  "Tcells",
                                                  "NK cells",
                                                  "Monocytes",
                                                  "Dendritic cells",
                                                  "B cells"),
                    patient_mets_normal_cells = c("Macrophage",
                                                  "Endothelial_cells",
                                                  "Tcells",
                                                  "NK cells",
                                                  "Monocytes",
                                                  "Dendritic cells",
                                                  "B cells"),)


#https://www.cell.com/trends/immunology/fulltext/S1471-4906(22)00094-1
Macrophages <- list(LA_TAMs = c("APOC1", "APOE", "APC5", "FABP5"),
                   Inflam_TAMs = c("IL1B", "CCL3", "CXCL1", "CXCL2", "CXCL3", "CXCL5"),
                   IFN_TAMs = c("IDO", "ISG15", "CXCL8", "CXCL9", "CXCL10"),
                   Reg_TAMs = c("AGR1", "MRC1", "CD274", "CX3CR1"),
                   Prolif_TAMs = c("MKI67", "CDK1"),
                   RTM_TAMs = c("LYVE1", "HES1", "FOLR2"),
                   Angio_TAMs = c("VEGFA", "ANGPT2", "ANGPTL4", "SSP1"))
                   
                #    Alveolar_TAMs = c("CD11c", "MARCO", "CD64", "CD169", "CD11c"),
                #    Adventitial_TAMs = c("PDGFRB", "SERPINF1", "PI16", "SFRP2"),
                #    Interstitial_TAMs = c("CD11b", "CD11c", "CD64"),
                #    Pro-inflammatory = c("AZIN1", "CD38","CD86","CXCL10","FPR2","GPR18", "IL12B",
                #                        "IL18","IRF5","NFKBIZ","NOS2","PTGS2","TLR4","TNF"),
                #    Anti-inflammatory = c("ALOX15", "ARG1", "CHIL3", "CHIL4","EGR2", "IL10",
                #                           "IRF4","KLF4","MRC1","MYC","SOCS2","TGM2")
# alveolar macs and int macs?


#https://www.nature.com/articles/s41467-021-23324-4
#https://www.biocompare.com/Editorial-Articles/569888-A-Guide-to-T-Cell-Markers/
T_cells <- list(CD4_cells = c("CD4", "IL7R", "IL21"),
                CD8_cells = c("CD8A", "CD8B", "GZMK", "GZMB", "PRF1"),
                NaÃ¯ve = c("CCR7", "LEF1", "SELL", "TCF7"),
                Cytotoxic = c("CST7", "GZMA", "GZMB", "IFNG", "PRF1", "TNFSF10"),
                T_reg = c("FOXP3", "IL2RA", "CTLA4", "CD25", "IL4R", "IL7", "TGFB1", "TGFB3", "TGFBR1"),
                Exhausted = c("PD1", "TOX", "TIGIT", "BTLA", "CTLA4", "HAVCR2", "LAG3", "PDCD1", "TIGIT"),
                Prolif_T = c("MKI67", "CDK1", "CDK4", "TK1", "DIAPH3"),
                IFN_signature = c("CXCL10", "IFI44", "OAS1", "ISG15", "IFI44L", "IFGGB2"))

#https://www.ncbi.nlm.nih.gov/pmc/articles/PMC9192344/
Fibroblasts <- list(MyoFibroblasts = c("FBLN1", "TAGLN", "ASPN", "MYLK", "WIF1", "ACTA2"),
                    InflamFibroblasts = c("IL6", "IL1B", "CXCL1", "CXCL2", "CXCL3", "CXCL5"),
                    MatrixFibroblasts = c("COL1A1", "COL1A2", "COL3A1", "COL5A1", "COL5A2", "COL6A1"),
                    AngioFibroblasts = c("VEGFA", "ANGPT2", "ANGPTL4", "SSP1"),
                    AdventitialFibroblasts = c("PDGFRB", "SERPINF1", "PI16", "SFRP2"),
                    AlveolarFibroblasts = c("SFTPC", "AQP5", "PDPN", "KRT5"))

# Dan regan paper
Dendritic_cells <- list(PreDC = c("IL3RA", "PGLYRP2", "DDR2"),
                        mregDC = c("IDO1", "IL4I1", "CCR7"),
                        pDC = c("IGF1", "RARRES2", "IGHM", "IGKC"),
                        cDC1 = c("CADM1", "DNASE1L3", "CLEC1B"),
                        cDC2 = c("CD300H", "PID1", "CD1C"))

#https://www.abcam.com/en-us/technical-resources/research-areas/marker-guides/b-cell-markers
B_cells <- list(Immature_B = c("CD19", "CD20", "CD34", "CD38", "CD45R"),
                Plasm_B = c("CD38", "CD138", "IgG", "CD45", "CD184", "TNFRSF17"),
                Memory =c("CD19", "CD20", "CD21", "CD27", "CD69", "CD95"),
                Regulatory = c("IgM", "CD19", "CD1d", "CD21", "CD5"))


for (item in seq_len(nrow(object_list))) {
    group <- object_list$group[item]
    res_value <- object_list$res_value[item]

    object <- qs::qread(str_c("output/seurat_objects/tumor_vs_stroma/",
                              group,
                              ".qs"))

    object$new_annot_clust <-
            stringr::str_replace_all(object$new_annot_clust,
                                    c("^CD4T_cells$" = "T_cells",
                                      "^CD4T_Memory$" = "T_cells",
                                      "^CD4T_Naive$" = "T_cells",
                                      "^Myeloid_Dendritic2$" = "Dendritic_cells",
                                      "^CD8T_cells$" = "T_cells",
                                      "^Plasma_Bcells$" = "B_cells",
                                      "^CD8T_Memory$" = "T_cells",
                                      "^CD4T_cells1$" = "T_cells",
                                      "^CD8T_cells1$" = "T_cells",
                                      "^AlvEpithelial_T1$" = "Epithelial_cells",
                                      "^AlvEpithelial_T2$" = "Epithelial_cells",
                                      "^Signalling_AlvEpithelial$" = "Epithelial_cells",
                                      "^Int_Macrophages$" = "Macrophages",
                                      "^Alv_Macrophages$" = "Macrophages"))

    object <- 
        FindClusters(object,
                    resolution = res_value)

    dimplot_main <-
        dimplot_better(object,
                      group_by = "new_annot_clust") +
            ggtitle(group) +
            NoLegend()

    #subset ech celltype for reclustering and labelling the celltypes
    for (celltypes in c("Macrophages", "T_cells", "Fibroblasts", "Dendritic_cells")) {
        if (celltypes %in% object$new_annot_clust) {
            subset_sobj <-
                subset(object,
                    annotations == celltypes) %>%
                process_seurat() %>%
                RunHarmony(group.by.vars = "sample_name")

            sil_val <- 
                optimize_silhouette(sobject = subset_sobj,
                                    test_res = seq(0.05, 0.9, by = 0.05),
                                    summary_plot = FALSE,
                                    reduction = "harmony") %>%
                filter(!is.na(sil_vals)) %>%
                filter(sil_vals == max(sil_vals)) %>%
                slice_head(n=1) %>%
                dplyr::pull(res_vals)
            
            if (length(sil_val) != 0) {
                subset_sobj <- subset_sobj %>%
                    process_seurat(reduction = "harmony",
                                resolution = sil_val)
            } else {
                subset_sobj <- subset_sobj %>%
                    process_seurat(reduction = "harmony")
            }

            #make the dimplot
            dimplot_subset <- 
                dimplot_better(subset_sobj,
                            group_by = "seurat_clusters") +
                    ggtitle(celltypes) +
                    NoLegend()

            #prepare the matrix for aucell
            matrix <- subset_sobj@assays$RNA$counts

            featureplot_list <- list()

            for (module in names(get(celltypes))) {
                if (grepl("mouse", object$organism[1])) {
                    genelist <- 
                        nichenetr::convert_human_to_mouse_symbols(get(celltypes)[[module]]) %>%
                        na.omit() %>%
                        unique()
                } else {
                    genelist <- get(celltypes)[[module]]
                }
                cell_ranks <- 
                    AUCell::AUCell_run(exprMat = matrix,
                                    geneSets = genelist)
                subset_sobj[[module]] <- AUCell::getAUC(cell_ranks)[1,]

                feature_plot <- 
                    FeaturePlot(subset_sobj,
                                module,
                                cols = c("#EEEEEE", "#ae0600"),
                                min.cutoff = 0.15,
                                pt.size = 1,
                                order = TRUE) +
                        coord_fixed() +
                        ggtitle(paste0(celltypes, ": ", module))

                featureplot_list[[module]] <- feature_plot
            }

            # Combine all the plots into a panel plot with 
            panel_plot <- 
                cowplot::plot_grid(dimplot_main,
                                    dimplot_subset,
                                    plotlist = featureplot_list,
                                    ncol = 2)

            #calcuate height based of the number of features
            length_var <- 
                if (length(featureplot_list) %% 2 == 1) {
                    length(featureplot_list) + 1
                } else {
                    length(featureplot_list)
                }

            height <- (length_var/2 * 7) + 7

            # save the panel plot
            ggsave(filename = str_c("output/figures/relustering_normals/",
                                        group,
                                        "/",
                                        celltypes,
                                        ".png"),
                        plot = panel_plot,
                        width = 14,
                        height = height,
                        device = "png",
                        bg = "white")

            # qs save
            qs::qsave(panel_plot,
                    str_c("output/figures/relustering_normals/",
                            group,
                            "/",
                            celltypes,
                            ".qs"))

            # correlation analysis
            if (length(unique(subset_sobj$seurat_clusters)) > 1) {
                correlation_plot <- 
                    AverageExpression(subset_sobj,
                                    layer = "scale.data",
                                    group.by = "seurat_clusters")$RNA %>%
                        as.matrix() %>%
                        cor() %>%
                        pheatmap::pheatmap(display_numbers = TRUE,
                                        silent = TRUE)

            #save the correlation plot
                ggsave(filename = str_c("output/figures/relustering_normals/",
                                    group,
                                    "/",
                                    celltypes,
                                    "_correlation.png"),
                    plot = correlation_plot,
                    width = 14,
                    height = 14,
                    bg = "white")

                # qs save
                qs::qsave(correlation_plot,
                        str_c("output/figures/relustering_normals/",
                                group,
                                "/",
                                celltypes,
                                "_correlation.qs"))

            #make the panel plot for degs and GSEA
                make_panel_plot(sobj = subset_sobj,
                                cluster_column = "seurat_clusters",
                                label = celltypes,
                                group = group)
            }
        } else {
            print(str_c(celltypes, " not in ", group))
        }
    }
}





```