## Cancer cells vs normal cells using SCEVAN
Single CEll Variational Aneuploidy aNalysis
When run, the result is in three metadata column:
class: with tumor (blue) vs normal celltype(green), and (filtered (red): low quality cells i think)
subclone: clones numbered like a seurat clusters
SCEVAN starts from the raw count matrix removing irrelevant genes and cells.
Identification of a small set of highly confident normal cells.
Relative gene expression obtained from removal of the baseline inferred from confident normal cells.
Edge-preserving nonlinear diffusion filtering of relative gene expression.
Segmentation with a variational region-growing algorithm.
Identification of normal cells as those in the cluster containing the majority of confident normal cells.
Segments are then classified in five copy number states.
Analysis of subclones including clone tree, pathway activities, but it can be turned off

```{r scevan}
#| cache.vars = 'orthologs'
#| fig.width: 10
#| fig.height: 10
#| fig.align: center
#| echo: FALSE
#| dependson: annot_celltypes
#| dependson: dog_human_orthologs_function
min_cells <- 500

# load the tsv for human_dog gene orthologs
orthologs <-
    read_tsv("input/downloads/dog_human_gene_orthologs.txt")

# run the SCEVAN pipeline
for (group in c("patient_prim", "patient_mets",
                "mm_prim", "mm_mets",
                "dogs_prim", "dogs_mets")) {
    object <- 
        qs::qread(str_c("output/seurat_objects/harmony_sobjs_annot/",
                        group,
                        ".qs"))
    organism <-
        object$organism[1]

    #use the function to convert dog to human genes and make new seurat object
    if (organism == "dog") {
        object <- 
            dog_to_human_setup(object)
        organism <- "human"
    }

    count_mtx_list <- 
        object %>%
        SplitObject(split.by = "sample_name") %>%
        lapply(FUN = function(x) GetAssayData(x, layer = "counts"))

    # SCEVAN results listed into an output for each seurat object
    result_list <-
        parallel::mclapply(names(count_mtx_list),
                           mc.cores = min(1, parallelly::availableCores()),
                           function(x) {
            # If we have too few cells SCEVAN errors out
            # dim(x) must have a positive length
            if (ncol(count_mtx_list[[x]]) > min_cells) {
                output <-
                    SCEVAN::pipelineCNA(count_mtx = count_mtx_list[[x]],
                                        sample = x,
                                        organism = organism,
                                        par_cores = parallelly::availableCores(),
                                        SUBCLONES = FALSE)
                # SCEVAN writes a bunch of files to ./output/ so we need to move them
                system(paste0("mv output/",
                            x,
                            "* output/id_tumor/SCEVAN/"))
                # Two of the files have spaces in their names :-|
                system(paste0("mv output/' ",
                              x,
                              " vega_output' output/id_tumor/SCEVAN/"))
                system(paste0("mv output/' ",
                            x,
                            "onlytumor vega_output' output/id_tumor/SCEVAN/"))

                return(output)
            }
        })

    bind_rows(result_list) %>%
        mutate(scevan_tumor_call = if_else(class == "tumor",
                                           "cancer_cells",
                                           "normal_cells")) %>%
        rownames_to_column("cell") %>%
        write_tsv(str_c("output/id_tumor/SCEVAN/",
                        group,
                        "_metadata.tsv"))
}


```

## Cancer cells vs normal cells using scATOMIC
The result comes with the annotation of cell types including for both cancer type
and the normal cell types. Also outputs for each cell:
Classification_confidence: confident, low_confidence on annotation
pan_cancer_cluster: either cancer or normal
scATOMIC_pred : celltype annotation
```{r scatomic}
#| fig.width: 10
#| fig.height: 10
#| fig.align: center
#| echo: FALSE
#| dependson: annot_celltypes
#| dependson: scevan

for (group in c("patient_prim", "patient_mets",
                "dogs_prim", "dogs_mets")) {
    object <- 
        qs::qread(str_c("output/seurat_objects/harmony_sobjs_annot/",
                        group,
                        ".qs"))
    
    organism <-
        object$organism[1]

    #use the function to convert dog to human genes and make new seurat object
    if (organism == "dog") {
        object <- 
            dog_to_human_setup(object)
        organism <- "human"
    }

    min_count_per_gene <- 10
    count_mtx_list <- object %>%
        SplitObject(split.by = "sample_name") %>%
        lapply(FUN = function(x) {
            temp_data <- GetAssayData(x, layer = "counts")
            temp_data <- temp_data[rowSums(temp_data) > min_count_per_gene, ]
        })

    result_list <-
        parallel::mclapply(names(count_mtx_list),
                           mc.cores = parallelly::availableCores(),
                           mc.preschedule = FALSE,
                           function(x) {
            cell_predictions <-
                scATOMIC::run_scATOMIC(
                    rna_counts = count_mtx_list[[x]],
                    mc.cores = parallelly::availableCores()
                )
            scATOMIC_results <-
                tryCatch(
                    {
                        scATOMIC::create_summary_matrix(
                            prediction_list = cell_predictions,
                            use_CNVs = T,
                            modify_results = T,
                            mc.cores = parallelly::availableCores(),
                            raw_counts = count_mtx_list[[x]],
                            min_prop = 0.5
                        ) %>%
                        select(starts_with("layer_"),
                               any_of(c("scATOMIC_pred",
                                      "classification_confidence",
                                      "CNV_status",
                                      "pan_cancer_cluster")))
                },
                error = function(e) {
                    message("scATOMIC failed for ",group, " ", x, " with error: ", e)
                    scATOMIC::create_summary_matrix(
                        prediction_list = cell_predictions,
                        modify_results = T,
                        mc.cores = parallelly::availableCores(),
                        raw_counts = count_mtx_list[[x]],
                        min_prop = 0.5
                    ) %>%
                    select(starts_with("layer_"),
                               any_of(c("scATOMIC_pred",
                                      "classification_confidence",
                                      "CNV_status")))
                })

            return(scATOMIC_results)
        })

    dplyr::bind_rows(result_list) %>%
    mutate(scatomic_tumor_call = if_else(grepl("Cancer Cell$", scATOMIC_pred),
                                         "cancer_cells",
                                         "normal_cells")) %>%
    rownames_to_column("cell") %>%
    write_tsv(str_c("output/id_tumor/scATOMIC/",
                    group,
                    "_metadata.tsv"))
}


```

## plotting the results of scATOMIC 
```{r scatomic_scevan_plots}
#| fig.width: 10
#| fig.height: 10
#| fig.align: center
#| echo: FALSE
#| dependson: scatomic
for (group in c("patient_prim", "patient_mets",
                "dogs_prim", "dogs_mets")) {
    object <- 
        qs::qread(str_c("output/seurat_objects/harmony_sobjs_annot/",
                        group,
                        ".qs"))

    #add scatomic label
    scatomic_label <- 
        readr::read_tsv(str_c("output/id_tumor/scATOMIC/",
                            group,
                            "_metadata.tsv")) %>%
        column_to_rownames("cell")
    object <- object %>%
            AddMetaData(metadata = scatomic_label)

    #loop over individual  samples to plot and save
    for (samples in unique(object$sample_name)) {
        sub_sobj <- subset(object, sample_name == samples) %>%
                        process_seurat()

        #make a plot
        scatomic1 <- dimplot_better(sub_sobj,
                                   group_by = "scATOMIC_pred") +
                        NoLegend()

        # check if CNV_status is present and if all of them are NA, cannot plot
        if (all(!is.na(sub_sobj$CNV_status))) {
            scatomic2 <- dimplot_better(sub_sobj,
                                        group_by = "CNV_status") +
                            NoLegend()
        } else {
            scatomic2 <- ggplot(data = NULL) +
                            aes(x = as.factor(1), y = as.factor(1)) +
                            geom_text(aes(label = str_c("CNV_status not present for ", samples)))
        }
        scatomic3 <- dimplot_better(sub_sobj,
                                   group_by = "scatomic_tumor_call") +
                        NoLegend()

        scatomic4 <- dimplot_better(sub_sobj,
                                   group_by = "new_annot_clust") +
                        NoLegend()

        # patchwork the plot for scatomic
        dimplot_sub_sobj <- 
            patchwork::wrap_plots(scatomic1,
                                scatomic2,
                                scatomic3,
                                scatomic4,
                                ncol = 2) +
                patchwork::plot_annotation(title = samples)

        # save the plot for scatomic
        ggsave(str_c("output/figures/scatomic/",
                        group, "/",
                        samples,
                        "_dimplot.png"),
                plot = dimplot_sub_sobj,
                width = 14,
                height = 14)
    }
}

# scevan was done in mice as well so have to loop over all of the groups
for (group in c("patient_prim", "patient_mets",
                "mm_prim", "mm_mets",
                "dogs_prim", "dogs_mets")) {
    object <- qs::qread(str_c("output/seurat_objects/harmony_sobjs_annot/",
                              group,
                              ".qs"))

    #add scevan label
    scevan_label <- 
        readr::read_tsv(str_c("output/id_tumor/SCEVAN/",
                            group,
                            "_metadata.tsv")) %>%
        column_to_rownames("cell")
    object <- 
        object %>%
        AddMetaData(metadata = scevan_label)

    #loop over individual  samples to plot and save
    for (samples in unique(object$sample_name)) {
        sub_sobj <- 
            subset(object, sample_name == samples) %>%
            process_seurat()

        # check if CNV_status is present and if all of them are NA, cannot plot
        if (all(!is.na(sub_sobj$scevan_tumor_call))) {
            scevan1 <- 
                dimplot_better(sub_sobj,
                                group_by = "scevan_tumor_call") +
                    NoLegend()
        } else {
            scevan1 <- 
                ggplot(data = NULL) +
                    aes(x = as.factor(1), y = as.factor(1)) +
                    geom_text(aes(label = str_c("scevan_tumor_call not present for ", samples)))
        }

        scevan2 <- 
            dimplot_better(sub_sobj,
                            group_by = "new_annot_clust") +
                NoLegend()

        # patchwork the plot for scatomic
        dimplot_sub_sobj <- 
            patchwork::wrap_plots(scevan1,
                                scevan2,
                                ncol = 2) +
                patchwork::plot_annotation(title = samples)

        # save the plot for scatomic
        ggsave(str_c("output/figures/scevan/",
                        group, "/",
                        samples,
                        "_dimplot.png"),
                plot = dimplot_sub_sobj,
                width = 14,
                height = 7)
    }
}
```

## create the snv calling metadata and save it
```{r snv_calling}
# path to snv result metadata in Matts repo
snv_result_path <-
    #"/gpfs0/home2/gdrobertslab/lab/Analysis/Yogesh/CellTypeAnnRefs/output/id_tumor/snvs/"
    "/gpfs0/home2/gdrobertslab/lab/Analysis/Matt/24_Osteo_atlas/output/id_tumor/snvs/"
snv_depth <-
    read_tsv("misc/use_snv_tumor_calls.txt")

for (group in c("patient_prim", "patient_mets",
                "mm_prim", "mm_mets",
                "dogs_prim", "dogs_mets")) {
    object <- 
        qs::qread(str_c("output/seurat_objects/harmony_sobjs_annot/",
                        group,
                        ".qs"))

    #make a list of the samples
    metadata_list <- list()

    # read in the cmetadata
    for (samples in unique(object$sample_name)) {
        sobj <- subset(object, sample_name == samples)

        tsv_file <- str_c(snv_result_path,
                        samples,
                        "_snp_calls.tsv")
        if (file.exists(tsv_file)) {
            pick_depth <- 
                snv_depth %>%
                filter(sample_name == samples) %>%
                pull(use_snvs_depth)
            snv_metadata <-
                readr::read_tsv(tsv_file) %>%
                mutate(barcode = paste(samples, cell, sep = "_")) %>%
                select(barcode, paste0("snp_min_depth_",pick_depth)) %>%
                filter(unique(barcode) %in% colnames(sobj)) %>%
                dplyr::rename(final_snv_call = paste0("snp_min_depth_",pick_depth),
                              cell = barcode) %>%
                mutate(final_snv_call = if_else(final_snv_call == "tumor",
                                                "cancer_cells",
                                                "normal_cells") %>%
                      tidyr::replace_na(replace = "unknown"))

        metadata_list[[samples]] <- snv_metadata
        }
    }
    dplyr::bind_rows(metadata_list) %>%
        write_tsv(str_c("output/id_tumor/snv_calling/",
                        group,
                        "_metadata.tsv"))
}


```