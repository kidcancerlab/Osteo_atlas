
## Regulons analysis tumor

Perform the regulon analysis using the SCENIC package. The regulon analysis is 
performed on the following groups:

```{r regulon_analysis, eval = FALSE}
#load the motif annotations
data(list="motifAnnotations_hgnc", package="RcisTarget")
motifAnnotations_hgnc <- motifAnnotations

data(list="motifAnnotations_mgi", package="RcisTarget")
motifAnnotations_mgi <- motifAnnotations

# list of groups to analyze
object_list <-
    tribble(~group,                         ~res_value, ~org,
            "patient_prim_cancer_cells",    0.3,        "hgnc",
            "patient_mets_cancer_cells",    0.35,        "hgnc",
            "mm_prim_cancer_cells",         0.9,        "mgi",
            "mm_mets_cancer_cells",         0.7,        "mgi",
            "xeno_prim_human_cancer_cells",   0.3,        "hgnc",
            "xeno_mets_human_cancer_cells",   0.4,        "hgnc",
            "dogs_prim_cancer_cells",       0.2,        "hgnc",
            "dogs_mets_cancer_cells",       0.45,        "hgnc"
            )

for (i in seq_len(nrow(object_list))) {
    group <- object_list$group[i]
    res_value <- object_list$res_value[i]
    org <- object_list$org[i]

    object <- 
        qs::qread(str_c("output/seurat_objects/final_tumor_vs_stroma/",
                        group,
                        ".qs"))

    # dimplot <- dimplot_better(object, group_by = "Ann_Level3")
    GRA_output <-
        Run_GRA(sobject = object,
                idents = "Ann_Level3",
                org = org,
                group = group,
                subset = "yes",
                subset_cell_number = min(5000, ncol(object)))

    exprMat_log <- GRA_output$exprMat_log
    colVars <- GRA_output$colVars
    cellInfo <- GRA_output$cellInfo
    scenicOptions <- GRA_output$scenicOptions

    perplexity <- c(5, 15, 50)
    num_pcs <- 30

    regulon_auc <- loadInt(scenicOptions, "aucell_regulonAUC")
    regulon_auc <- regulon_auc[onlyNonDuplicatedExtended(rownames(regulon_auc)),]
    regulon_activity_scaled <-
        sapply(split(rownames(cellInfo), cellInfo$CellType),
                function(cells) {
                    rowMeans(AUCell::getAUC(regulon_auc)[ , cells, drop = FALSE])
                }) %>%
        t() %>%
        scale(center = FALSE, scale = TRUE) %>%
        t()

    #save the regulon activity
    if (!dir.exists(str_c("output/figures/regulon_analysis/", group))) {
        dir.create(str_c("output/figures/regulon_analysis/", group),
                    recursive = TRUE)
    }
    #save the regulon activity
    qs::qsave(regulon_activity_scaled,
              str_c("output/figures/regulon_analysis/",
                    group,
                    "/regulon_activity_scaled.qs"))
    #save the regulon activity
    write_tsv(as.data.frame(regulon_activity_scaled),
               str_c("output/figures/regulon_analysis/",
                     group,
                     "/regulon_activity_scaled.tsv"))
    
    #save the heatmap
    if (!dir.exists(str_c("output/figures/regulon_analysis/", group))) {
        dir.create(str_c("output/figures/regulon_analysis/", group),
                    recursive = TRUE)
    }
    #make heatmap to show average regulon activity per cell type or cluster
    average_reg_heatmap <- 
        pheatmap::pheatmap(regulon_activity_scaled,
                        name = "Regulon activity",
                        scale = "none",
                        cluster_cols = TRUE,
                        show_row_dend = FALSE,
                        silent = TRUE)
    plot_height <- 
        ceiling(nrow(regulon_activity_scaled)/4)

    plot_width <- 
        ceiling(ncol(regulon_activity_scaled)/1.3)

    ggsave(str_c(filename = "output/figures/regulon_analysis/",
                            group,
                            "/average_reg_heatmap.png"),
            plot = average_reg_heatmap,
            width = plot_width,
            height = plot_height)
    #save qs object
    qs::qsave(average_reg_heatmap,
              str_c("output/figures/regulon_analysis/",
                    group,
                    "/average_reg_heatmap.qs"))
}
#     # Binarize the regulon activity
#     min_prop <- .4
#     binary_regulon_activity <-
#         loadInt(scenicOptions, "aucell_binary_nonDupl")

#     cell_info_binarized_cells <-
#         cellInfo[which(rownames(cellInfo) %in%
#                    colnames(binary_regulon_activity)), ,
#                  drop = FALSE]

#     regulon_activity_by_cell_type_binarized <-
#         sapply(split(rownames(cell_info_binarized_cells),
#                      cell_info_binarized_cells$CellType),
#                function(cells) {
#                     rowMeans(binary_regulon_activity[, cells, drop = FALSE])
#                 })

#     binary_activity_perc_subset <-
#         regulon_activity_by_cell_type_binarized[which(
#             rowSums(regulon_activity_by_cell_type_binarized > min_prop) > 0),]

#     # Percentage of cells per each cluster that have the regulon activity
#     binarized_heatmap <-
#         pheatmap::pheatmap(binary_activity_perc_subset,
#                             name = "Regulon activity",
#                             col = c("white", "pink", "red"),
#                             display_numbers = T,
#                             cluster_cols = FALSE,
#                             silent = TRUE,
#                             legend_title = "Percent Cells")

#     plot_height <-
#         ceiling(nrow(binary_activity_perc_subset)/3)
#     plot_width <-
#         ceiling(ncol(binary_activity_perc_subset)/1.2)

#     #save the heatmap
#     if (!dir.exists(str_c("output/figures/regulon_analysis/", group))) {
#         dir.create(str_c("output/figures/regulon_analysis/", group))
#     }
#     ggsave(str_c("output/figures/regulon_analysis/",
#                  group,
#                  "/binarized_heatmap.png"),
#            plot = binarized_heatmap,
#            width = plot_width,
#            height = plot_height)

#     #save qs object
#     qs::qsave(binarized_heatmap,
#               str_c("output/figures/regulon_analysis/",
#                     group,
#                     "/binarized_heatmap.qs"))

```

## regulons analysis TAMs
```{r regulon_analysis, eval = FALSE}
#load the motif annotations
data(list="motifAnnotations_hgnc", package="RcisTarget")
motifAnnotations_hgnc <- motifAnnotations

data(list="motifAnnotations_mgi", package="RcisTarget")
motifAnnotations_mgi <- motifAnnotations

object_list <-
    tribble(~group,                         ~res_value, ~org,
            # "patient_prim_normal_cells",    0.15,        "hgnc",
            # "patient_mets_normal_cells",    0.15,        "hgnc",
            # "mm_prim_normal_cells",         0.4,        "mgi",
            # "mm_mets_normal_cells",         0.25,        "mgi",
            # "xeno_prim_mouse",              0.3,        "mgi",
            "xeno_mets_mouse",              0.15,        "mgi",
            "dogs_prim_normal_cells",       0.2,        "hgnc",
            "dogs_mets_normal_cells",       0.1,        "hgnc")

for (i in seq_len(nrow(object_list))) {
    group <- object_list$group[i]
    res_value <- object_list$res_value[i]
    org <- object_list$org[i]

    object_big <-
        qs::qread(str_c("output/seurat_objects/stromal_subtypes/",
                      group, "/",
                      "Immune_Myeloid",
                      ".qs"))
    TAMs_sub <-
        grep("TAMs", object_big$Ann_Level3, value = TRUE) %>%
        unique()
    # subset the object to only include the TAMs subtypes
    object <- 
        subset(object_big, Ann_Level3 %in% TAMs_sub) %>%
        process_seurat()
    # dimplot <- dimplot_better(object, group_by = "Ann_Level3")
    GRA_output <-
        Run_GRA(sobject = object,
                idents = "Ann_Level3",
                group = group,
                org = org,
                subset = "yes",
                subset_cell_number = min(5000, ncol(object)))

    exprMat_log <- GRA_output$exprMat_log
    colVars <- GRA_output$colVars
    cellInfo <- GRA_output$cellInfo
    scenicOptions <- GRA_output$scenicOptions

    perplexity <- c(5, 15, 50)
    num_pcs <- 30

    regulon_auc <- loadInt(scenicOptions, "aucell_regulonAUC")
    regulon_auc <- regulon_auc[onlyNonDuplicatedExtended(rownames(regulon_auc)),]
    regulon_activity_scaled <-
        sapply(split(rownames(cellInfo), cellInfo$CellType),
                function(cells) {
                    rowMeans(AUCell::getAUC(regulon_auc)[ , cells, drop = FALSE])
                }) %>%
        t() %>%
        scale(center = FALSE, scale = TRUE) %>%
        t()

    #save the regulon activity
    if (!dir.exists(str_c("output/figures/regulon_analysis/", group))) {
        dir.create(str_c("output/figures/regulon_analysis/", group))
    }
    #save the regulon activity
    qs::qsave(regulon_activity_scaled,
              str_c("output/figures/regulon_analysis/",
                    group,
                    "/regulon_activity_scaled.qs"))
    #save the regulon activity
    write_tsv(as.data.frame(regulon_activity_scaled),
               str_c("output/figures/regulon_analysis/",
                     group,
                     "/regulon_activity_scaled.tsv"))
    
    #save the heatmap
    if (!dir.exists(str_c("output/figures/regulon_analysis/", group))) {
        dir.create(str_c("output/figures/regulon_analysis/", group))
    }
    #make heatmap to show average regulon activity per cell type or cluster
    average_reg_heatmap <- 
        pheatmap::pheatmap(regulon_activity_scaled,
                        name = "Regulon activity",
                        scale = "none",
                        cluster_cols = TRUE,
                        show_row_dend = FALSE,
                        silent = TRUE)
    plot_height <- 
        ceiling(nrow(regulon_activity_scaled)/4)

    plot_width <- 
        ceiling(ncol(regulon_activity_scaled)/1.3)

    ggsave(str_c(filename = "output/figures/regulon_analysis/",
                            group,
                            "/average_reg_heatmap.png"),
            plot = average_reg_heatmap,
            width = plot_width,
            height = plot_height)
    #save qs object
    ggsave(str_c(filename = "output/figures/regulon_analysis/",
                            group,
                            "/average_reg_heatmap.pdf"),
            plot = average_reg_heatmap,
            width = plot_width,
            height = plot_height) }

    # Binarize the regulon activity
#     min_prop <- .4
#     binary_regulon_activity <-
#         loadInt(scenicOptions, "aucell_binary_nonDupl")

#     cell_info_binarized_cells <-
#         cellInfo[which(rownames(cellInfo) %in%
#                    colnames(binary_regulon_activity)), ,
#                  drop = FALSE]

#     regulon_activity_by_cell_type_binarized <-
#         sapply(split(rownames(cell_info_binarized_cells),
#                      cell_info_binarized_cells$CellType),
#                function(cells) {
#                     rowMeans(binary_regulon_activity[, cells, drop = FALSE])
#                 })

#     binary_activity_perc_subset <-
#         regulon_activity_by_cell_type_binarized[which(
#             rowSums(regulon_activity_by_cell_type_binarized > min_prop) > 0),]

#     # Percentage of cells per each cluster that have the regulon activity
#     binarized_heatmap <-
#         pheatmap::pheatmap(binary_activity_perc_subset,
#                             name = "Regulon activity",
#                             col = c("white", "pink", "red"),
#                             display_numbers = T,
#                             cluster_cols = FALSE,
#                             silent = TRUE,
#                             legend_title = "Percent Cells")

#     plot_height <-
#         ceiling(nrow(binary_activity_perc_subset)/3)
#     plot_width <-
#         ceiling(ncol(binary_activity_perc_subset)/1.2)

#     #save the heatmap
#     if (!dir.exists(str_c("output/figures/regulon_analysis/", group))) {
#         dir.create(str_c("output/figures/regulon_analysis/", group))
#     }
#     ggsave(str_c("output/figures/regulon_analysis/",
#                  group,
#                  "/binarized_heatmap.png"),
#            plot = binarized_heatmap,
#            width = plot_width,
#            height = plot_height)

#     #save qs object
#     ggsave(str_c("output/figures/regulon_analysis/",
#                  group,
#                  "/binarized_heatmap.pdf"),
#            plot = binarized_heatmap,
#            width = plot_width,
#            height = plot_height)
}

```


## regulon combined plots heatmap tumor
```{r hatmap_regulon, eval = TRUE}
# create a list of the groups
regulon_list <- list()
# load the regulon activity saved data
for (group in c("patient_prim_cancer_cells",
                "patient_mets_cancer_cells",
                "mm_prim_cancer_cells",
                "mm_mets_cancer_cells",
                "xeno_prim_human_cancer_cells",
                "xeno_mets_human_cancer_cells",
                "dogs_prim_cancer_cells",
                "dogs_mets_cancer_cells"
                )) {
    name <- 
        group %>%
        str_remove("_cancer_cells")
    #load the regulon activity
    regulon_activity_scaled <-
        qs::qread(str_c("output/figures/regulon_analysis/",
                        group,
                        "/regulon_activity_scaled.qs"))

    # append to the list
    regulon_activity_formatted <- 
        regulon_activity_scaled %>%
        as.data.frame() %>%
        rownames_to_column("Regulon") %>%
        { if ("Stressed" %in% colnames(.)) rename(., COMA = Stressed) else . } %>%
        mutate(Regulon = str_replace(Regulon, " .*", "")) %>%
        mutate(Regulon = str_replace(Regulon, "_.*", "")) %>%
        mutate(Regulon = str_replace(Regulon, "\\(.*\\)", "")) %>%
        dplyr::rename_with(~ str_remove(., "Tumor_")) %>%
            rename_with(~ paste0(name, "_", .), -Regulon)
    # add the group name
    regulon_list[[group]] <- regulon_activity_formatted
}

# combine the list into a single data frame and make a single heatmap
object_list <-
    tribble(~group1,                         ~group2,                       ~group3,
            "patient_prim_cancer_cells",    "patient_mets_cancer_cells",   "Human_Patients",
            "mm_prim_cancer_cells",         "mm_mets_cancer_cells",         "Syngeneic_Mouse",
            "dogs_prim_cancer_cells",       "dogs_mets_cancer_cells",       "Canine_Patients",
            "xeno_prim_human_cancer_cells", "xeno_mets_human_cancer_cells",  "Human Patient_Xenograft")

# make the color labels
col_colors1 <- 
    c("Primary" = "#BF6BE2FF",
        "Metastatic" = "#69D1F3FF")

# subpopulation  colors
col_colors2 <- 
    c(MP_Progenitor = "#D43F3AFF",
    Fibrogenic = "#EEA236FF",
    Basal_Progenitor = "#357EBDFF",
    Proliferative = "#5CB85CFF",
    Interactive = "#B8B8B8FF",
    COMA = "#9632B8FF")

col_colors <- 
    list(Group = col_colors1,
        Subpopulation = col_colors2)

order_regulons <-
    list(early_genes =  c("MAZ", "PRDM1", "HMGA2", "PBX1", "SOX4", "E2F1", "SPI1", 
                            "IKZF1", "IKZF2", "TCF7L2", "NR2F2", "ELF2", "E2f1", "Fli1", "Pbx1"),
        intermediate_genes = c("MAFB", "YY1", "BACH1", "NFIA", "ETS1", "ETV6", "NR3C1", "ZEB1", "ESRRG",
                                "Mafb", "Ets1", "Elk3", "Irf8", "Irf7", "Stat2","Nfkb2"),
        late_genes = c("CREB3L1", "STAT1", "CEBPD", "JUND", "JUNB", "FOSB", "FOSL2", "NFKB1", "REL",
                        "SREBF2", "FOS", "CEBPB",  "ATF4", "Atf4", "Nfkb1", "Rel",
                        "Cebpd", "Cebpb", "Srebf2", "Stat1", "Stat3", "Fosl1",  "Jund", "Jun"))
            

shared_all <- list()

# make the regulon heatmap
for (i in seq_len(nrow(object_list))) {
    group1 <- object_list$group1[i]
    group2 <- object_list$group2[i]
    group3 <- object_list$group3[i]

    # combine the data frames
    output <-
        regulon_list[[group1]] %>%
        full_join(regulon_list[[group2]], by = "Regulon") %>%
         replace(is.na(.), 0) %>%
        column_to_rownames("Regulon") %>%
        as.matrix()

    # make the column colors
    col_colors_df <-
        output %>%
        colnames() %>%
        tibble(col = .) %>%
        mutate(Group = if_else(str_detect(col, "prim"), "Primary", "Metastatic"),
            Subpopulation = case_when(
                str_detect(col, "Basal_Progenitor") ~ "Basal_Progenitor",
                str_detect(col, "Proliferative") ~ "Proliferative",
                str_detect(col, "MP_Progenitor") ~ "MP_Progenitor",
                str_detect(col, "Fibrogenic") ~ "Fibrogenic",
                str_detect(col, "Interactive") ~ "Interactive",
                str_detect(col, "COMA") ~ "COMA",
                TRUE ~ "Unknown")) %>%
        column_to_rownames("col")

# make a heatmap to show average regulon activity per cell type or cluster
    # Order output columns by subpopulations
    output <-
        output[, order(
            str_detect(colnames(output), "Interactive"),
            str_detect(colnames(output), "Fibrogenic"), 
            str_detect(colnames(output), "COMA"),
            str_detect(colnames(output), "MP_Progenitor"),
            str_detect(colnames(output), "Proliferative"),
            str_detect(colnames(output), "Basal_Progenitor"),
            decreasing = TRUE
        )]


    regulon_activity_heatmap_all <-
        pheatmap::pheatmap(output,
                        name = "Regulon activity",
                        scale = "none",
                        annotation_col = col_colors_df,
                        annotation_colors = col_colors,
                        cluster_cols = FALSE,
                        show_row_dend = FALSE,
                        silent = TRUE,
                        labels_col = NULL,
                        labels_row = NULL)

    if (!dir.exists("output/figures/Final_Annotations/results2/suppliment/regulons/")) {
        dir.create("output/figures/Final_Annotations/results2/suppliment/regulons/",
                    recursive = TRUE)
    }
    ggsave(str_c("output/figures/Final_Annotations/results2/suppliment/regulons/",
                group3, "_regulon.pdf"),
        plot = regulon_activity_heatmap_all,
        width = 10,
        height = 15)
    ggsave(str_c("output/figures/Final_Annotations/results2/suppliment/regulons/",
                group3, "_regulon.png"),
        plot = regulon_activity_heatmap_all,
        width = 10,
        height = 15)

    # remove the NAs
    output_shared_TF <-
        output %>%
        apply(1, function(x) {
            min(x) > 0
        })
    output_shared <-
        output[output_shared_TF, ] %>%
            .[, order(
                str_detect(colnames(.), "Interactive"),
                str_detect(colnames(.), "Fibrogenic"), 
                str_detect(colnames(.), "COMA"),
                str_detect(colnames(.), "MP_Progenitor"),
                str_detect(colnames(.), "Proliferative"),
                str_detect(colnames(.), "Basal_Progenitor"),
                decreasing = TRUE
            )]

    # # order the regulons
    # output_shared <-
    #     output_shared[order(
    #         match(rownames(output_shared), order_regulons$early_genes),
    #         match(rownames(output_shared), order_regulons$intermediate_genes),
    #         match(rownames(output_shared), order_regulons$late_genes)
    #     ), ]

    regulon_activity_heatmap_shared <-
        pheatmap::pheatmap(output_shared,
                            name = "Regulon activity",
                            scale = "none",
                            annotation_col = col_colors_df,
                            annotation_colors = col_colors,
                            cluster_cols = FALSE,
                            cluster_rows = TRUE,
                            show_row_dend = FALSE,
                            main = str_c(group3, " Regulon activity"))


    ggsave(str_c("output/figures/Final_Annotations/results2/suppliment/regulons/",
                group3, "_regulon_shared.pdf"),
        plot = regulon_activity_heatmap_shared,
        width = 10,
        height = 8)
    ggsave(str_c("output/figures/Final_Annotations/results2/suppliment/regulons/",
                group3, "_regulon_shared.png"),
        plot = regulon_activity_heatmap_shared,
        width = 10,
        height = 8)

}


# unique shared regulons
shared_all_unlist <-
    shared_all %>%
    unlist() %>%
    unique()

order_regulons <-
    list(early_genes =  c("MAZ", "PRDM1", "HMGA2", "PBX1", "SOX4", "E2F1", "SPI1", 
                            "IKZF1", "IKZF2", "TCF7L2", "NR2F2", "ELF2", "E2f1", "Fli1", "Pbx1"),
        intermediate_genes = c("MAFB", "YY1", "BACH1", "NFIA", "ETS1", "ETV6", "NR3C1", "ZEB1", "ESRRG",
                                "Mafb", "Ets1", "Elk3", "Irf8", "Irf7", "Stat2","Nfkb2"),
        late_genes = c("CREB3L1", "STAT1", "CEBPD", "JUND", "JUNB", "FOSB", "FOSL2", "NFKB1", "REL",
                        "SREBF2", "FOS", "CEBPB",  "ATF4", "Atf4", "Nfkb1", "Rel",
                        "Cebpd", "Cebpb", "Srebf2", "Stat1", "Stat3", "Fosl1",  "Jund", "Jun"))

"Nfkb2"  "Fosl1"  "Rel"    "Mafb"   "Irf8"   "Fli1"   "Irf7"   "Stat2" 
 [9] "Stat1"  "Stat3"  "Nfkb1"  "Srebf2" "E2f1"   "Elk3"   "Ets1"   "Cebpb" 
[17] "Atf4"   "Jund"   "Jun"    "Cebpd"  "Pbx1"

mouse <-
    c("Elk3", "Nfkb1" "Cebpb", "Jund", "Jun")


# want to see the regulons that are unique to each sites across species
prim_shared <- list()
mets_shared <- list()
# make the regulon heatmap
for (i in seq_len(nrow(object_list))) {
    group1 <- object_list$group1[i]
    group2 <- object_list$group2[i]
    group3 <- object_list$group3[i]

    # combine the data frames
    output <-
        regulon_list[[group1]] %>%
        full_join(regulon_list[[group2]], by = "Regulon") %>%
         replace(is.na(.), 0) %>%
        column_to_rownames("Regulon") %>%
        as.matrix()

    if (group1 == "mm_prim_cancer_cells"){
        output <- 
            output %>%
            {rownames(.) <- nichenetr::convert_mouse_to_human_symbols(rownames(.))
            .
            }
    }

    # get the primary specific regulons
    prim_shared[[group3]] <- 
        output %>%
        as.data.frame() %>%
        rownames_to_column("Regulon") %>%
        select(Regulon, matches("prim")) %>%
        column_to_rownames("Regulon") %>%
        filter(rowSums(across(everything())) > 0)
    
    # get the metastatic specific regulons
    mets_shared[[group3]] <-
        output %>%
        as.data.frame() %>%
        rownames_to_column("Regulon") %>%
        select(Regulon, matches("mets")) %>%
        column_to_rownames("Regulon") %>%
        filter(rowSums(across(everything())) > 0)   
}


Reduce(union, lapply(prim_shared, rownames)) %>%
    {.[table(unlist(lapply(prim_shared, rownames)))[.] >= (length(prim_shared)/2)]}

mets_all <- 
    Reduce(union, lapply(mets_shared, rownames)) %>%
        {.[table(unlist(lapply(mets_shared, rownames)))[.] >= (length(mets_shared)/2)]}


```


## regulon combined plots heatmap TAMs

## regulon combined plots heatmap tumor
```{r hatmap_regulon_TAMs, eval = TRUE}
# create a list of the groups
regulon_list <- list()

# load the regulon activity saved data
for (group in c("patient_prim_normal_cells",
                "patient_mets_normal_cells"
                # "mm_prim_normal_cells",
                # "mm_mets_normal_cells",
                # "xeno_prim_mouse",
                # "xeno_mets_mouse",
                # "dogs_prim_normal_cells",
                # "dogs_mets_normal_cells"
                )) {
    name <- 
        group %>%
        str_remove("_normal_cells")
    #load the regulon activity
    regulon_activity_scaled <-
        qs::qread(str_c("output/figures/regulon_analysis/",
                        group,
                        "/regulon_activity_scaled.qs"))

    # append to the list
    regulon_activity_formatted <- 
        regulon_activity_scaled %>%
        as.data.frame() %>%
        rownames_to_column("Regulon") %>%
        { if ("TAMs" %in% colnames(.)) rename(., `General_TAMs` = TAMs) else . } %>%
        mutate(Regulon = str_replace(Regulon, " .*", "")) %>%
        mutate(Regulon = str_replace(Regulon, "_.*", "")) %>%
        mutate(Regulon = str_replace(Regulon, "\\(.*\\)", "")) %>%
        dplyr::rename_with(~ str_remove(., "Tumor_")) %>%
            rename_with(~ paste0(name, "_", .), -Regulon)
        
    
    # add the group name
    regulon_list[[group]] <- regulon_activity_formatted
}

# combine the list into a single data frame and make a single heatmap
object_list <-
    tribble(~group1,                         ~group2,                       ~group3,
            "patient_prim_normal_cells",    "patient_mets_normal_cells",   "Human_Patients_TAMs",
            "mm_prim_normal_cells",         "mm_mets_normal_cells",         "Syngeneic_Mouse_TAMs",
            "dogs_prim_normal_cells",       "dogs_mets_normal_cells",       "Canine_Patients_TAMs",
            "xeno_prim_mouse",              "xeno_mets_mouse",  "Human Patient_Xenograft_TAMs")

# make the color labels
col_colors1 <- 
    c("Primary" = "#BF6BE2FF",
        "Metastatic" = "#69D1F3FF")

# subpopulation  colors
col_colors2 <- 
    c(`Fibrogenic TAMs` = "#FF0060",
      `IFN TAMs` = "#9632B8FF",
      `Inflam TAMs` = "#46B8DAFF",
      `Osteoclast TAMs` = "#3E7E3EFF",
      `Prolif TAMs` = "#6D1D87FF",
      `Scar TAMs` = "#097F9AFF",
      `General TAMs` = "#CDCDCDFF")

col_colors <- 
    list(Group = col_colors1,
         Subpopulation = col_colors2)

shared_all <- list()

# make the regulon heatmap
for (i in seq_len(nrow(object_list))) {
    group1 <- object_list$group1[i]
    group2 <- object_list$group2[i]
    group3 <- object_list$group3[i]

    # combine the data frames
    output <-
        regulon_list[[group1]] %>%
        full_join(regulon_list[[group2]], by = "Regulon") %>%
         replace(is.na(.), 0) %>%
        column_to_rownames("Regulon") %>%
        as.matrix()

    # make the column colors
    col_colors_df <-
        output %>%
        colnames() %>%
        tibble(col = .) %>%
        mutate(Group = if_else(str_detect(col, "prim"), "Primary", "Metastatic"),
            Subpopulation = case_when(
                str_detect(col, "Fibrogenic") ~ "Fibrogenic TAMs",
                str_detect(col, "IFN") ~ "IFN TAMs",
                str_detect(col, "Inflam") ~ "Inflam TAMs",
                str_detect(col, "Osteoclast") ~ "Osteoclast TAMs",
                str_detect(col, "Prolif") ~ "Prolif TAMs",
                str_detect(col, "Scar") ~ "Scar TAMs",
                str_detect(col, "General") ~ "General TAMs",
                TRUE ~ "Unknown")) %>%
            column_to_rownames("col")

# make a heatmap to show average regulon activity per cell type or cluster
    # Order output columns by subpopulations
    output <-
        output[, order(
            str_detect(colnames(output), "Osteoclast"),
            str_detect(colnames(output), "Fibrogenic"),
            str_detect(colnames(output), "IFN"),
            str_detect(colnames(output), "Inflam"),
            str_detect(colnames(output), "Scar"),
            str_detect(colnames(output), "Prolif"),
            str_detect(colnames(output), "General"),
            decreasing = TRUE
        )]

    regulon_activity_heatmap_all <-
        pheatmap::pheatmap(output,
                        name = "Regulon activity",
                        scale = "none",
                        annotation_col = col_colors_df,
                        annotation_colors = col_colors,
                        cluster_cols = FALSE,
                        show_row_dend = FALSE,
                        silent = TRUE,
                        labels_col = NULL,
                        labels_row = NULL)

    if (!dir.exists("output/figures/Final_Annotations/results2/suppliment/regulons/")) {
        dir.create("output/figures/Final_Annotations/results2/suppliment/regulons/",
                    recursive = TRUE)
    }
    ggsave(str_c("output/figures/Final_Annotations/results2/suppliment/regulons/",
                group3, "_regulon.pdf"),
        plot = regulon_activity_heatmap_all,
        width = 10,
        height = 15)
    ggsave(str_c("output/figures/Final_Annotations/results2/suppliment/regulons/",
                group3, "_regulon.png"),
        plot = regulon_activity_heatmap_all,
        width = 10,
        height = 15)

    # remove the NAs
    output_shared_TF <-
        output %>%
        apply(1, function(x) {
            min(x) > 0
        })
    output_shared <-
        output[output_shared_TF, ] %>%
            .[, order(
                str_detect(colnames(.), "Osteoclast"),
                str_detect(colnames(.), "Fibrogenic"),
                str_detect(colnames(.), "IFN"),
                str_detect(colnames(.), "Inflam"),
                str_detect(colnames(.), "Scar"),
                str_detect(colnames(.), "Prolif"),
                str_detect(colnames(.), "General"),
                decreasing = TRUE
            )]

    # # order the regulons
    # output_shared <-
    #     output_shared[order(
    #         match(rownames(output_shared), order_regulons$early_genes),
    #         match(rownames(output_shared), order_regulons$intermediate_genes),
    #         match(rownames(output_shared), order_regulons$late_genes)
    #     ), ]

    regulon_activity_heatmap_shared <-
        pheatmap::pheatmap(output_shared,
                            name = "Regulon activity",
                            scale = "none",
                            annotation_col = col_colors_df,
                            annotation_colors = col_colors,
                            cluster_cols = FALSE,
                            cluster_rows = TRUE,
                            show_row_dend = FALSE,
                            silent = TRUE,
                            main = str_c(group3, " Regulon activity"))

    ggsave(str_c("output/figures/Final_Annotations/results2/suppliment/regulons/",
                group3, "_regulon_shared.pdf"),
        plot = regulon_activity_heatmap_shared,
        width = 10,
        height = 8)
    ggsave(str_c("output/figures/Final_Annotations/results2/suppliment/regulons/",
                group3, "_regulon_shared.png"),
        plot = regulon_activity_heatmap_shared,
        width = 10,
        height = 8)

}