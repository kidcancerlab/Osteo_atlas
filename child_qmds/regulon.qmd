
## Regulons analysis

Perform the regulon analysis using the SCENIC package. The regulon analysis is 
performed on the following groups:

```{r regulon_analysis, eval = FALSE}
#load the motif annotations
data(list="motifAnnotations_hgnc", package="RcisTarget")
motifAnnotations_hgnc <- motifAnnotations

data(list="motifAnnotations_mgi", package="RcisTarget")
motifAnnotations_mgi <- motifAnnotations

object_list <-
    tribble(~group,                         ~res_value, ~org,
            "patient_prim_cancer_cells",    0.15,        "hgnc",
            "patient_mets_cancer_cells",    0.15,        "hgnc",
            "mm_prim_cancer_cells",         0.4,        "mgi",
            "mm_mets_cancer_cells",         0.25,        "mgi",
            "xeno_prim_human",              0.3,        "hgnc",
            "xeno_mets_human",              0.15,        "hgnc",
            "dogs_prim_cancer_cells",       0.2,        "hgnc",
            "dogs_mets_cancer_cells",       0.1,        "hgnc")

for (i in seq_len(nrow(object_list))) {
    group <- object_list$group[i]
    res_value <- object_list$res_value[i]
    org <- object_list$org[i]

    object <- 
        qs::qread(str_c("output/seurat_objects/final_tumor_vs_stroma/",
                        group,
                        ".qs")) %>%
        FindClusters(resolution = res_value)

    # dimplot <- dimplot_better(object, group_by = "Ann_Level3")
    GRA_output <-
        Run_GRA(sobject = object,
                idents = "Ann_Level3",
                org = org,
                subset = "yes",
                subset_cell_number = min(10000, ncol(object)))

    exprMat_log <- GRA_output$exprMat_log
    colVars <- GRA_output$colVars
    cellInfo <- GRA_output$cellInfo
    scenicOptions <- GRA_output$scenicOptions

    perplexity <- c(5, 15, 50)
    num_pcs <- 30

    regulon_auc <- loadInt(scenicOptions, "aucell_regulonAUC")
    regulon_auc <- regulon_auc[onlyNonDuplicatedExtended(rownames(regulon_auc)),]
    regulon_activity_scaled <-
        sapply(split(rownames(cellInfo), cellInfo$CellType),
                function(cells) {
                    rowMeans(AUCell::getAUC(regulon_auc)[ , cells, drop = FALSE])
                }) %>%
        t() %>%
        scale(center = FALSE, scale = TRUE) %>%
        t()

    #save the regulon activity
    if (!dir.exists(str_c("output/figures/regulon_analysis/", group))) {
        dir.create(str_c("output/figures/regulon_analysis/", group))
    }
    #save the regulon activity
    qs::qsave(regulon_activity_scaled,
              str_c("output/figures/regulon_analysis/",
                    group,
                    "/regulon_activity_scaled.qs"))
    #save the regulon activity
    write_tsv(as.data.frame(regulon_activity_scaled),
               str_c("output/figures/regulon_analysis/",
                     group,
                     "/regulon_activity_scaled.tsv"))
    
    #save the heatmap
    if (!dir.exists(str_c("output/figures/regulon_analysis/", group))) {
        dir.create(str_c("output/figures/regulon_analysis/", group))
    }
    #make heatmap to show average regulon activity per cell type or cluster
    average_reg_heatmap <- 
        pheatmap::pheatmap(regulon_activity_scaled,
                        name = "Regulon activity",
                        scale = "none",
                        cluster_cols = TRUE,
                        show_row_dend = FALSE,
                        silent = TRUE)
    plot_height <- 
        ceiling(nrow(regulon_activity_scaled)/4)

    plot_width <- 
        ceiling(ncol(regulon_activity_scaled)/1.3)

    ggsave(str_c(filename = "output/figures/regulon_analysis/",
                            group,
                            "/average_reg_heatmap.png"),
            plot = average_reg_heatmap,
            width = plot_width,
            height = plot_height)
    #save qs object
    qs::qsave(average_reg_heatmap,
              str_c("output/figures/regulon_analysis/",
                    group,
                    "/average_reg_heatmap.qs"))

    # Binarize the regulon activity
    min_prop <- .4
    binary_regulon_activity <-
        loadInt(scenicOptions, "aucell_binary_nonDupl")

    cell_info_binarized_cells <-
        cellInfo[which(rownames(cellInfo) %in%
                   colnames(binary_regulon_activity)), ,
                 drop = FALSE]

    regulon_activity_by_cell_type_binarized <-
        sapply(split(rownames(cell_info_binarized_cells),
                     cell_info_binarized_cells$CellType),
               function(cells) {
                    rowMeans(binary_regulon_activity[, cells, drop = FALSE])
                })

    binary_activity_perc_subset <-
        regulon_activity_by_cell_type_binarized[which(
            rowSums(regulon_activity_by_cell_type_binarized > min_prop) > 0),]

    # Percentage of cells per each cluster that have the regulon activity
    binarized_heatmap <-
        pheatmap::pheatmap(binary_activity_perc_subset,
                            name = "Regulon activity",
                            col = c("white", "pink", "red"),
                            display_numbers = T,
                            cluster_cols = FALSE,
                            silent = TRUE,
                            legend_title = "Percent Cells")

    plot_height <-
        ceiling(nrow(binary_activity_perc_subset)/3)
    plot_width <-
        ceiling(ncol(binary_activity_perc_subset)/1.2)

    #save the heatmap
    if (!dir.exists(str_c("output/figures/regulon_analysis/", group))) {
        dir.create(str_c("output/figures/regulon_analysis/", group))
    }
    ggsave(str_c("output/figures/regulon_analysis/",
                 group,
                 "/binarized_heatmap.png"),
           plot = binarized_heatmap,
           width = plot_width,
           height = plot_height)

    #save qs object
    qs::qsave(binarized_heatmap,
              str_c("output/figures/regulon_analysis/",
                    group,
                    "/binarized_heatmap.qs"))
}

```


# regulon combined plots heatmap
```{r hatmap_regulon, eval = TRUE}
# create a list of the groups
regulon_list <- list()
# load the regulon activity saved data
for (group in c("patient_prim_cancer_cells",
                "patient_mets_cancer_cells",
                # "mm_prim_cancer_cells",
                # "mm_mets_cancer_cells",
                "xeno_prim_human",
                "xeno_mets_human",
                "dogs_prim_cancer_cells",
                "dogs_mets_cancer_cells")) {
    name <- 
        group %>%
        str_remove("_cancer_cells")
    #load the regulon activity
    regulon_activity_scaled <-
        qs::qread(str_c("output/figures/regulon_analysis/",
                        group,
                        "/regulon_activity_scaled.qs"))

    # append to the list
    regulon_activity_formatted <- 
        regulon_activity_scaled %>%
        as.data.frame() %>%
        rownames_to_column("Regulon") %>%
        mutate(Regulon = str_replace(Regulon, "_.*", "")) %>%
        mutate(Regulon = str_replace(Regulon, "\\(.*\\)", "")) %>%
        dplyr::rename_with(~ str_remove(., "Tumor_")) %>%
            rename_with(~ paste0(name, "_", .), -Regulon)
    # add the group name
    regulon_list[[group]] <- regulon_activity_formatted
}

# combine the list into a single data frame and make a single heatmap
output <-
    regulon_list$patient_prim_cancer_cells %>%
    left_join(regulon_list$patient_mets_cancer_cells, by = "Regulon") %>%
    # left_join(regulon_list$xeno_prim_human, by = "Regulon") %>%
    # left_join(regulon_list$xeno_mets_human, by = "Regulon") %>%
    left_join(regulon_list$dogs_prim_cancer_cells, by = "Regulon") %>%
    left_join(regulon_list$dogs_mets_cancer_cells, by = "Regulon") %>%
    column_to_rownames("Regulon") %>%
    as.matrix()


# make a heatmap to show average regulon activity per cell type or cluster
regulon_activity_heatmap <-
    pheatmap::pheatmap(output,
                       name = "Regulon activity",
                       scale = "none",
                       cluster_cols = TRUE,
                       show_row_dend = FALSE,
                       silent = TRUE)
                       
regulon_activity_heatmap
```