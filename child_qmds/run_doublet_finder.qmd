## Run DoubletFinder

This markdown is a way for me (Matty G) to keep track of my progress with running DoubletFinder on all our samples.

```{r sample-information}
sample_info <- read.table("misc/allsample_details.txt", header = TRUE)
# write.table(sample_info, "misc/allsample_details.txt")
```

### Make Directories

I need to make directories to hold my doublet finder results

```{bash doublet-finder-dirs}
for dirname in \
    DoubletFinder \
    DoubletFinder/output \
    DoubletFinder/slurm
do
    if [ ! -d ${dirname} ]
    then
        mkdir -p ${dirname}
    fi
done
```

I'll be submitting these jobs as arrays in bash.

Before I can, though, I'll need to add information to our sample table (and remove extraneous stuff for the purposes of this). The table needs to contain the sample id's and the paths to the filtered feature matrix h5 file.

### Create Input Table for Demuxafy

```{r re-work-sample-info-table}
atlas_path <-
    "/home/gdrobertslab/lab/Analysis/MattGust/projects/Roberts_Lab/Osteo_atlas/"

#Specify path to data based on data source
sample_info <- dplyr::select(sample_info, sample_name, data_source) %>%
    mutate(data_path = recode(data_source,
                               "GEO" = "/home/gdrobertslab/lab/Counts_2/",
                               "NCH" = "/home/gdrobertslab/lab/Counts_2/",
                               "SJ" = "/home/gdrobertslab/lab/ExternalData/Patel_lab/",
                               "NCI_POB" = "/home/gdrobertslab/lab/ExternalData/McEachron_lab/03_FilteredMatricesH5/",
                               "CSU" = "/home/gdrobertslab/lab/ExternalData/Regan_lab/",
                               "TU" = "/home/gdrobertslab/lab/ExternalData/Gardner/",
                               "UoM" = "/home/gdrobertslab/lab/ExternalData/Modiano_Lab/"))

count_path_end <- list("GEO" = "/home/gdrobertslab/lab/",
                       "NCH" = "/home/gdrobertslab/lab/",
                       "SJ" = "/home/gdrobertslab/lab/",
                       "NCI_POB" = "/home/gdrobertslab/lab/",
                       "CSU" = "/home/gdrobertslab/lab/",
                       "TU" = "/home/gdrobertslab/lab/",
                       "UoM" = "/home/gdrobertslab/lab/")


#make new data frame for doublet finder input
df_input <- sample_info
df_input$count_path <- ifelse(df_input$data_source %in% c("GEO", "NCH"),
                              paste0(df_input$data_path,
                                     df_input$sample_name,
                                     "/filtered_feature_bc_matrix/"),
                              ifelse(df_input$data_source == "NCI_POB",
                                     paste0(atlas_path,
                                            "DoubletFinder/troy_counts/",
                                            df_input$sample_name),
                                     paste0(atlas_path,
                                            "DoubletFinder/anand_counts/",
                                            df_input$sample_name)))

#Make h5 paths for reading in data to make new count folders
sample_info$h5_path <-
    paste0(sample_info$data_path,
           ifelse(sample_info$data_source == "NCI_POB",
                  paste0("03_FilteredMatricesH5/",
                         sample_info$sample_name,
                         "_filtered_feature_bc_matrix.h5"),
                  paste0(sample_info$sample_name,
                         "/filtered_feature_bc_matrix.h5")))


#create 10x counts folders for troy and anand's data; and Regan, Gardner, and Modiano
needs_counts <- subset(sample_info, data_source %in% c("SJ", "NCI_POB", "CSU", "TU", "UoM"))

#make paths to h5 files
needs_counts <- mutate(needs_counts,
       h5_path = paste0(data_path,
                        recode(data_source,
                               "SJ" = paste0(sample_name, "/filtered_feature_bc_matrix.h5"),
                               "NCI_POB" = paste0(sample_name, "_filtered_feature_bc_matrix.h5"),
                               "CSU" = paste0(sample_name,
                                              "/",
                                              ifelse(startsWith(sample_name, "OSLM"),
                                                     paste0(sample_name, "_filtered_feature_bc_matrix.h5"),
                                                     "filtered_feature_bc_matrix.h5")
                                              ),
                               "TU" = paste0(sample_name, "/filtered_feature_bc_matrix.h5"),
                               "UoM" = paste0("cellranger_", sample_name, "/filtered_feature_bc_matrix.h5"))
       )) %>%
    unique()


#write counts to folders
system("mkdir -p DoubletFinder/Counts/SJ DoubletFinder/Counts/NCI_POB DoubletFinder/Counts/CSU DoubletFinder/Counts/TU DoubletFinder/Counts/UoM")
#set up will be DoubletFinder/`data_source`/`sample_name`/filtered_feature_bc_matrix
for (i in 1:nrow(needs_counts)) {
    #only do it if the counts folder doesn't exist
    if (!dir.exists(paste0("DoubletFinder/Counts/",
                          needs_counts$data_source[i],
                          "/",
                          needs_counts$sample_name[i]))) {

        h5_data <- Read10X_h5(needs_counts$h5_path[i])
        if (class(h5_data) == "list") h5_data <- h5_data[["Gene Expression"]]
        write10xCounts(path = paste0("DoubletFinder/Counts/",
                                    needs_counts$data_source[i],
                                    "/",
                                    needs_counts$sample_name[i]),
                    x = h5_data,
                    barcodes = colnames(h5_data),
                    type = "sparse")
    }
}

sample_info$count_path <- ifelse(sample_info$data_source %in% c("NCH", "GEO"),
                                 paste0(sample_info$data_path, sample_info$sample_name, "/filtered_feature_bc_matrix"),
                                 paste0("DoubletFinder/Counts/", sample_info$data_source, "/", sample_info$sample_name))

df_input <- select(sample_info, sample_name, count_path) %>% unique()


#Check that all count paths in df_input exist
dir.exists(df_input$count_path)

write.table(df_input,
             "misc/doubletfinder_input.txt",
             quote = FALSE,
             row.names = FALSE,
             col.names = FALSE)
```

### Submit Batch Jobs

```{bash}
sbatch DoubletFinder/run_demuxafy.sh
```

## Evaluate Demuxafy Results

Note that scds did not work for samples SJOS063824_X1 and SJOS013768_X3.

### Re-combine results for those missing scds

```{bash combine-results-SJOS063824_X1-SJOS013768_X3}
singularity exec --bind /home/gdrobertslab/lab/Analysis/MattGust/projects/Roberts_Lab/Osteo_atlas \
    /home/gdrobertslab/lab/Tools/Demuxafy.sif \
    Combine_Results.R \
    -o DoubletFinder/output/SJOS063824_X1/combined/combined_doublets.tsv \
    -t DoubletFinder/output/SJOS063824_X1/DoubletDetection \
    -n DoubletFinder/output/SJOS063824_X1/scDblFinder \
    -m 'MajoritySinglet'

singularity exec --bind /home/gdrobertslab/lab/Analysis/MattGust/projects/Roberts_Lab/Osteo_atlas \
    /home/gdrobertslab/lab/Tools/Demuxafy.sif \
    Combine_Results.R \
    -o DoubletFinder/output/SJOS013768_X3/combined/combined_doublets.tsv \
    -t DoubletFinder/output/SJOS013768_X3/DoubletDetection \
    -n DoubletFinder/output/SJOS013768_X3/scDblFinder \
    -m 'MajoritySinglet'

```

### Add Results to Seurat Objects

```{r overlay-demuxafy-results}
#we'll be using the objects from final_tumor_vs_stroma
ob_names <- c(
    "dogs_mets",
    "dogs_prim",
    "mm_mets",
    "mm_prim",
    "patient_mets",
    "patient_prim",
    "xeno_mets_human_cancer_cells",
    "xeno_mets_mouse",
    "xeno_prim_human_cancer_cells",
    "xeno_prim_mouse"
)

obj_list <- list()
all_demux <- list()

for (ob_name in ob_names) {
    print(paste("loading", ob_name))
    #Read in seurat object from Yogesh's folder
    tmp_ob <- qs::qread(
        paste0("/home/gdrobertslab/lab/Analysis/Yogesh/CellTypeAnnRefs/output/seurat_objects/final_tumor_vs_stroma/",
        ob_name,
        ".qs"))
    # tmp_ob <- reconstruct_cell_types(tmp_ob)
    #read in demuxafy results
    demuxafy_res <- list()
    for (sid in unique(tmp_ob$sample_name)) {
        print(paste("loading demuxafy results for", sid))
        demuxafy_res[[sid]] <-
            read.table(paste0("DoubletFinder/output/",
                              sid,
                              "/combined/combined_doublets_w_combined_assignments.tsv"),
                        header = TRUE) %>%
            mutate(Barcode = paste(sid, Barcode, sep = "_")) %>%
            column_to_rownames("Barcode")
        if (sid %in% c("SJOS013768_X3", "SJOS063824_X1")) {
            demuxafy_res[[sid]]$scds_DropletType <- "N/A"
        }
        demuxafy_res[[sid]] <- dplyr::select(demuxafy_res[[sid]],
                                             DoubletDetection_DropletType,
                                             scDblFinder_DropletType,
                                             scds_DropletType,
                                             MajoritySinglet_DropletType)
    }
    # Create one big dataframe w demuxafy results for current object
    all_demux[[ob_name]] <- bind_rows(demuxafy_res) %>%
        mutate(object = ob_name)
    #Add column saying whether or not a cell passed QC
    all_demux[[ob_name]]$passed_qc <-
        rownames(all_demux[[ob_name]]) %in% colnames(tmp_ob)

    obj_list[[ob_name]] <- AddMetaData(tmp_ob, metadata = all_demux[[ob_name]])
}
qs::qsave(obj_list, "output/seurat_objects/demuxafied_obj_list.qs")
qs::qsave(all_demux, "DoubletFinder/all_demuxafy_results.qs")



# split into cancer vs stroma lists
cancer_obs <- list()
stroma_obs <- list()
for (ob in ob_names) {
    if (!str_detect(ob, "xeno")) {
        cancer_obs[[ob]] <- subset(obj_list[[ob]], Ann_Level1 == "Tumor")
        stroma_obs[[ob]] <- subset(obj_list[[ob]], Ann_Level1 != "Tumor")
    } else if (str_detect(ob, "cancer_cells")) {
        cancer_obs[[ob]] <- obj_list[[ob]]
    } else {
        cancer_obs[[ob]] <- obj_list[[ob]]
    }
}

for (ob in names(cancer_obs)) {
    png(paste0("figures/DoubletFinder/results_by_annotation_", ob, ".png"),
        width = 2000,
        height = 800)
    print(dimplot_better(obj_list[[ob]],
                         group = c("Ann_Level3",
                                   "MajoritySinglet_DropletType"),
                         ncol = 2))
    dev.off()
}
```

### Investigate Tumor Interactive

Since so much of tumor interactive is called doublets, we should expect there to not be many markers that are unique to this cluster, since it should share transcriptional features of multiple other clusters according to the doublet finder method calls.

We're going to drill down into the Tumor Interactive population in the patient mets samples.

```{r tumor-interactive-drill-down}
p_mets <- obj_list[["patient_mets"]]
Idents(p_mets) <- p_mets$Ann_Level3
p_met_markers <- FindAllMarkers(p_mets)

p_met_markers %>%
    mutate(pct_exp_diff = pct.1 - pct.2) %>%
    # filter(cluster == "Tumor_Interractive") %>%
    group_by(cluster) %>%
    arrange(desc(pct_exp_diff)) %>%
    filter(p_val_adj < 0.05) %>%

```

### Compare Doublet Calls to QC Checks

I'm going to compare the proportion of doublet calls in cells that passed QC compared to those that didn't.

```{r}
qc_doublet_heatmaps <- lapply(all_demux, function(x) {
    x %>%
        dplyr::select(MajoritySinglet_DropletType,
                    passed_qc) %>%
        group_by(passed_qc) %>%
        mutate(group_total = n()) %>%
        group_by(MajoritySinglet_DropletType, passed_qc) %>%
        mutate(prop = sum(n()) / group_total) %>%
        unique() %>%
        ggplot(aes(x = MajoritySinglet_DropletType,
                y = passed_qc,
                fill = prop)) +
            geom_tile() +
            geom_label(aes(label = round(prop, 3)), fill = "white")
})
```

### Make dim plots and heatmaps with doublet finder results

The dimplots will give us an idea of if the doublet callers exhibit a bias towards a particular phenotype or not.

```{r visualize-demuxafy-results}
df_result_plts <- list()
df_result_heatmaps <- list()

for (ob_name in names(obj_list)) {
    plt_titles <- paste0(c("MajoritySinglet",
                           "DoubletDetection",
                           "scDblFinder",
                           "scds"),
                         "_DropletType")
    names(plt_titles) <- plt_titles
    plt_list <- lapply(as.list(plt_titles), function(x) {
        dimplot_better(obj_list[[ob_name]],
                       group_by =  x,
                       order = FALSE,
                       pt.size = 0.5) +
            theme(title = element_text(size = 10))
    })
    df_result_plts[[ob_name]] <-
        (plt_list[[1]] | plt_list[[2]]) / (plt_list[[3]] | plt_list[[4]]) +
            patchwork::plot_annotation(title = ob_name,
                                       theme = theme(plot.title = element_text(size = 24,
                                                                               face = "bold",
                                                                               hjust = 0.5)))

    df_result_heatmaps[[ob_name]] <- obj_list[[ob_name]]@meta.data %>%
        dplyr::select(MajoritySinglet_DropletType,
                      Ann_Level2) %>%
        group_by(Ann_Level2) %>%
        mutate(group_total = sum(n())) %>%
        group_by(Ann_Level2, MajoritySinglet_DropletType) %>%
        mutate(prop = sum(n()) / group_total) %>%
        unique() %>%
        ggplot(aes(x = MajoritySinglet_DropletType,
                          y = Ann_Level2,
                          fill = prop)) +
            geom_tile() +
            geom_label(aes(label = round(prop, 3)), fill = "white") +
            theme(axis.text.y = element_text(size = 15, face = "bold"),
                  axis.text.x = element_text(size = 15, face = "bold"),
                  axis.title.y = element_blank(),
                  axis.title.x = element_blank(),
                  panel.background = element_blank(),
                  plot.title = element_text(size = 20, face = "bold")) +
            ggtitle(ob_name)
}

#Make cancer dimplots
for (name in names(obj_list)) {
    png(paste0("demuxafy_figs/dimplots/", name, ".png"))
    print(dimplot_better(
        obj_list[[name]],
        group = c("Ann_Level1","MajoritySinglet_DropletType")),
        ncol = 2
    )
    dev.off()
}


dim_list <- lapply(cancer_obs, function(ob) {
    dimplot_better(ob, group = c("Ann_Level1", "MajoritySinglet_DropletType"))
})

png(paste0("demuxafy_figs/tumor_cell_doublet_call_heatmap.png"), height = 1000, width = 3000)
gridExtra::grid.arrange(grobs = dim_list, nrow = 2)
dev.off()
```

### Compare Doublet Calls in QC'd Cells

```{r}
df_res_by_ob <- list()
df_by_filtered <- list()
for (ob_name in names(obj_list)) {
    tmp_ob <- obj_list[[ob_name]]
    for (sid in unique(tmp_ob$sample_name)) {
    print(paste("loading demuxafy results for", sid))
    demuxafy_res[[sid]] <-  
        read.table(paste0("DoubletFinder/output/",
                          sid,
                          "/combined/combined_doublets_w_combined_assignments.tsv"),
                    header = TRUE) %>%
        mutate(Barcode = paste(sid, Barcode, sep = "_")) %>%
        column_to_rownames("Barcode")
    }
    df_res_by_ob[[ob_name]] <- bind_rows(demuxafy_res)
    df_res_by_ob[[ob_name]]$passed_qc <- rownames(df_res_by_ob[[ob_name]]) %in% colnames(tmp_ob)
    df_by_filtered[[ob_name]] <- table(df_res_by_ob[[ob_name]]$passed_qc,
                                       df_res_by_ob[[ob_name]]$MajoritySinglet_DropletType)

    # df_res_by_ob[[ob_name]]@meta.data %>%
    #     dplyr::select(DoubletDetection_DropletType,
    #                   scDblFinder_DropletType,
    #                   scds_DropletType,
    #                   MajoritySinglet_DropletType,
    #                   passed_qc) %>%
    #     mutate(object = ob_name)
}

lapply(df_by_filtered, prop.table, margin = 1)

#Make one dataframe with all demux calls
merged_demux <- bind_rows(all_demux)
#make bar chart showing proportion of doublet calls between cells that did and didn't pass qc
group_by(merged_demux, object, passed_qc) %>%
    mutate(num_cells = n(),
           doublet_prop = sum(MajoritySinglet_DropletType == "doublet")/num_cells) %>%
    dplyr::select(MajoritySinglet_DropletType,
                  object,
                  passed_qc,
                  num_cells,
                  doublet_prop) %>%
    unique() %>%
    group_by(object) %>%
    mutate(tot_cells = sum(num_cells)) %>%
    ggplot(aes(x = object,
               y = doublet_prop,
               fill = passed_qc)) +
        geom_bar(position = "dodge",
                 stat = "identity",
                 color = "black",
                 width = 0.7) +
    theme(axis.text.x = element_text(angle = -45),
          legend.position = c(0.1, 0.9)) +
    ylab("Proportion of Cells Called Doublets") +
    labs(title = "Comparing the Proportion of Cells Called Doublets and Whether or not They Passed QC")
```

### PDX Sanity Check

One way I can check whether or not the doublet calling algorithms are doing their job is by looking at cells with similar levels of mouse and human reads in the PDX data. If these algorithms are working well, we should expect most, if not all, of these cells to be labelled as doublets, since a doublet is the only way there would be similar amounts of human and murine reads.

```{r pdx-sanity-check}
pdx_details <- read.table("misc/allsample_details.txt") %>%
    filter(CL_or_PDX == "xenograft_PDX") %>%
    select(sample_name, data_source) %>%
    unique()

#get demuxafy results for pdx samples
pdx_df <- all_demux[c("xeno_mets_human",
                      "xeno_mets_mouse",
                      "xeno_prim_human",
                      "xeno_prim_mouse")]

#convert rownames to a column
pdx_df <- lapply(pdx_df, rownames_to_column, "bc")

pdx_df <- bind_rows(pdx_df)

length(unique(pdx_df$bc))
dim(pdx_df)
#we have more rows than barcodes since many cells were counted twice for a human and mouse demuxafy call
pdx_df <- dplyr::select(pdx_df, bc, MajoritySinglet_DropletType) %>% 
    unique()
dim(pdx_df)
#now we have a dataframe saying whether or not each cell was called a doublet by the majority
mixed_bcs <- list()
for (i in seq_len(nrow(pdx_details))) {
    sid <- pdx_details$sample_name[i]
    if (pdx_details$data_source[i] == "NCH") {
        ct_mtx <- Read10X_h5(paste0("/home/gdrobertslab/lab/Counts_2/",
                                    sid,
                                    "/filtered_feature_bc_matrix.h5"))
    } else {
        ct_mtx <-
            Read10X_h5(paste0("/home/gdrobertslab/lab/ExternalData/Patel_lab/",
                              sid,
                              "/filtered_feature_bc_matrix.h5"))
    }
    if (class(ct_mtx) == "list") ct_mtx <- ct_mtx[["Gene Expression"]]
    #calculate percentage of human reads in each cell
    pct_human <-
        colSums(ct_mtx[startsWith(rownames(ct_mtx), "GRCh38"), ])/colSums(ct_mtx)

    #get barcodes for cells that have > 40% and < 60% human reads
    true_doublets <- names(pct_human)[pct_human > 0.40 & pct_human < 0.60]
        # paste(sid,
        #       names(pct_human)[pct_human > 0.40 & pct_human < 0.60],
        #       sep = "_")
    #get number of reads in these cells
    num_reads <- setNames(colSums(ct_mtx)[true_doublets], true_doublets)
    true_doublets <- paste(sid, true_doublets, sep = "_")
    mixed_bcs[[sid]] <- as.data.frame(cbind(num_reads, true_doublets))
    mixed_bcs[[sid]]$num_reads <- as.numeric(mixed_bcs[[sid]]$num_reads)
}
head(mixed_bcs[[1]])

#for each bc, determine whether or not it was called a doublet
sanity_check <- lapply(names(mixed_bcs), function(sid) {
    #only keep cells with > 200 reads
    x <- mixed_bcs[[sid]]
    x <- subset(x, num_reads > 200)
    tmp <- setNames(pdx_df$MajoritySinglet_DropletType[match(x$true_doublets, pdx_df$bc)],
                    pdx_df$bc[match(x$true_doublets, pdx_df$bc)])
    # prop_doublets <- mean(tmp == "doublet")
    return(c("sample" = sid,
             "num_cells" = as.integer(nrow(x)),
             "proportion_doublets" = round(mean(tmp == "doublet"), 3)))
})
bind_rows(sanity_check) %>%
    print(n = 30)
```

### Merge PDX Tumor Cells with Patient Stromal Cells

We'll human cells from a pdx and human stromal cells from a patient sample and merge into one object. I'll then run demuxafy on this object to see if the doublet callers call anything new a doublet. This will give an idea of how much it overcalls.

```{r}
human_pdx <- obj_list[["xeno_mets_human"]]

hpdx_cts <- GetAssayData(human_pdx, layer = "counts")

human_stroma <- obj_list[["patient_mets_normal_cells"]]
human_stroma <- reconstruct_cell_types(human_stroma)

hstrom_cts <- GetAssayData(human_stroma, layer = "counts")

chimera <- merge(human_pdx, human_stroma)
chimera <- JoinLayers(chimera)
chimera <- process_seurat(chimera)
chimera_counts <- GetAssayData(chimera, layer = "counts")

#Downsample to speed things up
set.seed(17)
down_samp_chimera <- chimera_counts[, sample(colnames(chimera_counts), size = 50000, replace = FALSE)]

write10xCounts(path = "pdx_clinical_chimera/",
               x = down_samp_chimera)
```

#### Run Demuxafy on Chimera Object

```{bash chimera-demuxafy}
ml purge
ml HDF5/1.10.6

mkdir -p DoubletFinder/output/pdx_clinical_chimera/DoubletDetection
singularity exec --env NUMBA_CACHE_DIR=/tmp \
    -B pdx_clinical_chimera:/input,DoubletFinder/output/pdx_clinical_chimera/DoubletDetection/:/out,/home/gdrobertslab/mjg015/annoying_stuff:/home \
    --no-home \
    /home/gdrobertslab/lab/Tools/Demuxafy.sif \
    DoubletDetection.py \
    -i 50 \
    -m /input \
    -o /out \
    -j 5

mkdir DoubletFinder/output/pdx_clinical_chimera/scDblFinder
singularity exec --env NUMBA_CACHE_DIR=/tmp \
    -B pdx_clinical_chimera/:/input,DoubletFinder/output/pdx_clinical_chimera/scDblFinder/:/out,/home/gdrobertslab/mjg015/annoying_stuff:/home \
    --no-home \
    /home/gdrobertslab/lab/Tools/Demuxafy.sif \
    scDblFinder.R \
        -t /input \
        -o /out

mkdir DoubletFinder/output/pdx_clinical_chimera/scds
singularity exec --env NUMBA_CACHE_DIR=/tmp \
    -B pdx_clinical_chimera/:/input,DoubletFinder/output/pdx_clinical_chimera/scds/:/out,/home/gdrobertslab/mjg015/annoying_stuff:/home \
    --no-home /home/gdrobertslab/lab/Tools/Demuxafy.sif \
    scds.R \
        -t /input \
        -o /out

mkdir DoubletFinder/output/pdx_clinical_chimera/combined
singularity exec -B DoubletFinder/output/pdx_clinical_chimera:/out \
    /home/gdrobertslab/lab/Tools/Demuxafy.sif \
    Combine_Results.R \
        -t /out/DoubletDetection/ \
        -n /out/scDblFinder/ \
        -c /out/scds/ \
        -o /out/combined/combined_doublets.tsv \
        -m "MajoritySinglet"

```

#### Analyze Chimera Sample

```{r add-results-to-chimera}
#show calls for human_stroma
df_result_heatmaps[["patient_mets_normal_cells"]] |
dimplot_better(human_stroma, group = c("Ann_Level2", "MajoritySinglet_DropletType"))

#subset chimera object to downsampled cells
chimera$bc <- colnames(chimera)
downsampled_names <- colnames(down_samp_chimera)
chimera_small <- subset(chimera, bc %in% downsampled_names)
r_dim_plot(chimera_small, group = "Ann_Level1")

#read in demuxafy results
chimera_demux <- read.table("DoubletFinder/output/pdx_clinical_chimera/combined/combined_doublets_w_combined_assignments.tsv", header = TRUE) %>%
    column_to_rownames("Barcode") %>%
    dplyr::select(DoubletDetection_DropletType,
                  scDblFinder_DropletType,
                  scds_DropletType,
                  MajoritySinglet_DropletType)

chimera_small$new_demux_call <-
    chimera_demux$MajoritySinglet_DropletType[match(colnames(chimera_small),
                                                             rownames(chimera_demux))]

dimplot_better(chimera_small, group = c("MajoritySinglet_DropletType",
                                        "new_demux_call"))
```

## Using DoubletFinder Package

We now want to see how the r package DoubletFinder performs in calling doublets. Since doublets are captured during the sequencing run, I'm going to have 
calculate doublets on a per-sample basis. I first need to identify the % expected doublets for each sample, which I can estimate from the number of cells recovered.

```{r calculate-expected-doublet-rates}
path_key <- list(
    SJ = "/gpfs0/home2/gdrobertslab/lab/ExternalData/Patel_lab/",
    NCH = "/gpfs0/home2/gdrobertslab/lab/Counts_2/",
    NCI_POB = "/home/gdrobertslab/lab/ExternalData/McEachron_lab/03_FilteredMatricesH5/",
    GEO = "/gpfs0/home2/gdrobertslab/lab/Counts_2/"
    )

path_suffix_key <- list(
    SJ = "/filtered_feature_bc_matrix.h5",
    NCH = "/filtered_feature_bc_matrix.h5",
    NCI_POB = "_filtered_feature_bc_matrix.h5", # Note different file names
    GEO = "/filtered_feature_bc_matrix.h5"
    )

all_samples <- read.table("misc/allsample_details.txt")
n_row <- nrow(all_samples)

exp_doublets <- data.frame(sample = rep(NA, n_row),
                           cells_recovered = rep(NA, n_row),
                           exp_doublets = rep(NA, n_row))

doublet_finder_results <- list()
#keep track of samples processed so it doesn't double up
samps_proc <- c()

for (i in seq_len(n_row)) {
    sid <- all_samples$sample_name[i]

    #check that sample hasn't already been run
    if (!sid %in% samps_proc) {
        exp_doublets$sample[i] <- sid

        print(paste("Iteration", i, "for sample", sid))

        sp_pattern <- ifelse(all_samples$sp_pattern[i] == "nothing",
                             "",
                             all_samples$sp_pattern[i])

        source <- all_samples$data_source[i]

        ob <- tenx_load_qc(h5_file = paste0(path_key[[source]],
                                            sid,
                                            path_suffix_key[[source]]),
                             violin_plot = FALSE,
                             min_cells = 1,
                             min_features = 1,
                             exp_type = "GEX") %>%
            process_seurat()

        #pk identification
        sweep_res_list <- DoubletFinder::paramSweep(ob, PCs = 1:15, sct = FALSE)
        sweep_stats <- DoubletFinder::summarizeSweep(sweep_res_list, GT = FALSE)
        png("tmp.png")
        bcmvn <- DoubletFinder::find.pK(sweep_stats)
        dev.off()
        system("rm tmp.png")

        #select the pK that corresponds to max bcmvn to optimize doublet detection
        opt_pk <- bcmvn %>%
            filter(BCmetric == max(BCmetric)) %>%
            dplyr::select(pK) %>%
            pull

        #Homotypic doublet proportion estimate
        annotations <- ob$seurat_clusters
        homotypic.prop <- modelHomotypic(annotations)
        #number of expected doublets based on doublet_rate=(cells_recovered)*2^(-10.2877)
        exp_doublet_rate <- ncol(ob) * 2 ^ -10.2877 / 100
        exp_doublets$exp_doublets[i] <- exp_doublet_rate
        nExp_poi <- round(exp_doublet_rate*ncol(ob))
        nExp_poi_adj <- round(nExp_poi*(1 - homotypic.prop))

        doublet_finder_results[[sid]] <-
            doubletFinder(ob,
                          PCs = 1:15,
                          pN = 0.25,
                          pK = as.numeric(opt_pk),
                          nExp = nExp_poi_adj,
                          reuse.pANN = FALSE,
                          sct = FALSE)

        samps_proc <- c(samps_proc, sid)
    }
}
```

Now I need to add these results to the object list. I'll be adding it to the "demuxafied_obj_list" objects.

```{r rDoubletFinder}
#loop through each object and get barcodes and object names
whole_ob_res <- list()
for (ob_name in names(object_list)) {
    tmp_md <- object_list[[ob_name]]@meta.data %>%
        rownames_to_column("bc") %>%
        dplyr::select(sample_name, bc)

    #get barcodes from uniques sample names in tmp_md
    tmp_df_list <-lapply(setNames(unique(tmp_md$sample_name),
                             unique(tmp_md$sample_name)), function(sid) {
        x <- doublet_finder_results[[sid]]
        tmp_df_res <- x@meta.data[, startsWith(colnames(x@meta.data), "DF.classifications")]
        as.data.frame(tmp_df_res, row.names = paste(sid, colnames(x), sep = "_"))
    })
    whole_ob_res[[ob_name]] <- bind_rows(tmp_df_list)
    object_list[[ob_name]]$DoubletFinder <-
        whole_ob_res[[ob_name]]$tmp_df_res[match(colnames(object_list[[ob_name]]),
                                      rownames(whole_ob_res[[ob_name]]))]
}
qs::qsave(whole_ob_res, "output/whole_object_doublet_finder_results.qs")

doublet_finder_umaps <- list()
for (ob_name in names(object_list)) {
    doublet_finder_umaps[[ob_name]] <-
        (dimplot_better(object_list[[ob_name]], group = "Ann_Level3") /
        dimplot_better(object_list[[ob_name]], group = "DoubletFinder")) +
        plot_annotation(title = ob_name)
}

png("tmp.png", width = 2000, height = 1200)
(doublet_finder_umaps[[1]] |
doublet_finder_umaps[[3]] |
doublet_finder_umaps[[5]]) /
(doublet_finder_umaps[[7]] |
doublet_finder_umaps[[9]] |
doublet_finder_umaps[[11]])
dev.off()

png("tmp.png", width = 2000)
grid.arrange(grobs = doublet_finder_umaps[c("mm_mets_cancer_cells",
                                            "mm_prim_cancer_cells",
                                            "patient_mets_cancer_cells",
                                            "patient_prim_cancer_cells")], nrow = 1)
dev.off()

new_df_heatmaps <- list()

for(ob_name in names(object_list)) {
    new_df_heatmaps[[ob_name]] <- object_list[[ob_name]]@meta.data %>%
        dplyr::select(DoubletFinder,
                      Ann_Level3) %>%
        group_by(Ann_Level3) %>%
        mutate(group_total = sum(n())) %>%
        group_by(Ann_Level3, DoubletFinder) %>%
        mutate(prop = sum(n()) / group_total) %>%
        unique() %>%
        ggplot(aes(x = DoubletFinder,
                          y = Ann_Level3,
                          fill = prop)) +
            geom_tile() +
            geom_label(aes(label = round(prop, 3)), fill = "white") +
            theme(axis.text.y = element_text(size = 15, face = "bold"),
                  axis.text.x = element_text(size = 15, face = "bold"),
                  axis.title.y = element_blank(),
                  axis.title.x = element_blank(),
                  panel.background = element_blank(),
                  plot.title = element_text(size = 20, face = "bold")) +
            ggtitle(ob_name)
}

png("tmp.png", width = 2000, height = 1000)
(new_df_heatmaps[[1]] |
new_df_heatmaps[[3]] |
new_df_heatmaps[[5]]) /
(new_df_heatmaps[[7]] |
new_df_heatmaps[[9]] |
new_df_heatmaps[[11]])
dev.off()
```

### DoubletFinder Sanity Check

I'm going to check the calls in cells that should be doublets



```{r}
pdx_details <- read.table("misc/allsample_details.txt") %>%
    filter(CL_or_PDX == "xenograft_PDX") %>%
    select(sample_name, data_source) %>%
    unique()

pdx_df <- whole_ob_res[c("xeno_mets_human",
                         "xeno_mets_mouse",
                         "xeno_prim_human",
                         "xeno_prim_mouse")]

pdx_df <- lapply(pdx_df, rownames_to_column, "bc")
pdx_df <- bind_rows(pdx_df)

length(unique(pdx_df$bc))
dim(pdx_df)
#we have more rows than barcodes since many cells were counted twice for a human and mouse demuxafy call
pdx_df <- dplyr::select(pdx_df, bc, tmp_df_res) %>% 
    unique()
dim(pdx_df)

mixed_bcs <- list()
for (i in seq_len(nrow(pdx_details))) {
    sid <- pdx_details$sample_name[i]
    obj <- doublet_finder_results[[sid]]
    ct_mtx <- GetAssayData(obj, slot = "counts")
    ct_mtx <- ct_mtx[, colSums(ct_mtx) > 200]
    pct_human <- colSums(ct_mtx[startsWith(rownames(ct_mtx), "GRCh38"), ])/colSums(ct_mtx)

    #get barcodes for cells w bw 40 and 60% human reads
    true_doublets <- names(pct_human)[pct_human > 0.4 & pct_human < 0.6]
    true_doublets <- paste(sid, true_doublets, sep = "_")

    #add doublet finder calls to these cells
    true_doublets <- as.data.frame(true_doublets)

    true_doublets$DoubletFinder <-
        obj[[colnames(obj@meta.data)[startsWith(colnames(obj@meta.data), "DF.class")]]][match(true_doublets$true_doublets, paste(sid, colnames(obj), sep = "_")), ]
    true_doublets$sid <- sid
    
    mixed_bcs[[sid]] <- true_doublets
}

mixed_bc_df <- bind_rows(mixed_bcs)
mixed_bc_heatmaps <- lapply(mixed_bcs, function(x) {
    mutate(x, total = n(), sid = sid) %>%
        group_by(DoubletFinder) %>%
        summarize(prop = n() / total, sid = sid) %>%
        unique()
})

mixed_bc_heatmaps <- bind_rows(mixed_bc_heatmaps)
mixed_bc_heatmaps <- pivot_wider(mixed_bc_heatmaps, names_from = "DoubletFinder", values_from = "prop")
mixed_bc_heatmaps[is.na(mixed_bc_heatmaps)] <- 0

png("tmp.png")
mixed_bc_heatmaps %>%
    dplyr::select(-`NA`) %>%
    pivot_longer(cols = c("Singlet", "Doublet"), values_to = "prop", names_to = "call") %>%
    group_by(sid) %>%
    ggplot(aes(x = call, y = sid, fill = prop)) +
    geom_tile()
dev.off()
```