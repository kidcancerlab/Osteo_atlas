## Running CellChat

I'm interested into what cell types are communicating and what the communication circuit looks like.

I'll be doing it on `mm_mets` and `patient_mets`. I'll be using Ann_level2 as our cell types.

```{r patient-mets}
ob_names <- c("mm_mets", "mm_prim", "patient_mets", "patient_prim")
comb_objs <- lapply(as.list(ob_names), function(x) {
    qs::qread(paste0("~/../lab/Analysis/Yogesh/CellTypeAnnRefs/output/seurat_objects/final_tumor_vs_stroma/",
                     x, 
                     ".qs"))
})
names(comb_objs) <- ob_names


cellchat_list <- parallel::mclapply(X = comb_objs, FUN = function(x) {
    #create CellChat object
    cc_input <- GetAssayData(x, assay = "RNA", layer = "data")
    meta <- x@meta.data
    cc_ob <- createCellChat(object = cc_input, meta = meta, group.by = "Ann_Level2")

    #Set CellChat interaction db
    if (unique(x$organism) == "mouse") {
        cc_ob@DB <- CellChatDB.mouse
    } else {
        cc_ob@DB <- CellChatDB.human
    }

    # Preprocess expression data for cell-cell communication analysis
    cc_ob <- subsetData(cc_ob)
    future::plan("multicore", workers = 10)
    options(future.globals.maxSize = 3000 * 1024^2)
    cc_ob <- identifyOverExpressedGenes(cc_ob)
    cc_ob <- identifyOverExpressedInteractions(cc_ob)

    ### Infer cell-cell communication
    # compute communication probability
    cc_ob <- computeCommunProb(cc_ob,
                               population.size = FALSE,
                               nboot = 100)

    cc_ob <- filterCommunication(cc_ob, min.cells = 10)

    cc_ob <- computeCommunProbPathway(cc_ob)

    cc_ob <- aggregateNet(cc_ob)

    return(cc_ob)
}, mc.cores = 40)

# Do it one by one for patient objects since objects were too big
    #patient primary
pp_cc <- createCellChat(object = GetAssayData(comb_objs[["patient_prim"]],
                                              assay = "RNA",
                                              layer = "data"),
                        meta = comb_objs[["patient_prim"]]@meta.data,
                        group.by = "Ann_Level2")
pp_cc@DB <- CellChatDB.human
pp_cc <- subsetData(pp_cc)
future::plan("multicore", workers = 24)
#set max object size to 3 gigs
options(future.globals.maxSize = 3000 * 1024^2)
pp_cc <- identifyOverExpressedGenes(pp_cc)
pp_cc <- identifyOverExpressedInteractions(pp_cc)
pp_cc <- computeCommunProb(pp_cc,
                           population.size = FALSE,
                           nboot = 100)
pp_cc <- filterCommunication(pp_cc, min.cells = 10)
pp_cc <- computeCommunProbPathway(pp_cc)
pp_cc <- aggregateNet(pp_cc)

cellchat_list[["patient_prim"]] <- pp_cc

#Now do patient mets
pm_cc <- createCellChat(object = GetAssayData(comb_objs[["patient_mets"]],
                                              assay = "RNA",
                                              layer = "data"),
                        meta = comb_objs[["patient_mets"]]@meta.data,
                        group.by = "Ann_Level2")
pm_cc@DB <- CellChatDB.human
pm_cc <- subsetData(pm_cc)
future::plan("multicore", workers = 24)
#set max object size to 3 gigs
options(future.globals.maxSize = 3000 * 1024^2)
pm_cc <- identifyOverExpressedGenes(pm_cc)
pm_cc <- identifyOverExpressedInteractions(pm_cc)
pm_cc <- computeCommunProb(pm_cc,
                           population.size = FALSE,
                           nboot = 100)
pm_cc <- filterCommunication(pm_cc, min.cells = 10)
pm_cc <- computeCommunProbPathway(pm_cc)
pm_cc <- aggregateNet(pm_cc)

cellchat_list[["patient_mets"]] <- pm_cc

qs::qsave(cellchat_list, "output/cellchat_list.qs")

groupSize <- as.numeric(table(mm_mets_cc@idents))
png("tmp.png")
netVisual_circle(mm_mets_cc@net$weight, vertex.weight = groupSize, weight.scale = TRUE, label.edge = F)
dev.off()

system("mkdir figures/cellchat")

lapply(names(cellchat_list), function(x) {
    cc_ob <- cellchat_list[[x]]
    groupSize <- as.numeric(table(cc_ob@idents))
    colors.use <- rrrSingleCellUtils::plot_cols
    #make circle plot and heatmap
    png(paste0("figures/cellchat/",
               x,
               "_circle.png"),
               width = 600,
               height = 600)
    netVisual_circle(cc_ob@net$weight,
                     vertex.weight = groupSize,
                     color.use = colors.use,
                     weight.scale = TRUE,
                     label.edge = FALSE) +
        geom_label_repel() +
        geom_text_repel()
    dev.off()

    png(paste0("figures/cellchat/",
               x,
               "_heatmap.png"),
               height = 600,
               width = 800)
    weights = cc_ob@net$weight
    hm_cols <- colorRampPalette(c("#000000", "#0090FF"))(20)
    heatmap(weights,
            xlab = "receiver",
            ylab = "sender",
            col = hm_cols,
            keep.dendro = FALSE)
    dev.off()
})
```

## Permutation test to Find Strongest Interactions