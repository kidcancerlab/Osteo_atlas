---
title: "Osteosarcoma scAtlas"
author: "Yogesh Budhathoki, Matt Cannon and Matt Gust"
date: "`r format(Sys.time(), '%m/%d/%Y')`"
format:
    html:
        toc: true
        toc_float: true
        toc_depth: 5
        number_sections: false
        code-fold: true
        code-link: true
        df-print: kable
execute:
    cache: true
knitr:
    opts_chunk:
        cache.lazy: false
        cache.vars: ""
        warning: false
        message: false
lightbox: true
---

```{r setup, include=FALSE}
library(rrrSingleCellUtils)
library(Seurat)
library(ggrepel)
library(tidyverse)
library(harmony)
library(cowplot)
library(clustree)
library(data.table)
library(hdf5r)
library(Rmagic)
library(scATOMIC)
library(SCEVAN)
library(knitr)
```

# load in functions

{{< include child_qmds/helper_functions.qmd >}}

```{r setup2, include=FALSE}
knitr::opts_chunk$set(echo = TRUE,
                      cache = TRUE,
                      cache.lazy = FALSE,
                      warning = FALSE,
                      message = FALSE)
```

# Set up directory structure
```{bash mkdirs, eval=TRUE}
for directoryName in \
    output \
    output/figures \
    output/counts \
    output/seurat_objects/sobj_preprocess \
    output/seurat_objects/comb_sobjs \
    output/seurat_objects/harmony_sobjs
do
    if [ ! -d ${directoryName} ]
    then
        mkdir -p ${directoryName}
    fi
done
```

# Read in raw data and process to Seurat objects
The metadata for all samples is stored in misc/all_samples.txt.

This reads in the raw data from the hdf5 files and processes them to Seurat objects. These objects are saved to `output/seurat_objects/sobj_preprocess` for individual objects and then merged for each group (as defined in the metadata), harmonized and and saved to output/seurat_objects/sobj_preprocess_merged/

output/seurat_objects/sobj_preprocess/

{{< include child_qmds/read_raw_data.qmd >}}

# Annotate via Recurlstering all the datasets
The anotate function was build by compliling publicly available reference
comprising of lung, blood, and other primary cells for both human and mouse.
Once the clustering resolution was set, we mount each seurat object for
celltype annotation using the annotate function. Then final celltype is
assigned by highest number of celltype per each seurat cluster
```{r, fig.width = 10, fig.height = 10, fig.align = "center", eval  = FALSE}

for (group in unique(all_samples_csv$unique)){
    object <- qs::qread(str_c("output/seurat_objects/harmony_sobjs/",
                              group,
                              ".qs"))
    ann_sobj <- annotate(sobject = object,
                         species = object$organism[1],
                         aggr_ref = TRUE)

    Idents(ann_sobj) <- ann_sobj$seurat_clusters
    clust_info <- tibble()
    for (cluster in unique(ann_sobj$seurat_clusters)) {
        subset_object <- subset(ann_sobj, ident = cluster)
        subset_object <- process_seurat(subset_object)
        if (length(unique(subset_object$sample_name)) > 1 && ncol(subset_object) > 50 ) {
            subset_object <- RunHarmony(subset_object,
                                        group.by.vars = "sample_name") %>%
                process_seurat(reduction = "harmony")
        } else {
            subset_object <- subset_object
        }

        subset_object$re_cluster <- str_c(cluster, ".", subset_object$seurat_clusters)
        print(str_c("Done reclustering ", group, " ", cluster))
        clust_info <- subset_object@meta.data %>%
                as.data.frame() %>%
                select(re_cluster) %>%
                rbind(clust_info)
    }
    ann_sobj <- AddMetaData(ann_sobj, metadata = clust_info)
    ann_sobj$new_annot_clust <- ann_sobj$re_cluster
    cluster_celltypes <-
        table(ann_sobj$re_cluster, ann_sobj$annotations) %>%
        as.data.frame() %>%
        group_by(Var1) %>%
        arrange(desc(Freq), .by_group = TRUE) %>%
        slice_head(n=1)
    for (item in seq_len(nrow(cluster_celltypes))) {
        seurat_clust <- str_c("^", cluster_celltypes$Var1[item], "$") %>%
            as.character()
        celltype <- cluster_celltypes$Var2[item] %>%
            as.character()
        ann_sobj$new_annot_clust <- str_replace_all(string = ann_sobj$new_annot_clust,
                                                    pattern = seurat_clust,
                                                    replacement = celltype)
    }
    qs::qsave(x = ann_sobj,
              file = str_c("output/seurat_objects/harmony_sobjs/",
                                       group,
                                       ".qs"))
}
```

# Cancer cells vs normal cells using SCEVAN
Single CEll Variational Aneuploidy aNalysis
When run, the result is in three metadata column:
class: with tumor (blue) vs normal celltype(green), and (filtered (red): low quality cells i think)
subclone: clones numbered like a seurat clusters
SCEVAN starts from the raw count matrix removing irrelevant genes and cells.
Identification of a small set of highly confident normal cells.
Relative gene expression obtained from removal of the baseline inferred from confident normal cells.
Edge-preserving nonlinear diffusion filtering of relative gene expression.
Segmentation with a variational region-growing algorithm.
Identification of normal cells as those in the cluster containing the majority of confident normal cells.
Segments are then classified in five copy number states.
Analysis of subclones including clone tree, pathway activities, but it can be turned off

```{r, fig.width = 10, fig.height = 10, fig.align = "center", echo = FALSE, eval = FALSE}
scevan_plots <- list()

for (group in c("patient_prim", "patient_mets", "mm_prim", "mm_mets")) {
    object <- qs::qread(str_c("output/seurat_objects/harmony_sobjs/",
                              group,
                              ".qs"))
    if (ncol(object) > 10000) {
        object <- subset(x = object,
                                cells = sample(Cells(object),
                                        min(10000, length(Cells(object)))))
    } else {
        object <- object
    }

    count_mtx <- object@assays$RNA$counts
    results <- SCEVAN::pipelineCNA(count_mtx,
                                   organism = object$organism[1],
                                   par_cores = parallelly::availableCores(),
                                   plotTree = FALSE,
                                   SUBCLONES = FALSE)
    scv_object <- Seurat::AddMetaData(object, metadata = results)

    #scevan_plots[[group]] <- plot_my_stuff(scv_object, "class")

    #SCEVAN_annot <- table(scv_object$class)

    qs::qsave(scv_object, str_c("output/SCEVAN/",
                              group,
                              ".qs"))
}
```

# Cancer cells vs normal cells using scATOMIC
The result comes with the annotation of cell types including for both cancer type
and the normal cell types. Also outputs for each cell:
Classification_confidence: confident, low_confidence on annotation
pan_cancer_cluster: either cancer or normal
scATOMIC_pred : celltype annotation
```{r, fig.width = 10, fig.height = 10, fig.align = "center", echo = FALSE, eval = FALSE}
scATOMIC_plots <- list()

for (group in c("patient_prim", "patient_mets")) {
    object <- qs::qread(str_c("output/seurat_objects/harmony_sobjs/",
                              group,
                              ".qs"))
    if (ncol(object) > 10000) {
        object <- subset(x = object,
                                cells = sample(Cells(object),
                                        min(10000, length(Cells(object)))))
    } else {
        object <- object
    }
    count_mtx <- object@assays$RNA$counts
    cell_predictions <- scATOMIC::run_scATOMIC(rna_counts = count_mtx,
                                               mc.cores = parallelly::availableCores())
    scATOMIC_results <- create_summary_matrix(prediction_list = cell_predictions,
                                              use_CNVs = F,
                                              modify_results = T,
                                              mc.cores = parallelly::availableCores(),
                                              raw_counts = count_mtx,
                                              min_prop = 0.5 )
    scATOMIC_object <- AddMetaData(object, scATOMIC_results)
    #scATOMIC_plots[[group]] <- plot_my_stuff(scATOMIC_object, "pan_cancer_cluster")

    qs::qsave(scATOMIC_object, str_c("output/scATOMIC/",
                                    group,
                                    ".qs"))
}
```

# Split cancer vs the stroma - here
label potential tumor cell and then split the seurat object into cancer cells and
normal cells. The silhouette score was used to cluster the normal cells and 0.1
resolution was used to cluster the cancer cells (to reduce the excessive)
clustering.
It might be a worthwile to annotate or re run SCEVAN in the cancer cells to filter
out any normal cells that might have been group as cancer cells.
```{r, fig.width = 10, fig.height = 10, fig.align = "center", echo = FALSE}
cancer_celltypes <- list(patient_prim = c( "MSC",
                                           "Chondrocytes",
                                           "Tissue_stem_cells",
                                           "Neurons",
                                           "Osteoblasts",
                                           "Erythroblast",
                                           "Astrocyte",
                                           "BM",
                                           "Fibroblasts",
                                           "iPS_cells"),
                        patient_mets = c("MSC",
                                         "Chondrocytes",
                                         "Tissue_stem_cells",
                                         "Osteoblasts",
                                         "Smooth_muscle_cells",
                                         "Erythroblast",
                                         "Fibroblasts",
                                         "Astrocyte",
                                         "BM",
                                         "iPS_cells",
                                         "Neurons"),
                        xeno_prim_human = c(),
                        xeno_mets_human = c(),
                        xeno_prim_mouse = c(),
                        xeno_mets_mouse = c(),
                        normal_bone = c(),
                        mm_prim = c("Fibroblasts",
                                    "Stem cells",
                                    "Stromal cells",
                                    "Cardiomyocytes"),
                        mm_mets = c("Fibroblasts",
                                    "Stem cells",
                                    "Stromal cells",
                                    "Cardiomyocytes"))

harmony_params <-
    list(patient_prim = list(group_by = c("sample_name", "method", "data_source"),
                             theta = c(5, 5, 5),
                             lambda = c(0.5, 0.5, 0.5)),
        patient_mets = list(group_by = c("sample_name", "method", "data_source"),
                            theta = c(7, 7, 7),
                            lambda = c(0.5, 0.5, 0.5)),
        xeno_prim_human = list(group_by = c("sample_name", "method", "data_source"),
                               theta = c(7, 7, 7)),
        xeno_mets_human = list(group_by = c("sample_name", "method", "data_source"),
                               theta = c(7, 7, 7)),
        xeno_prim_mouse = list(group_by = c("sample_name", "data_source"),
                                theta = c(7, 7)),
        xeno_mets_mouse = list(group_by = c("sample_name", "method", "data_source"),
                               theta = c(7, 7, 7)),
        mm_prim = list(group_by = c("sample_name", "model"),
                       theta = c(12, 12)),
        mm_mets = list(group_by = c("sample_name", "model"),
                       theta = c(7, 7)),
        normal_bone = list(group_by = c("sample_name"),
                           theta = c(7)))

#parallel::mclapply(unique(all_samples_csv$unique), function(group)
for (group in c("patient_prim", "patient_mets", "mm_prim", "mm_mets")) {
    object <-
        qs::qread(str_c("output/seurat_objects/harmony_sobjs/",
                        group,
                        ".qs"))
    #x <- plot_my_stuff(s_obj, what = c("new_annot_clust"))
    ggsave(plot = x,
           filename = str_c("output/plots/", group, "_annot_clust.png"),
           width = 7,
           height = 7)
    Idents(object) <-
        object$new_annot_clust
    object$cancer_normal <-
        if_else(object$new_annot_clust %in% cancer_celltypes[[group]],
                "cancer_cells",
                object$new_annot_clust)
    object$cell_group <-
        if_else(object$new_annot_clust %in% cancer_celltypes[[group]],
                "cancer_cells",
                "normal_cells")
    qs::qsave(object, str_c("output/seurat_objects/annotated_sobjs/",
                            group,
                            ".qs"))

    for (cell_group_name in c("cancer_cells", "normal_cells")) {
        s_obj <-
            subset(x = object,
                   cell_group == cell_group_name) %>%
            process_seurat() %>%
            RunHarmony(group.by.vars = harmony_params[[group]]$group_by,
                       theta = harmony_params[[group]]$theta,
                       lambda = harmony_params[[group]]$lambda)
        s_obj <-
            s_obj %>%
            process_seurat(reduction = "harmony")
        #plot_my_stuff(s_obj, what = c("seurat_clusters", "new_annot_clust"))

        qs::qsave(s_obj, str_c("output/seurat_objects/tumor_vs_stroma/",  #nolint
                                group, "_",
                                cell_group_name,
                                ".qs"))

        #save the cancer object metadata with the cell barcodes
        date_time <-
            format(Sys.time(), "%Y%m%d_%H%M%S")
        s_obj$cell_barcodes <-
            colnames(s_obj)
        readr::write_tsv(x = s_obj@meta.data,
                        file = str_c("output/metadata/",
                                        group,
                                        "_cancer",
                                        date_time,
                                        ".tsv"))
    }
    print(str_c(group, " labelled with cancer_vs_normal cells and subsetted and saved"))
}

#save the xenograft objects
for (group in c("xeno_prim_human", "xeno_prim_mouse", "xeno_mets_human", "xeno_mets_mouse")) {
    object <-
        qs::qread(str_c("output/seurat_objects/harmony_sobjs/",
                        group,
                        ".qs"))

    qs::qsave(object, str_c("output/seurat_objects/tumor_vs_stroma/",
                            group,
                            ".qs"))
    qs::qsave(object, str_c("output/seurat_objects/annotated_sobjs/",
                            group,
                            ".qs"))

    #save the cancer object metadata with the cell barcodes
    date_time <-
        format(Sys.time(), "%Y%m%d_%H%M%S")
    object$cell_barcodes <-
        colnames(object)
    readr::write_tsv(x = object@meta.data,
                    file = str_c("output/metadata/",
                                    group,
                                    date_time,
                                    ".tsv"))
}

```

# Clustering based of the silhouette score and clustree
```{r, fig.width = 10, fig.height = 10, fig.align = "center", echo = FALSE}
object_list <-
    tribble(~group,                         ~res_value,
            "patient_prim_cancer_cells",    0.15,
            "patient_mets_cancer_cells",    0.05,
            "mm_prim_cancer_cells",         0.05,
            "mm_mets_cancer_cells",         0.05,
            "xeno_prim_human",              0.1,
            "xeno_mets_human",              0.1,
            "patient_prim_normal_cells",    0.15,
            "patient_mets_normal_cells",    0.15,
            "xeno_prim_mouse",              0.05,
            "xeno_mets_mouse",              0.15,
            "mm_prim_normal_cells",         0.25,
            "mm_mets_normal_cells",         0.05)

for (item in seq_len(nrow(object_list))) {
    group <- object_list$group[item]
    res_value <- object_list$res_value[item]
    s_obj <-
        qs::qread(str_c("output/seurat_objects/tumor_vs_stroma/",
                              group,
                              ".qs"))

    s_obj <- FindClusters(s_obj,
                          resolution = res_value)

    qs::qsave(s_obj,
              file = str_c("output/seurat_objects/resolution_optimized/",
                            group,
                            ".qs"))
}
```


# Session info
```{r}
sessionInfo()
```
