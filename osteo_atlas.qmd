---
title: "Osteosarcoma scAtlas"
author: "Yogesh Budhathoki, Matt Cannon and Matt Gust"
date: "`r format(Sys.time(), '%m/%d/%Y')`"
format:
    html:
        toc: true
        toc_float: true
        toc_depth: 5
        number_sections: false
        code-fold: true
        code-link: true
        df-print: kable
execute:
    cache: true
knitr:
    opts_chunk:
        cache.lazy: false
        cache.vars: ""
        warning: false
        message: false
lightbox: true
---

```{r setup}
#| include: FALSE
library(rrrSingleCellUtils)
library(Seurat)
library(ggrepel)
library(tidyverse)
library(harmony)
library(cowplot)
library(clustree)
library(data.table)
library(hdf5r)
library(Rmagic)
library(knitr)
```

# Load in functions

{{< include child_qmds/helper_functions.qmd >}}

# Set up directory structure
```{bash mkdirs}
for directoryName in \
    output \
    output/figures \
    output/counts \
    output/seurat_objects/sobj_preprocess \
    output/seurat_objects/comb_sobjs \
    output/seurat_objects/harmony_sobjs \
    output/seurat_objects/harmony_sobjs_annot \
    output/scATOMIC \
    output/SCEVAN
do
    if [ ! -d ${directoryName} ]
    then
        mkdir -p ${directoryName}
    fi
done
```

# Read in raw data and process to Seurat objects
The metadata for all samples is stored in misc/all_samples.txt.

This reads in the raw data from the hdf5 files and processes them to Seurat objects. These objects are saved to `output/seurat_objects/sobj_preprocess` for individual objects and then merged for each group (as defined in the metadata), harmonized and and saved to output/seurat_objects/sobj_preprocess_merged/

output/seurat_objects/sobj_preprocess/

{{< include child_qmds/read_raw_data.qmd >}}

# Use SingleR and reference datasets to annotate cell types

{{< include child_qmds/annotate_celltypes.qmd >}}

# Use SCEVAN and scATOMIC to try to identify tumor cells
This will help in splitting the cancer cells from the stroma cells.

{{< include child_qmds/annot_cancer_scevan_scatomic.qmd >}}

# Split cancer vs the stroma - here
label potential tumor cell and then split the seurat object into cancer cells and
normal cells. The silhouette score was used to cluster the normal cells and 0.1
resolution was used to cluster the cancer cells (to reduce the excessive)
clustering.
It might be a worthwile to annotate or re run SCEVAN in the cancer cells to filter
out any normal cells that might have been group as cancer cells.
```{r, fig.width = 10, fig.height = 10, fig.align = "center", echo = FALSE, eval = FALSE}
cancer_celltypes <- list(patient_prim = c( "MSC",
                                           "Chondrocytes",
                                           "Tissue_stem_cells",
                                           "Neurons",
                                           "Osteoblasts",
                                           "Erythroblast",
                                           "Astrocyte",
                                           "BM",
                                           "Fibroblasts",
                                           "iPS_cells"),
                        patient_mets = c("MSC",
                                         "Chondrocytes",
                                         "Tissue_stem_cells",
                                         "Osteoblasts",
                                         "Smooth_muscle_cells",
                                         "Erythroblast",
                                         "Fibroblasts",
                                         "Astrocyte",
                                         "BM",
                                         "iPS_cells",
                                         "Neurons"),
                        xeno_prim_human = c(),
                        xeno_mets_human = c(),
                        xeno_prim_mouse = c(),
                        xeno_mets_mouse = c(),
                        normal_bone = c(),
                        mm_prim = c("Fibroblasts",
                                    "Stem cells",
                                    "Stromal cells",
                                    "Cardiomyocytes"),
                        mm_mets = c("Fibroblasts",
                                    "Stem cells",
                                    "Stromal cells",
                                    "Cardiomyocytes"))

harmony_params <-
    list(patient_prim = list(group_by = c("sample_name", "method", "data_source"),
                             theta = c(5, 5, 5),
                             lambda = c(0.5, 0.5, 0.5)),
        patient_mets = list(group_by = c("sample_name", "method", "data_source"),
                            theta = c(7, 7, 7),
                            lambda = c(0.5, 0.5, 0.5)),
        xeno_prim_human = list(group_by = c("sample_name", "method", "data_source"),
                               theta = c(7, 7, 7)),
        xeno_mets_human = list(group_by = c("sample_name", "method", "data_source"),
                               theta = c(7, 7, 7)),
        xeno_prim_mouse = list(group_by = c("sample_name", "data_source"),
                                theta = c(7, 7)),
        xeno_mets_mouse = list(group_by = c("sample_name", "method", "data_source"),
                               theta = c(7, 7, 7)),
        mm_prim = list(group_by = c("sample_name", "model"),
                       theta = c(12, 12)),
        mm_mets = list(group_by = c("sample_name", "model"),
                       theta = c(7, 7)),
        normal_bone = list(group_by = c("sample_name"),
                           theta = c(7)))

#parallel::mclapply(unique(all_samples_csv$unique), function(group)
for (group in c("patient_prim", "patient_mets", "mm_prim", "mm_mets")) {
    object <-
        qs::qread(str_c("output/seurat_objects/harmony_sobjs/",
                        group,
                        ".qs"))
    #x <- plot_my_stuff(s_obj, what = c("new_annot_clust"))
    ggsave(plot = x,
           filename = str_c("output/plots/", group, "_annot_clust.png"),
           width = 7,
           height = 7)
    Idents(object) <-
        object$new_annot_clust
    object$cancer_normal <-
        if_else(object$new_annot_clust %in% cancer_celltypes[[group]],
                "cancer_cells",
                object$new_annot_clust)
    object$cell_group <-
        if_else(object$new_annot_clust %in% cancer_celltypes[[group]],
                "cancer_cells",
                "normal_cells")
    qs::qsave(object, str_c("output/seurat_objects/annotated_sobjs/",
                            group,
                            ".qs"))

    for (cell_group_name in c("cancer_cells", "normal_cells")) {
        s_obj <-
            subset(x = object,
                   cell_group == cell_group_name) %>%
            process_seurat() %>%
            RunHarmony(group.by.vars = harmony_params[[group]]$group_by,
                       theta = harmony_params[[group]]$theta,
                       lambda = harmony_params[[group]]$lambda)
        s_obj <-
            s_obj %>%
            process_seurat(reduction = "harmony")
        #plot_my_stuff(s_obj, what = c("seurat_clusters", "new_annot_clust"))

        qs::qsave(s_obj, str_c("output/seurat_objects/tumor_vs_stroma/",  #nolint
                                group, "_",
                                cell_group_name,
                                ".qs"))

        #save the cancer object metadata with the cell barcodes
        date_time <-
            format(Sys.time(), "%Y%m%d_%H%M%S")
        s_obj$cell_barcodes <-
            colnames(s_obj)
        readr::write_tsv(x = s_obj@meta.data,
                        file = str_c("output/metadata/",
                                        group,
                                        "_cancer",
                                        date_time,
                                        ".tsv"))
    }
    print(str_c(group, " labelled with cancer_vs_normal cells and subsetted and saved"))
}

#save the xenograft objects
for (group in c("xeno_prim_human", "xeno_prim_mouse", "xeno_mets_human", "xeno_mets_mouse")) {
    object <-
        qs::qread(str_c("output/seurat_objects/harmony_sobjs/",
                        group,
                        ".qs"))

    qs::qsave(object, str_c("output/seurat_objects/tumor_vs_stroma/",
                            group,
                            ".qs"))
    qs::qsave(object, str_c("output/seurat_objects/annotated_sobjs/",
                            group,
                            ".qs"))

    #save the cancer object metadata with the cell barcodes
    date_time <-
        format(Sys.time(), "%Y%m%d_%H%M%S")
    object$cell_barcodes <-
        colnames(object)
    readr::write_tsv(x = object@meta.data,
                    file = str_c("output/metadata/",
                                    group,
                                    date_time,
                                    ".tsv"))
}

```

# Clustering based of the silhouette score and clustree
```{r, fig.width = 10, fig.height = 10, fig.align = "center", echo = FALSE, eval = FALSE}
object_list <-
    tribble(~group,                         ~res_value,
            "patient_prim_cancer_cells",    0.15,
            "patient_mets_cancer_cells",    0.05,
            "mm_prim_cancer_cells",         0.05,
            "mm_mets_cancer_cells",         0.05,
            "xeno_prim_human",              0.1,
            "xeno_mets_human",              0.1,
            "patient_prim_normal_cells",    0.15,
            "patient_mets_normal_cells",    0.15,
            "xeno_prim_mouse",              0.05,
            "xeno_mets_mouse",              0.15,
            "mm_prim_normal_cells",         0.25,
            "mm_mets_normal_cells",         0.05)

for (item in seq_len(nrow(object_list))) {
    group <- object_list$group[item]
    res_value <- object_list$res_value[item]
    s_obj <-
        qs::qread(str_c("output/seurat_objects/tumor_vs_stroma/",
                              group,
                              ".qs"))

    s_obj <- FindClusters(s_obj,
                          resolution = res_value)

    qs::qsave(s_obj,
              file = str_c("output/seurat_objects/resolution_optimized/",
                            group,
                            ".qs"))
}
```


# Session info
```{r}
sessionInfo()
```
